{
  
    
        "post0": {
            "title": "My Quiz",
            "content": "def question_with_response(promt): print(&quot;Question: &quot; + promt) msg = input() return msg correct = 0 ec_abort = 0 # I created the variable &quot;ec_abort&quot; (stands for extra credit abort) print(&quot;Hey queen, make sure to think out of the box when taking this quiz.&quot;) print(&quot;You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number.&quot;) question_with_response(&quot;Are you ready?&quot;) if ec_abort == 0: rsp = question_with_response(&quot;How old am I?&quot;) if rsp == &quot;16&quot;: print(rsp + &quot; is correct:)&quot;) correct += 1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # The new variable allows me to code so that if the user of my quiz types &quot;Give me 100%&quot;, it skips to the end with a 5/5 if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite color?&quot;) if rsp == &quot;Blue&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If they get the question correct, then the variable &quot;correct&quot; goes up by 1 if ec_abort == 0: rsp = question_with_response(&quot;How many siblings to I have?&quot;) if rsp == &quot;3&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If their answer is incorrect, the amount correct stays the same and it prints &quot;is no bueno:(&quot; if ec_abort == 0: rsp = question_with_response(&quot;What pet do I have?&quot;) if rsp == &quot;A dog&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite subject?&quot;) if rsp == &quot;Math&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 1: print(&quot;You scored 5/5&quot;) if ec_abort == 0: print (&quot;Slayyy you scored &quot; + str(correct) + &quot;/5&quot;) # If they don&#39;t use the &quot;Give me 100%&quot; option, ec_abort is still 0, allowing this step that gives the perentage correct to show . Hey queen, make sure to think out of the box when taking this quiz. You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number. Question: Are you ready? Question: How old am I? 16 is correct:) Question: What is my favorite color? Blue is correct:) Question: How many siblings to I have? Give me 100% BOOM 100% YOU ARE DONE You scored 5/5 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/myquiz",
            "relUrl": "/notebooks/myquiz",
            "date": " • Jan 7, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Tool Checks",
            "content": "Versions of Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Packages of Conda Check . conda list . # packages in environment at /home/alexac54767/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/alexac54767/.local/share/jupyter/kernels/bash javascript /home/alexac54767/.local/share/jupyter/kernels/javascript python3 /home/alexac54767/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . python3 /home/alexac54767/.local/share/jupyter/kernels/python3 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/toolchecks",
            "relUrl": "/notebooks/toolchecks",
            "date": " • Jan 7, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "My First Jupyter Notebook",
            "content": "print (&quot;Hello, World!&quot;) . Hello, World! .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/myjupyternotebook",
            "relUrl": "/notebooks/myjupyternotebook",
            "date": " • Jan 7, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Scoring Previous Collegeboard Submissions",
            "content": "Performance Task Scoring 1 . Submission #1 . My Score: 6/6 . Link to my rubric . Collegeboard Score: 4/6 . Link to their rubric . Reflection . I was surprised to see the score that collegeboard gave this student. Looking through the written response, I believed that the project fit all the critera. | Row 1 (Program Purpose and Function): The student didn’t get the point for row 1 since they fit 5 of the 6 critera. Collegeboard believes that the student didn’t describe the function’s purpose (rather explained its functionality) this was eye-opening, especially since the student response seemed alright to me, and like something I would possibly write. Now I realize that I need to be much more careful and detail oriented to ensure I am going to hit all 6 critera | . | Row 3 (Managing Complexity): The student also didn’t get the point for row 3 since he met none of the critera. This score was shocking to me. This entire class I have seen lists as easier and usually always helpful. When I looked at this project, I believed that the list was very smart and effective. However, apparently it doesn’t contribute to managing complexity. This was also a good warning to me that I need to make sure that my list is actually helping to manage complexity (not all lists are useful) | . | . Submission #2 . My Score: 5/6 . Link to my rubric . Collegeboard Score: 6/6 . Link to their rubric . Reflection . Row 5 (Algorithm Implentation): I scored differently than college board on one the the critera here. I thought that the student didn’t describe the code enough that one would be able to re-create it. However, that probably just reflects my current abilities in coding (especically compared to an expert working for collegeboard.) | I believe that this student did a wonderful job. I really love how they put text boxes within the images of code to describe it as they went. It made it much more organized and easier to follow. | The student was also very thorough with all their explanations. It’s good to keep in mind that quality really matters here (have more than you need) | . Performance Task Scoring 2 . Submission #1 . My Score: 3/6 . Link to my rubric . Collegeboard Score: 1/6 . Link to their rubric . Reflection . Row 1 (Program Purpose and Function): Both Collogeboard and I gave a 0 for this section. The student incorrectly identifies the input and output, and descrived the functionality as the purpose. Thier given purpose was incorrect. | . | Row 2 (Data Abstraction): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. They did have images of lists and identified a name, however, the name did not correleate to the images provided. | When I do my project, I need to make sure I spend careful attention to details, and make sure every description matches my images. | . | Row 3 (Managing Complexity): Both Collogeboard and I gave a 0 for this section. The images did not show a list being used, and the code was not complex. | the sudent did not explain how the list manages complexity | I need to make sure that my project will have a list that actually manges complexity and is useful | . | Row 4 (Procedural Abstraction): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. the response does not describe how this procedure contributes to the overall functionality | . | Row 5 (Algorithm Implentation): Both Collogeboard and I gave a 0 for this section. the description of the program was brief and doesn’t allow for someone to recreate it | . | What I’ve learned with this project and scoring is that I will need to follow the directions completely when I do my project. | . Submission #4 . My Score: 6/6 . Link to my rubric . Collegeboard Score: 3/6 . Link to their rubric . Reflection . Row 2 (Data Abstraction): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. data stored in the list is not being used in the second image | once again this shows how specific my images must be in order to recieve credit | . | Row 3 (Managing Complexity): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. the list is not used to manage complexity (acts as a counter, so it can be replaced with a single counter variable) | like other examples, I need to make sure that my list is actually managing complexity and is useful | . | Row 6 (Testing): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. The response gives the conditions being tested rather than two different arguments that cause a different segment of code to execute. Arguments should be specific values used in the call to the procedure. | this is the first time I’ve seen this score for section 6. I need to make sure to follow Collegeboard’s critera for what an argument is (and not just test conditions) | . | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/submissions",
            "relUrl": "/collegeboard/submissions",
            "date": " • Jan 6, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Check Number 3 Vocabulary",
            "content": "Vocabulary and Examples . Binary Numbers: a numbering scheme in which there are only two possible values for each digit – 0 or 1 – and is the basis for all binary code used in computing systems | Hexadecimal: a numbering system with base 16 | . . Bits: the smallest unit of data that a computer can process and store ex: 1 or 0 (one number in binary is a bit) | . | Bytes: a unit of data that is eight binary digits long ex: 10010110 | . | Nibble: four consecutive binary digits or half of an 8-bit byte ex: 0101 | . | . . Unsigned Integer: integers but have the property that they don’t have a + or - sign associated with them ex: 2, 3, 6, 1000 | . | Signed Integer: integers that have a + or - sign associated with them ex: -2, +3,000, -1 | . | Floating Point: a positive or negative whole number with a decimal point ex: 3.25, 5.1, 67.627 | . | Binary Data Abstractions: | Boolean: a logical data type that can have only the values true or false | . . ASCII: (American Standard Code for Information Interchange) a standard code for characters stored in a computer or to be transmitted between computers | Unicode: a universal character encoding standard | RGB: a system for representing the colors to be used on a computer display | . . Data Compression: a reduction in the number of bits needed to represent data Lossy: data encoding and compression technique that deliberately discards some data in the compression process | Lossless: restores and rebuilds file data in its original form after the file is decompressed | . | . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week3/vocab",
            "relUrl": "/week3/vocab",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "3.17 and 3.18 Student Lesson (group 9)",
            "content": "Hack 1: Collatz and printing Hailstone Numbers . sequence = [] def combinedcollatz(i): while i &gt; 1: if (i % 2): # i is odd sequence.append(i) i = 3*i + 1 else: # i is even sequence.append(i) i = i//2 if i == 1: sequence.append(1) else: print(i, &quot;is invalid, please try again&quot;) #this will print if the number is invalid i = int(input(&#39;Enter i: &#39;)) combinedcollatz(i) print(&quot;Hailstone numbers: &quot;, sequence, &quot; nNumber of iterations: &quot;, len(sequence)-1) . Hailstone numbers: [34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1] Number of iterations: 13 . Hack 2: Write 2 algorithms (efficent/innefficent) . i = 0 # efficient code while i &lt; 10: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i &gt;= 10: print(&quot;Great job! You&#39;ve studied enough&quot;) break . mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend Great job! You&#39;ve studied enough . i = 0 # Inefficient code if i == 0: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 1: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 2: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 3: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 4: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 5: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 6: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 7: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 8: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 9: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i &gt;= 10: print(&quot;Great job! You&#39;ve studied enough&quot;) i += 1 . mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend Great job! You&#39;ve studied enough . The difference in efficiency . The inefficient piece of code uses an if statement for every single hour of studying. It has a lot of repetition like the print(&quot;mmmm mmmm not enought studying my friend&quot;), as well as the i += 1 for every single hour. | The efficient code uses a while loop. The small piece of code iterates through the hours, and compares them to the conditions. It doesn&#39;t have repetition (modularity), allowing it to be faster and easier to change/read with the same result. | . Hack 3 Algorithm efficiency: . Algorithm efficiency is the amount of &quot;effort&quot;, or steps, that an algorithm must go through to complete it&#39;s purpose. An efficent algorithm is fast and goes through fewer proccesses. | . Hack 4 Daily Tasks . tasks = [&quot;brush teeth&quot;, &quot;skin care&quot;, &quot;pack water/lunch&quot;, &quot;go to school&quot;, &quot;homework&quot;] finished = [] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here print(&quot;Doing now: &quot;, task) finished.append(task) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) print(&quot;Done: &quot;, finished) . Doing now: brush teeth Doing now: skin care Doing now: pack water/lunch Doing now: go to school Doing now: homework Done: [&#39;brush teeth&#39;, &#39;skin care&#39;, &#39;pack water/lunch&#39;, &#39;go to school&#39;, &#39;homework&#39;] . This code takes the item in the tasks list and prints them as they go. Then, it appends the item into a &quot;finished&quot; list. It is also an efficient algorithm since it utilizes a for loop and calls the item within the definition of the function. . Extra Credit . class_schedule = [] i = 0 while i &lt; 5: period = input(&quot;What is a class in your schedule?&quot;) class_schedule.append(period) i += 1 if i == 5: break print(&quot;Your schedule: &quot;, class_schedule) print(&quot;Period 1: &quot;, class_schedule[0], &quot; Time: 8:35 AM-9:44 AM&quot;) print(&quot;Period 2: &quot;, class_schedule[1], &quot;Time: 9:49 AM-10:58 AM&quot;) print(&quot;Break: 10:58 AM-11:08 AM&quot;) print(&quot;Period 3: &quot;, class_schedule[2], &quot;Time: 11:13 AM-12:22 PM&quot;) print(&quot;Lunch: 12:22 PM-12:52 PM&quot;) print(&quot;Period 4: &quot;, class_schedule[3], &quot;Time: 12:57 PM-2:06 PM&quot;) print(&quot;Office Hours: 2:06 PM-2:31 PM&quot;) print(&quot;Period 5: &quot;, class_schedule[4], &quot;Time: 2:36 PM-3:45 PM&quot;) . Your schedule: [&#39;Offroll&#39;, &#39;AP Calculus AB&#39;, &#39;ASB&#39;, &#39;APCSP&#39;, &#39;Photography&#39;] Period 1: Offroll Time: 8:35 AM-9:44 AM Period 2: AP Calculus AB Time: 9:49 AM-10:58 AM Break: 10:58 AM-11:08 AM Period 3: ASB Time: 11:13 AM-12:22 PM Lunch: 12:22 PM-12:52 PM Period 4: APCSP Time: 12:57 PM-2:06 PM Office Hours: 2:06 PM-2:31 PM Period 5: Photography Time: 2:36 PM-3:45 PM .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupnine",
            "relUrl": "/students/groupnine",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Computer Science Panel",
            "content": "Schooling Paths . Kathyleen Beveridge: undergrad for Finance at Santa Clara | NBA at USC (not traditional timing since she waited to get her NBA) | studied abroad in Spain (loved it!) | . | Kris Porter: UCLA for Electrical Engineering | masters degree from Cal State LA Didn’t do well at first in computer science! He didn’t take intrest in the topic until 8 years later (never give up becuase you never know what you will find intrest in) | . | . | . Careers . Kathyleen Beveridge: . first job = investment banker with Wells Fargo (wasn’t her thing) | switched to high tech industry with job at HP | took 6 months off | worked at Qualcomm | now works at Thermo Fisher Scientific as senior director of marketing and sales ^ she works in a similar scrum process with sprints and positions (Scrum Master, Dev Ops, etc) | uses databases and data science to predict sales, weather (wine harvest), etc. Non-technical roles = recommending clients to buy certain things/do things | . | . Kris Porter: . main job: Software engineer (SRE, DevOps, Infrastructure) | first job = fixed computers/other tech | job at start up (GPM) and worked email marketing automation (similar to DevOps) | job at NBC Universal (streaming media infrastructure) | job at Qualcomm (Dev ops job, automation) | job at Twitter (worked on API which requested from client and retrieve info from all users and resurface important stuff back to client) Twitter Projects= New DataCenter Deployment &amp; Migrating HomeTimeline to GraphQL | . | . Important Tips/Skills: . career paths won’t always be a striaght line | Be adaptive | it’s okay if you’re not sure what your intrests are yet | Best technicians: listen and solve technical requirements (can explain in non-technical terms) | continuous learning | “Learn how to learn” = always be ready to learn more | learn multiple programming languages | don’t be super concerned about things you read on the news (resiliance) | the only risk is not learning | set good balance between work/hobbies and necessities | . My Reflection: . I know I enjoy STEM classes, especially math. I also love APCSP when I can figure the problem/code out. However, sometimes I feel dicouraged to pursue opportunities or careers in computer science/tech because I find it difficult. However, after listening to Kris and Kathleen, I feel like I still am able to go into this industry. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/computerscience/panel",
            "relUrl": "/computerscience/panel",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "subtracting javascript button",
            "content": "Subtracting 2 Numbers . Subtract . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;Subtract&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a - b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/students/groupsix/subtractionbutton",
            "relUrl": "/collegeboard/students/groupsix/subtractionbutton",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "multiplying javascript button",
            "content": "Multiplying 2 Numbers . Multiply . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;Multiply&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a * b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/students/groupsix/multiplicationbutton",
            "relUrl": "/collegeboard/students/groupsix/multiplicationbutton",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "3.14 and 3.15 Student Lesson (group 7)",
            "content": "Hack #1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code: this code below uses the pre-exisiting library &quot;random&quot; to generate a random number | it uses the keyword &quot;input&quot; to include it in the code | the random number is then used to see if you &quot;win&quot; the game or not | . | . import random number = random.randint(0,100) print(&quot;you&#39;re random number is&quot;,number) if number == 21: print(&quot;you win!&quot;) else: print(&quot;better luck next time :(&quot;) . you&#39;re random number is 89 better luck next time :( . Hack 2 . Define what an import random function do: . an import random function would import the contents of the pre-existing random library so that you could use it in your code | . | List a few other things that we can import other than random: . you can import more than just random. For example, you can import flask, math, or Numpy (a mathematical library). | . | . import math number = input(&quot;what number do you want to find the square root of?&quot;) square_root = math.sqrt(int(number)) print(&quot;The square root of&quot;,number,&quot;is&quot;,square_root) . The square root of 36 is 6.0 . Hack 3 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded?: . any number greater than or equal to 12 and less than or equal to 20 can be printed. (12,13,14,15,16,17,18,19,20) | . | . import random landed_on = random.randint(1,8) if landed_on &lt;= 3: color = &quot;green&quot; elif 4&lt;= landed_on &lt;= 5: color = &quot;blue&quot; elif landed_on == 6: color = &quot;purple&quot; elif landed_on == 7: color = &quot;red&quot; elif landed_on == 8: color = &quot;orange&quot; print(&quot;your color is&quot;, color) . your color is blue .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupseven",
            "relUrl": "/students/groupseven",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "dividing javascript button",
            "content": "Dividing 2 Numbers . Divide . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;Divide&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a / b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/students/groupsix/divisionbutton",
            "relUrl": "/collegeboard/students/groupsix/divisionbutton",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "adding javascript button",
            "content": "Adding 2 Numbers . Add . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;Add&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/students/groupsix/additionbutton",
            "relUrl": "/collegeboard/students/groupsix/additionbutton",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Week 3 Student Lessons",
            "content": "3.12 and 3.13 Calling and Developing Procedures . A procedure = a named set of instructions that can take in parameters and return values May be called &quot;method&quot; or &quot;function&quot; in different programming languages | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values | Procedures can be classified as sequencing, selection, and iteration | . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there (can be empty) | . x = 5 # input calues can be changed when using parameters y = 3 def multiply(x, y): # x and y are the parameters product = x * y return product answer = multiply(x, y) # this is calling the procedure print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Determining the Result of a Procedure . To determine the result of a procedure or any code: follow code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . return values: write &quot;return&quot; followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . def divide(num1,num2): x = num1/num2 return x # x = return value . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . # This code simulates the scoring at a cheerleading competition &lt;- the overall score for the comp is 25% of your first performance (day 1) and 75% of your second performance (day 2) scores_given = [&quot;Code 5&quot;, &quot;Coed&quot;] team_name = input(&quot;What is the name of your team?&quot;) def combined_score(score1, score2): #defining this function makes it much simpiler when trying to score hundreds of teams # instead of writing all of this code again for each team, it is used repeatedly combined_score = ((0.25*score1)+(0.75*score2)) print(team_name,&quot;&#39;s overall score for the competition is &quot;, combined_score) scores_given.append(team_name) combined_score(score1 = int(input(&quot;what was your day 1 score?&quot;)), score2 = int(input(&quot;what was you day 2 score?&quot;))) print(&quot;Scores have been given to &quot;, scores_given) . TGLC &#39;s overall score for the competition is 97.25 Scores have been given to [&#39;Code 5&#39;, &#39;Coed&#39;, &#39;TGLC&#39;] . 3.14-3.15 Libraries and Random Values . College Board Essential Knowledge . A software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. | . Defining a Library . A library is a collection of code from an external source that can be used to add functionality to a program. | Libraries are very useful, as they can be used to save time and effort in the development process | Libraries are usually included in a program using a special keyword called &quot;import&quot; This keyword tells the program to look for the library and use its code | . What is randomization? . Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3 | . import random # &quot;import&quot; and then the name of the library #imported library allows me to use their random number generator number = random.randint(0,100) print(&quot;you&#39;re random number is&quot;,number) if number == 21: print(&quot;you win!&quot;) else: print(&quot;better luck next time :(&quot;) . you&#39;re random number is 1 better luck next time :( . # another example of import random import random landed_on = random.randint(1,8) if landed_on &lt;= 3: color = &quot;green&quot; elif 4&lt;= landed_on &lt;= 5: color = &quot;blue&quot; elif landed_on == 6: color = &quot;purple&quot; elif landed_on == 7: color = &quot;red&quot; elif landed_on == 8: color = &quot;orange&quot; print(&quot;your color is&quot;, color) . your color is orange . There are many different methods within the random library . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . 3.16 Simulations . Link to my group&#39;s lesson . 3.17-3.18 Algorithm Efficiency and Undecidable Problems . Vocabulary . Collatz: The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . | Hailstone numbers: The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples: Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No. . | Iteration: The action or a process of iterating or repeating: such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . | Undecidable problems: An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . | Unsolvable problems: An unsolvable problem is one for which no algorithm can ever be written to find the solution. . | Algorithmic efficiency: an aspect of algorithmic programming that measures the number of steps needed to solve a problem . inefficient and efficent algorithms have the same objective but one runs more efficiently than the other | . | heuristic approach: a technique designed for solving a problem more quickly when classic methods are too slow . | . sequence = [] def combinedcollatz(i): while i &gt; 1: if (i % 2): # i is odd sequence.append(i) i = 3*i + 1 else: # i is even sequence.append(i) i = i//2 if i == 1: sequence.append(1) else: print(i, &quot;is invalid, please try again&quot;) #this will print if the number is invalid i = int(input(&#39;Enter i: &#39;)) combinedcollatz(i) print(&quot;Hailstone numbers: &quot;, sequence, &quot; nNumber of iterations: &quot;, len(sequence)-1) . Hailstone numbers: [34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1] Number of iterations: 13 . Link to my vocabulary .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/studentlessons/weekthree",
            "relUrl": "/studentlessons/weekthree",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "Section 3.14.1 - Libraries (Ethan Tran) . Learning Objective . To be able to select appropriate libraries and/or existing code to use in the creation of new programs. . College Board Essential Knowledge . A software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. | . Defining a Library . A library is a collection of code from an external source that can be used to add functionality to a program. | Libraries are very useful, as they can be used to save time and effort in the development process. | Libraries are usually included in a program using a special keyword called &quot;import&quot; This keyword tells the program to look for the library and use its code. | . Example . import math math.sqrt(64) . Review Questions (Answer for candy!) . . 1) In your own words, what is a library? . 2) Why are libraries useful when writing a program? . 3) What keyword is used to add a pre-made library? . Hacks . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . . . Lesson 3.15.1 . What is randomization? . 1) Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3, either one of those. . 2) Now if we look into our day to day life we can see that randomization is all around us. . Now for a piece of candy does anyone want to tell us an example of randomization during our day to day life. . 3) In order to use the random function we have to first import random at the very beggining. . Now lets look at the code below right here. . import random answer1 = random.randint(0,3) answer2 = random.randint(1,8) answer3 = answer1 + answer2 print(answer3) . 1) The lowest number that will be generated is 0 for answer 1 and for answer2, the lowest that will be generated is 1 so the lowest number that can be generated for answer 3 would be 1. . 2) The highest number that will be generated to answer1 is 3 and the highest number that will be generated for answer 2 is 8 so the highest number for answer 3 would be 11. . 3) The range of numbers that answer 3 could print out would be from 1 to 11. . So a normal dice contains six sides with 1-6 on the individual sides. Which of the following code would simulate the result of rolling the dice three times and adds together all the obtained values together? . A. . import random sum = random.randint(1,6) + random.randint(1,6) + random.randint(1,6) print(sum) . B. . import random sum = random.randint(1,18) print(sum) . C. . import random sum = 3*random.randint(1,6) print(sum) . 1) Its not B because B is saying that it is going to choose one number between the range of 1 and 18 and not the sum of 3 diff numbers. . 2) C is not correct also because C is saying that the computer is choosing one random between 1 and 6 and multiplying that 3 times but we want the sum of three different numbers between 1 and 6. . 3) So the answer is A. . . For the last example: . import random i = 1 while i &lt; 4: choose = random.randint(1,10) print(choose) i += 1 . Which answers could not be possible for the code above? . A. 4 7 6 . B. 9 1 8 . C. 2 11 5 . D. 5 10 2 . Random can also have different methods, in the above examples we only used one example, randint which returns a random number between the given range. Down below I have created a table of all the methods with the description of what it is used for with the random function. . Method | Description . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . Lesson Recap: 1) random function generates a random number from a to b (range of two numbers) . 2) You need to import random in order to use the random function . 3) Every result from an import function is equally likely to occur . Hacks for lesson 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . . . 3.15.2 Lesson . Some Essential Knowledge that you need to know | RANDOM (a,b) will provide you with a random integer between the numbers a-b | Ex. RANDOM (7,18) can provide you with the number 13. | Using a random generator means each result can come out as different. | . Lets Try an Example Scenario . Try and formulate a way to write a segment of code that can simulate the flipping of a coin. | You have to use a random generator and assign the output of &quot;Heads&quot; or &quot;Tails&quot; to a specified result. | . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) # Try this code for yourself! . This is a pretty simple code to understand. | First we use the randomization here between the 1 and 2 to determine which side of the coin we get. | If we get 1 then we get heads. If we get 2 or anything else than 2, then we get Tails. | . Now let&#39;s answer questions using your knowledge. . If you want yes to show up 50% of the time, which of the code segments can you use? . | A) random(1,100) &lt;= 50 . | B) random(1,100) == 50 | C) random(1,10) &lt;= 5 | D) random(1,10) &gt;= 5 . | The answer is A,C, and D! . | . Why isn&#39;t the answer B? . This because when you are saying equal to 50, you are saying only when this one number shows up the output will be yes. | You want it to come up 50 percent of the time not just when that one number shows up. | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | . Hacks Summary . Hacks 3.14.1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . Hacks 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded?: . any number greater than or equal to 12 and less than or equal to 20 can be printed. (12,13,14,15,16,17,18,19,20) | . | . import random landed_on = random.randint(1,8) if landed_on &lt;= 3: color = &quot;green&quot; elif 4&lt;= landed_on &lt;= 5: color = &quot;blue&quot; elif landed_on == 6: color = &quot;purple&quot; elif landed_on == 7: color = &quot;red&quot; elif landed_on == 8: color = &quot;orange&quot; print(&quot;your color is&quot;, color) .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2016/2022/12/11/group7lesson.html",
            "relUrl": "/week%2016/2022/12/11/group7lesson.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "3.12 and 3.13 Student Lesson (group 6)",
            "content": "Hack 1 . Procedure: a procedure is like a function (it carries out an action) | Parameter: a parameter is a variable that holds data from previously in the function | Return Values: return values are what is returned after the &quot;return&quot; statement &lt;- they allow for the data to be refrenced later in the code (ex: print) | Output Parameters: the parameters that refrence the output of a previous function | . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: c Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: d Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: b Correct :) Score: 3 / 3 . import math number = input(&quot;What number would you like to take the square root of?&quot;) def square_root_function(number): square_root = math.sqrt(int(number)) return square_root print(&quot;The square root of &quot; + number + &quot; is &quot; + str(square_root_function(number))) . The square root of 4 is 2.0 . Hack 2 . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective: abstracting away your program logic into seperate functions is effective since it allows for you to be more time efficicent, and make fewer errors. If you need to identify/change an error, you have less to work with and change. Also, it is easier to follow, and can reference pre-existing functions (making the coding simpler) | . | # This code simulates the scoring at a cheerleading competition &lt;- the overall score for the comp is 25% of your first performance (day 1) and 75% of your second performance (day 2) scores_given = [&quot;Code 5&quot;, &quot;Coed&quot;] team_name = input(&quot;What is the name of your team?&quot;) def combined_score(score1, score2): #defining this function makes it much simpiler when trying to score hundreds of teams # instead of writing all of this code again for each team, it is used repeatedly combined_score = ((0.25*score1)+(0.75*score2)) print(team_name,&quot;&#39;s overall score for the competition is &quot;, combined_score) scores_given.append(team_name) combined_score(score1 = int(input(&quot;what was your day 1 score?&quot;)), score2 = int(input(&quot;what was you day 2 score?&quot;))) print(&quot;Scores have been given to &quot;, scores_given) . TGLC &#39;s overall score for the competition is 97.25 Scores have been given to [&#39;Code 5&#39;, &#39;Coed&#39;, &#39;TGLC&#39;] . # this function takes a string as input and returns a list of words, where each word # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # this function takes a string as input and returns the number of words that start with any inputted letter def count_words_starting_with_l_letter(s): l = input(&quot;What letter would you like to check?&quot;) words = split_string(s) count = count_words_starting_with_letter(words, l) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; l_count = count_words_starting_with_l_letter(s) a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with your letter:&quot;, l_count) . Words starting with your letter: 1 . Hack 3 . procedure names: the name of the function in which you are calling | arguments: values that are sent to a function when called for | . Adding 2 Numbers Button . Subtracting 2 Numbers Button . Multiplying 2 Numbers Button . Dividing 2 Numbers Button .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupsix",
            "relUrl": "/students/groupsix",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "3.9 and 3.11 Student Lesson (group 5)",
            "content": "Hacks 1 . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . Why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? This knowledge is important since it will cause people to look at and compare code more carefully. We can catch mistakes, make code more efficient, and overall learn from others. Mistakes are learning too! | . | . isalexatired = True havehw = True if isalexatired == True and havehw == False: print(&quot;Stay home and sleep!&quot;) else: if havehw == True: print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep!&quot;) # Boolean conversion gotoschool = not(isalexatired) or isalexatired and havehw if gotoschool == True: print(&quot;Go do you work at school!&quot;) if gotoschool == False: print(&quot;Stay home and sleep queen&quot;) . Go to school Go do you work at school! . Hacks 2 . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Natural Language for Netflix Code . Input what show user is looking for | check if show is in showdictionary | If it is in dictionary, move onto step 4. If not, print &quot;show is not available on Netflix&quot; | check if the show has a rating of 3 or higher | If it does, print &quot;show is recommended&quot;; if it doesn&#39;t print &quot;how is not recommended&quot; | Flow chart is in review ticket . showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is recommended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is recommended . Hacks 3 . Fix the number guessing game . Make a flow chart for the algorithm number guessing game &lt;- flow chart is in review ticket | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = -1 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(0,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 0 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): guessednum = input(&quot;Choose a number!&quot;) return guessednum #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;You guessed too low&quot;) lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;You guessed too high&quot;) upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 0 and 100. You guessed 72. You guessed too high Guess a number between 0 and 72. You guessed 34. You guessed too low Guess a number between 34 and 72. You guessed 45. You guessed too low Guess a number between 45 and 72. You guessed 56. You guessed too high Guess a number between 45 and 56. You guessed 48. You guessed too low Guess a number between 48 and 56. You guessed 49. You guessed too low Guess a number between 49 and 56. You guessed 52. You guessed the number in 7 guesses! . Hacks 4 . calculate the middle index and create a binary tree for each of these lists Binary Trees in review ticket 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number?: In the first set of numbers, the second number looked at in a binary search if it is more than the middle number would be 80. | In the second set of numbers, the second number looked at in a binary search if it is more than the middle number would be 74. | In the third set of numbers, the second number looked at in a binary search if it is more than the middle number would be 96. | . | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . Answer = C . | index = [12, 14, 43, 57, 79, 80, 99] index.sort() mid = int(len(index) / 2) print(mid) print(&quot;middle is&quot;,index[mid]) . 3 middle is 57 . index =[1, 12, 30, 43, 66, 74, 92] index.sort() mid = int(len(index) / 2) print(mid) print(&quot;middle is&quot;,index[mid]) . 3 middle is 43 . index = [7, 13, 33, 60, 84, 96, 111] index.sort() mid = int(len(index) / 2) print(mid) print(&quot;middle is&quot;,index[mid]) . 3 middle is 60 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupfive",
            "relUrl": "/students/groupfive",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Week 2 Student Lessons",
            "content": "3.5-3.7 Student Lesson (group 3) . What is a boolean? . boolean = a denoting a system of algebraic notation used to represent logical propositions, especially in computing and electronics. | simple terms: determines if something is true or false | used in binary (0 = false and 1 = true) | . score = 3 i = score if i == 3: print(&quot;True&quot;) # either is true or false else: print(&quot;False&quot;) . True . Hack 1: 3.5 . [x] Explain in your own words what each logical operator does [x] Code your own scenario that makes sense for each logical operator . NOT: The NOT logical operator returns the opposite condtion of the data | AND: The AND logical operator determines if 2 conditions are met | OR: The OR logical operator determines if 1 of the conditions are met | . ispassing = False isstudentpassing = not(ispassing) print(isstudentpassing) . temp = input(&quot;what is the temperature today?&quot;) if int(temp) &gt;= 40 and int(temp) &lt;= 70: print(&quot;Bring a hoodie!&quot;) if int(temp) &lt; 40: print(&quot;bring snow gear!&quot;) if int(temp) &gt; 70: print(&quot;No jacket today!&quot;) . Bring a hoodie! . APscore = 4 Finalscore = 68 if APscore &gt;= 3 or Finalscore &gt;= 75: print(&quot;student passed this class&quot;) else: print(&quot;student did not pass this class&quot;) . student passed this class . Notes . Selection: specific block of code that will execute (depending on algorithm condition returning true or false) | Algorithm: finite set of instructions that accomplish a specific task | Conditional Statement / If-Statement: statement that affects the sequence of control by executing certain statements depending on the value of a boolean (true or false) | Conditionals allow for the expression of algorithms that utilize selection without a programming language &quot;In which the code in block of statements is executed if the Boolean expression condition evaluates to true; no action is taken if condition evaluates to false&quot; | . | . Conditionals are ues in many languages . here is an example of one in Javascript: | . if (30 == 7) { console.log(&quot;The condition is true&quot;) } else if (30 != 7) { console.log(&quot;The condition is false&quot;) } . Hack 2: 3.6 . [x] Level I: Vowel Count Return the number (count) of vowels in the given string. We will consider a, e, i, o, u as vowels for this challenge (but not y). The input string will only consist of lower case letters and/or spaces. . Hint: If you use a lot of if-statements and there are more than one outcome, that is to be expected. If not, don&#39;t panic, just keep trying. . [x] Level III: Mutliples of 3 or 5 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. . Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Additionally, if the number is negative, return 0 (for languages that do have them). . Note: If the number is a multiple of both 3 and 5, only count it once. . Hint: What do you know about for loops? Since your code incorporates a list of numbers from 1 to the max number, can you use for loops along with conditionals? . [x] binary conditional logic [x] define key terms . Defining Key Terms: . Boolean: a boolean is an operator that determines if a condition is true or false | Selection: When an algorithm must make a decision (if a condition is met) | AND: AND is a logical operator that determines of 2 conditions are both met | OR: OR is a logical operator that determines if 1 of 2 conditions is met | NOT: NOT is a logical operator that displays the oposition condition of the data | . gpa = 4.0 extracirriculars = &quot;present&quot; if gpa &gt;= 4.0 and extracirriculars == &quot;present&quot;: major = input(&quot;What is your major&quot;) if major == &quot;math&quot; or major == &quot;science&quot;: print(&quot;You have been accepted into our STEM program!&quot;) elif major == &quot;english&quot; or major == &quot;history&quot;: print(&quot;You have been accepted into our arts program!&quot;) else: print(&quot;You have been accepted into our &quot; + major + &quot; program!&quot;) else: print(&quot;I&#39;m sorry, you are not accepted to this program&quot;) . You have been accepted into our STEM program! . # my first attempt at the Level 1 Challenge &lt; better to not use the contians function # also needs to iterate through to check every character (what if there are multiple of each vowel?) word=input(&quot;Input a word to check how many vowels it has. &quot;) i == 0 #number of vowels if word.__contains__(&quot;a&quot;): i =+ 1 if word.__contains__(&quot;e&quot;): i =+ 1 if word.__contains__(&quot;i&quot;): i =+ 1 if word.__contains__(&quot;o&quot;): i =+ 1 if word.__contains__(&quot;u&quot;): i =+ 1 if i == 0: print(&quot;this word has no vowels&quot;) else: print(i) . input_string = input(&quot;Input a string to check how many vowels it has. &quot;) vowelcount = 0 for character in input_string: #iterates through the string character by character if character == &quot;a&quot;: vowelcount += 1 elif character == &quot;e&quot;: vowelcount += 1 elif character == &quot;i&quot;: vowelcount += 1 elif character == &quot;o&quot;: vowelcount += 1 elif character == &quot;u&quot;: vowelcount += 1 print(vowelcount) . 4 . numberstring = input(&quot;Input a number to find the sum of all the multiples of 3 or 5 below it. &quot;) numbertocheck = int(numberstring) totalmultiples = 0 if numbertocheck &gt;= 0: # if the number is negative it will display the sum as 0 for n in range(numbertocheck+1): if n/3 == int(n/3): #checks for multiples of 3 print(str(n) + &quot; is a multiple of 3&quot;) totalmultiples += n #elif prevents duplicates of numbers with both multiples of 3 and 5 elif n/5 == int(n/5): # checks for multiples of 5 print(str(n) + &quot; is a multiple of 5&quot;) totalmultiples += n print(totalmultiples) . 0 is a multiple of 3 3 is a multiple of 3 5 is a multiple of 5 6 is a multiple of 3 9 is a multiple of 3 10 is a multiple of 5 12 is a multiple of 3 15 is a multiple of 3 60 . Hack 3 . [x] For the first hack, pretend you are a school&#39;s test grader. Create an array with integers, each integer representing one score from a student&#39;s taken tests. If the average of the student&#39;s test scores are at least 75 percent, then display that the student is elligible for credit, and if not, display that the student must retake the tests over break. [x] The second hack is more number-oriented. Create an algorithm that calculates the sum of two numbers, then determines whether the sum is greater than or less than 100. [x] The hacks above was heavily derived from CollegeBoard. As a computer science student, you should be able to create an algorithm utilizing conditionals. Try something number-oriented if you get stuck. Creativity gets points. . def average(lst): return sum(lst)/len(lst) gradelist = [92, 83, 90, 74, 86, 97] averagegrade = average(gradelist) print(str(averagegrade) + &quot; is the student&#39;s grade average&quot;) if averagegrade &gt;= 75: print(&quot;student is eligible for credit&quot;) else: print(&quot;student needs to retake tests during break&quot;) . 87.0 is the student&#39;s grade average student is eligible for credit . num1 = input(&quot;What is your first number?&quot;) num2 = input(&quot;What is your second number?&quot;) sumofnumbers = int(num1) + int(num2) if sumofnumbers &gt;= 100: print(str(sumofnumbers) + &quot; is greater than or equal to 100&quot;) else: print(str(sumofnumbers) + &quot; is less than than 100&quot;) . 7 is less than than 100 . # to test if a show is included in Netflix, and if it is recommended showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is recommended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is recommended . Nested Conditions . conditional statements within conditional statements | called &quot;nested&quot; within another | else if inside of another ese if | . Hack 4 . [x] Create 3 differnt flow charts representing nested statements and transfer them into code. [x] Create a piece of code that displays four statements instead of three. Try to do more if you can. [x] Make piece of code that gives three different recommandations for possible classes to take at a school based on two different condtions. These conditions could be if the student likes STEM or not. . STEM = input(&quot;Are you intrested in STEM? Y or N&quot;) if STEM == &quot;Y&quot;: subject = input(&quot;Do you like math or science better?&quot;) if subject == &quot;math&quot;: print(&quot;Class recommendations: Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics&quot;) if subject == &quot;science&quot;: print(&quot;Class recommendations: Chemistry, Physics, AP Enviornmental Science, AP Physics, AP Chemistry&quot;) else: language = input(&quot;Are you intrested in language? Y or N&quot;) if language == &quot;Y&quot;: lansubject = input(&quot;Do you prefer a foreign language or English?&quot;) if lansubject == &quot;foreign language&quot;: print(&quot;Class recommendations: Spanish, Mandarin, AP Spanish, AP Mandarin&quot;) if lansubject == &quot;English&quot;: print(&quot;Class recommendations: American Literature, AP English Literature&quot;) if language == &quot;N&quot;: print(&quot;See class list for more options!&quot;) . Class recommendations: Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics . Flowchart #1: Is it cold? . temp = input(&quot;what is the temperature today?&quot;) if int(temp) &lt;= 73: print(&quot;It is cold!&quot;) if int(temp) &lt;= 40: print(&quot;Bring a snow jacket!&quot;) else: print(&quot;Bring a hoodie!&quot;) else: print(&quot;It&#39;s warm today! Don&#39;t bring a jacket :)&quot;) . It is cold! Bring a snow jacket! . Flowchart #2: Is the class difficult? . passingrate = 72 testaverage = 82 if passingrate &gt; 70 and passingrate &lt;= 100: if testaverage &gt;= 80: print(&quot;This class is not difficult&quot;) else: print(&quot;this class is difficult&quot;) else: print(&quot;this class is difficult&quot;) . This class is not difficult . Flowchart #3: Should Alexa work at school during first period off roll? . feeling = input(&quot;Are you tired today?&quot;) if feeling == &quot;yes&quot;: print(&quot;Stay home and sleep&quot;) if feeling == &quot;no&quot;: homework = input(&quot;Do you have homework to do?&quot;) if homework == &quot;yes&quot;: print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep&quot;) . Stay home and sleep . drinkable = &quot;potable&quot; temperature = &quot;warm&quot; if drinkable == &quot;potable&quot;: print(&quot;water is potable&quot;) if temperature == &quot;cold&quot;: print(&quot;water is &quot; + str(temperature)) print(&quot;water is in ideal condition&quot;) print(&quot;drink up!&quot;) else: print(&quot;water is &quot; + str(temperature)) print(&quot;water is not in ideal condition&quot;) print(&quot;chill with ice&quot;) else: print(&quot;do not drink, water is not potable&quot;) . water is potable water is warm water is not in ideal condition chill with ice . 3.8-3.10 Student Lesson (group 4) . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met | Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop | . while loops = similar outpytut with variation in input | similar to for loop (requires a variable which is the starting value) | . Hacks Unit 3 Section 3.8.1 . Define an Iteration | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | Iteration: loop that continues repeating until condition is met | Example of iteration with stopping condition: I am doing an easter egg hunt and trying to frind the golden egg. I have split the searching area into sections | . I walk to a section | I look aroung to try and find the golden egg | If it is not there, I add one to the section number (move onto next section) | I repeat steps 1 through 4 | Once I find the egg, I stop searching to go brag to the kids | | . hourshomework = 0 while hourshomework &lt; 8: print(&quot;Too easy&quot;) hourshomework += 1 if hourshomework == 6: break . Too easy Too easy Too easy Too easy Too easy Too easy . Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | Iteration statement: a condition that must be met in a loop or it will continue repeating | . Lists Commands . append() - adding element to the end of the list | insert() - adding an element in a specific position | remove() - remove an item from the list | len() - returns the number of items in a list | sort() - changes order of list permanently | sorted() - returns a copy of the list which leaves the original copy unchanged | range() - use to work with number efficiently | min() - find the least value in list | max() - find the highest value in list | sum() - sum of all in list | . numlist = [50] for i in numlist: i -= 1 numlist.append(i) # using append to add to the end of a list if i == 0: break print(numlist) . [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . i = 3 print(i) while i &lt;= 68: i += 13 print(i) . 3 16 29 42 55 68 81 . Find the lowest value in a list . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min = 20 for n in nums: if int(n) &lt; int(min): min = n print(min) . 10 . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows an element at index i to be deleted from a list? remove() Correct! What allows a value to be added at the end of a list? append() Correct! What returns the number of elements currently in a specific list? length() Correct! What allows a value to be inserted into a list at index i? index() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! . monthly_earnings = [] a = 0 while a == 0: money = input(&quot;How much money did you make this month?&quot;) if money == &quot;&quot;: break monthly_earnings.append(int(money)) # uses append() sort = input(&quot;Do you want to sort your earnings?&quot;) if sort == &quot;yes&quot;: print(&quot;sorted:&quot;) print(sorted(monthly_earnings)) # uses sorted() which returns a copy of list else: print(&quot;unsorted:&quot;) print(monthly_earnings) print(&quot;Your highest monthly earning is $&quot; + str(max(monthly_earnings))) #uses max() print(&quot;You have been working for &quot; + str(len(monthly_earnings)) + &quot; months&quot;) . sorted: [2, 42, 3256, 5000] Your highest monthly earning is $5000 You have been working for 4 months . 3.9 and 3.11 Student Lesson (group 5) . 3 components to an algorithm: . selection | sequence | iteration | . Algorithms can be written is different ways but work the same way! | Why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? This knowledge is important since it will cause people to look at and compare code more carefully. We can catch mistakes, make code more efficient, and overall learn from others. Mistakes are learning too! | . | . # code #1 print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? Wow! Good job! . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . What Grade Did You Get? Wow! Good job! . Nested Conditionals . isalexatired = True havehw = True if isalexatired == True and havehw == False: print(&quot;Stay home and sleep!&quot;) else: if havehw == True: print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep!&quot;) # Boolean conversion gotoschool = not(isalexatired) or isalexatired and havehw if gotoschool == True: print(&quot;Go do you work at school!&quot;) if gotoschool == False: print(&quot;Stay home and sleep queen&quot;) . Go to school Go do you work at school! . Developing Algorithms . good to outline process before coding | make sure everything is sequenced correctly! (goes through in intended order) | should make a flow chart or use natural language | . Natural Language for Netflix Code . Input what show user is looking for | check if show is in showdictionary | If it is in dictionary, move onto step 4. If not, print &quot;show is not available on Netflix&quot; | check if the show has a rating of 3 or higher | If it does, print &quot;show is recommended&quot;; if it doesn&#39;t print &quot;how is not recommended&quot; | showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is recommended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is recommended . Pre-Existing Algorithms . can be helpful to use pre-exsiting functions | common and simple ones include: determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | . import random #sets variables for the game num_guesses = 0 user_guess = -1 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(0,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 0 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): guessednum = input(&quot;Choose a number!&quot;) return guessednum #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;You guessed too low&quot;) lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;You guessed too high&quot;) upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 0 and 100. You guessed 78. You guessed too high Guess a number between 0 and 78. You guessed 34. You guessed too low Guess a number between 34 and 78. You guessed 45. You guessed too high Guess a number between 34 and 45. You guessed 56. You guessed too high Guess a number between 34 and 56. You guessed 38. You guessed too low Guess a number between 38 and 56. You guessed 42. You guessed too low Guess a number between 42 and 56. You guessed 43. You guessed the number in 7 guesses! . Binary Search . what is it?: repeatedly dividing a search interval in half | . put the numbers in order ascending | descending | . | find the middle number first . this is found by taking the highest index number plus the lowest index number and divide by 2 | . | the numbers on the right will be greater and the numbers on the left will be smaller . this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . index = [12, 14, 43, 57, 79, 80, 99] index.sort() mid = int(len(index) / 2) print(mid) print(&quot;middle is&quot;,index[mid]) . 3 middle is 57 . Unit 3 Vocabulary . variables: &quot;containers&quot; or used to store information to be referenced and manipulated in a computer program | data types: a classification that specifies which type of value a variable has and what type of mathematical, relational or logical operations can be applied to it | assignment operators: the operator used to assign a new value to a variable | lists: an abstract data type that represents a finite number of ordered values | dictionaries: an abstract data type that defines an unordered collection of data as a set of key-value pairs | class: a template definition of a method and variable in a particular kind of object | algorithm: a procedure used for solving a problem or performing a computation | sequence: the order of how to do something to achieve a result | selection: allows an algorithm to make a decision based on if a condition is met | iteration: iteration: a loop and doing something again until a condition is met | expressions: a concept in which a number of variables or constants, and operators and functions, are put together in a single statement that is acted on by a particular programming language | comparison operators: compare the values within an expression, such as to check if the value held by a variable matches the value held by another variable | boolean expression: a logical statement that is either TRUE or FALSE | truth tables: a breakdown of all the possible truth values returned by a logical expression (usually 1/0, true/false) | characters: a display unit of information equivalent to one alphabetic letter or symbol | strings: an array data structure of bytes (or words) that stores a sequence of elements | length: length() function returns the number of items in an object | concatenation: the operation of joining two strings together | python if: a conditional statement tha decides if a certian condition is true/decides whether certain statements need to be executed or not | python elif: elif = else if and checks for multiple expressions (if the condition for if is False, it checks the condition of the next elif block) | python else conditionals: else catches anything which isn&#39;t caught by the previous conditions (like and if statement) | nested selection statements: when more than one decision must be made before carrying out a task | Python for loop: a control flow statement that is used to repeatedly execute a group of statements as long as the condition is satisfied | Python while loop with range and with list: sets aside a block of code that is to be executed repeatedly until a condition is falsified | Combining loops with conditionals to Break, Continue: | Procedural Abstraction: when we create code sections which are generalised by having variable parameters (more simple) | Python Def procedures: | paramerters: a special kind of variable used in a function to refer to one of the pieces of data provided as input to the function | return values: a value that a function returns to the calling function when it completes its task | . Below are examples of some of the vocabulary: . variables, data types, assignment operators, dictionaries, algorithm, sequence, selection, expressions, comparision operators, boolena expressions, strings, python if, else, for loop, list, iteration, procedural abstraction, combining loops with conditional to break | . # to test if a show is included in Netflix, and if it is recommended &lt; this is anm example of an algorithm showdictionary = { #this is a dictionary &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } # this is an example of sequencing (order matters) and selection (of and else statements) show = input(&quot;What show are you looking for?&quot;) # this is an example of a variable, the &quot;=&quot; is the assignment operator # this variable has the data type of a string if show in showdictionary.keys(): # this is an if statement in python print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: # this is a nested selection statement print(&quot;show/movie is recommended&quot;) else: # this is an example of an else statement in python, it will only apply if the previous if condition isn&#39;t met print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . isalexatired = True #these are variables with the assignment operator &quot;=&quot; havehw = True if isalexatired == True and havehw == False: # these are Booleans and comparison operators print(&quot;Stay home and sleep!&quot;) else: if havehw == True: # more examples of nested conditionals print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep!&quot;) . input_string = input(&quot;Input a string to check how many vowels it has. &quot;) # another variable with the data type of string vowelcount = 0 # assigning a number data type to a variable for character in input_string: #iterates through the string character by character if character == &quot;a&quot;: vowelcount += 1 elif character == &quot;e&quot;: # an example of an elif statement vowelcount += 1 elif character == &quot;i&quot;: vowelcount += 1 elif character == &quot;o&quot;: vowelcount += 1 elif character == &quot;u&quot;: vowelcount += 1 print(vowelcount) . numlist = [50] for i in numlist: i -= 1 numlist.append(i) # .append is an example of procedural abstraction if i == 0: break # conditional to break the loop print(numlist) . [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/studentlessons/weektwo",
            "relUrl": "/studentlessons/weektwo",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "3.8-3.10 Student Lesson (group 4)",
            "content": "Hacks Unit 3 Section 3.8.1 . Define an Iteration | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | Iteration: loop that continues repeating until condition is met | Example of iteration with stopping condition: I am doing an easter egg hunt and trying to frind the golden egg. I have split the searching area into sections | . I walk to a section | I look aroung to try and find the golden egg | If it is not there, I add one to the section number (move onto next section) | I repeat steps 1 through 4 | Once I find the egg, I stop searching to go brag to the kids | | . hourshomework = 0 while hourshomework &lt; 8: print(&quot;Too easy&quot;) hourshomework += 1 if hourshomework == 6: break . Too easy Too easy Too easy Too easy Too easy Too easy . Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | Iteration statement: a condition that must be met in a loop or it will continue repeating | . numlist = [50] for i in numlist: i -= 1 numlist.append(i) if i == 0: break print(numlist) . [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . i = 3 print(i) while i &lt;= 68: i += 13 print(i) . 3 16 29 42 55 68 81 . Find the lowest value in a list . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min = 20 for n in nums: if int(n) &lt; int(min): min = n print(min) . 10 . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be added at the end of a list? append() Correct! What allows a value to be inserted into a list at index i? index() Correct! What allows an element at index i to be deleted from a list? remove() Correct! What returns the number of elements currently in a specific list? length() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! . monthly_earnings = [] a = 0 while a == 0: money = input(&quot;How much money did you make this month?&quot;) if money == &quot;&quot;: break monthly_earnings.append(int(money)) sort = input(&quot;Do you want to sort your earnings?&quot;) if sort == &quot;yes&quot;: print(&quot;sorted:&quot;) print(sorted(monthly_earnings)) else: print(&quot;unsorted:&quot;) print(monthly_earnings) print(&quot;Your highest monthly earning is $&quot; + str(max(monthly_earnings))) print(&quot;You have been working for &quot; + str(len(monthly_earnings)) + &quot; months&quot;) . sorted: [2, 36, 345, 578, 9000] Your highest monthly earning is $9000 You have been working for 5 months .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupfour",
            "relUrl": "/students/groupfour",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Lesson 3.12 & 3.13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): # math(any number) would call the the procedure op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: c Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: d Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: b Correct :) Score: 3 / 3 . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) return result cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: 0b11011 Cube: 0b1000000 . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 ########DO THIS FOR EC############# . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Monday, December 12 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2015/2022/12/04/group6lesson.html",
            "relUrl": "/week%2015/2022/12/04/group6lesson.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "3.5-3.7 Student Lesson (group 3)",
            "content": "Hack 1: 3.5 . [x] Explain in your own words what each logical operator does [x] Code your own scenario that makes sense for each logical operator . Hack 1 . NOT: The NOT logical operator returns the opposite condtion of the data | AND: The AND logical operator determines if 2 conditions are met | OR: The OR logical operator determines if 1 of the conditions are met | . ispassing = False isstudentpassing = not(ispassing) print(isstudentpassing) . True . temp = input(&quot;what is the temperature today?&quot;) if int(temp) &gt;= 40 and int(temp) &lt;= 70: print(&quot;Bring a hoodie!&quot;) if int(temp) &lt; 40: print(&quot;bring snow gear!&quot;) if int(temp) &gt; 70: print(&quot;No jacket today!&quot;) . Bring a hoodie! . APscore = 4 Finalscore = 68 if APscore &gt;= 3 or Finalscore &gt;= 75: print(&quot;student passed this class&quot;) else: print(&quot;student did not pass this class&quot;) . student passed this class . Hack 2: 3.6 . [x] Level I: Vowel Count Return the number (count) of vowels in the given string. We will consider a, e, i, o, u as vowels for this challenge (but not y). The input string will only consist of lower case letters and/or spaces. . Hint: If you use a lot of if-statements and there are more than one outcome, that is to be expected. If not, don&#39;t panic, just keep trying. . [x] Level III: Mutliples of 3 or 5 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. . Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Additionally, if the number is negative, return 0 (for languages that do have them). . Note: If the number is a multiple of both 3 and 5, only count it once. . Hint: What do you know about for loops? Since your code incorporates a list of numbers from 1 to the max number, can you use for loops along with conditionals? . [x] binary conditional logic [x] define key terms . Defining Key Terms: . Boolean: a boolean is an operator that determines if a condition is true or false | Selection: When an algorithm must make a decision (if a condition is met) | AND: AND is a logical operator that determines of 2 conditions are both met | OR: OR is a logical operator that determines if 1 of 2 conditions is met | NOT: NOT is a logical operator that displays the oposition condition of the data | . gpa = 4.0 extracirriculars = &quot;present&quot; if gpa &gt;= 4.0 and extracirriculars == &quot;present&quot;: major = input(&quot;What is your major&quot;) if major == &quot;math&quot; or major == &quot;science&quot;: print(&quot;You have been accepted into our STEM program!&quot;) elif major == &quot;english&quot; or major == &quot;history&quot;: print(&quot;You have been accepted into our arts program!&quot;) else: print(&quot;You have been accepted into our &quot; + major + &quot; program!&quot;) else: print(&quot;I&#39;m sorry, you are not accepted to this program&quot;) . You have been accepted into our STEM program! . input_string = input(&quot;Input a string to check how many vowels it has. &quot;) vowelcount = 0 for character in input_string: #iterates through the string character by character if character == &quot;a&quot;: vowelcount += 1 elif character == &quot;e&quot;: vowelcount += 1 elif character == &quot;i&quot;: vowelcount += 1 elif character == &quot;o&quot;: vowelcount += 1 elif character == &quot;u&quot;: vowelcount += 1 print(vowelcount) . 7 . numberstring = input(&quot;Input a number to find the sum of all the multiples of 3 or 5 below it. &quot;) numbertocheck = int(numberstring) totalmultiples = 0 if numbertocheck &gt;= 0: # if the number is negative it will display the sum as 0 for n in range(numbertocheck+1): if n/3 == int(n/3): #checks for multiples of 3 print(str(n) + &quot; is a multiple of 3&quot;) totalmultiples += n #elif prevents duplicates of numbers with both multiples of 3 and 5 elif n/5 == int(n/5): # checks for multiples of 5 print(str(n) + &quot; is a multiple of 5&quot;) totalmultiples += n print(totalmultiples) . 0 is a multiple of 3 3 is a multiple of 3 5 is a multiple of 5 6 is a multiple of 3 9 is a multiple of 3 10 is a multiple of 5 12 is a multiple of 3 15 is a multiple of 3 18 is a multiple of 3 20 is a multiple of 5 21 is a multiple of 3 24 is a multiple of 3 143 . Hack 3 . [x] For the first hack, pretend you are a school&#39;s test grader. Create an array with integers, each integer representing one score from a student&#39;s taken tests. If the average of the student&#39;s test scores are at least 75 percent, then display that the student is elligible for credit, and if not, display that the student must retake the tests over break. [x] The second hack is more number-oriented. Create an algorithm that calculates the sum of two numbers, then determines whether the sum is greater than or less than 100. [x] The hacks above was heavily derived from CollegeBoard. As a computer science student, you should be able to create an algorithm utilizing conditionals. Try something number-oriented if you get stuck. Creativity gets points. . def average(lst): return sum(lst)/len(lst) gradelist = [92, 83, 90, 74, 86, 97] averagegrade = average(gradelist) print(str(averagegrade) + &quot; is the student&#39;s grade average&quot;) if averagegrade &gt;= 75: print(&quot;student is eligible for credit&quot;) else: print(&quot;student needs to retake tests during break&quot;) . 87.0 is the student&#39;s grade average student is eligible for credit . num1 = input(&quot;What is your first number?&quot;) num2 = input(&quot;What is your second number?&quot;) sumofnumbers = int(num1) + int(num2) if sumofnumbers &gt;= 100: print(str(sumofnumbers) + &quot; is greater than or equal to 100&quot;) else: print(str(sumofnumbers) + &quot; is less than than 100&quot;) . 202 is greater than or equal to 100 . # to test if a show is included in Netflix, and if it is recommended showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is recommended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is recommended . Hack 4 . [x] Create 3 differnt flow charts representing nested statements and transfer them into code. [] Create a piece of code that displays four statements instead of three. Try to do more if you can. [x] Make piece of code that gives three different recommandations for possible classes to take at a school based on two different condtions. These conditions could be if the student likes STEM or not. . STEM = input(&quot;Are you intrested in STEM? Y or N&quot;) if STEM == &quot;Y&quot;: subject = input(&quot;Do you like math or science better?&quot;) if subject == &quot;math&quot;: print(&quot;Class recommendations: Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics&quot;) if subject == &quot;science&quot;: print(&quot;Class recommendations: Chemistry, Physics, AP Enviornmental Science, AP Physics, AP Chemistry&quot;) else: language = input(&quot;Are you intrested in language? Y or N&quot;) if language == &quot;Y&quot;: lansubject = input(&quot;Do you prefer a foreign language or English?&quot;) if lansubject == &quot;foreign language&quot;: print(&quot;Class recommendations: Spanish, Mandarin, AP Spanish, AP Mandarin&quot;) if lansubject == &quot;English&quot;: print(&quot;Class recommendations: American Literature, AP English Literature&quot;) if language == &quot;N&quot;: print(&quot;See class list for more options!&quot;) . Class recommendations: Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics . Flowchart #1: Is it cold? . &lt;!-- &lt;img src=&quot;_images/ColdFlowChart.png&quot; alt=&quot;flowchart1&quot;&gt; . temp = input(&quot;what is the temperature today?&quot;) if int(temp) &lt;= 73: print(&quot;It is cold!&quot;) if int(temp) &lt;= 40: print(&quot;Bring a snow jacket!&quot;) else: print(&quot;Bring a hoodie!&quot;) else: print(&quot;It&#39;s warm today! Don&#39;t bring a jacket :)&quot;) . It is cold! Bring a hoodie! . Flowchart #2: Is the class difficult? . &lt;!-- &lt;img src=&quot;_images/Istheclassdifficult.png&quot; alt=&quot;flowchart2&quot;&gt; . passingrate = 72 testaverage = 82 if passingrate &gt; 70 and passingrate &lt;= 100: if testaverage &gt;= 80: print(&quot;This class is not difficult&quot;) else: print(&quot;this class is difficult&quot;) else: print(&quot;this class is difficult&quot;) . This class is not difficult . Flowchart #3: Should Alexa work at school during first period off roll? . &lt;!-- &lt;img src=&quot;_images/Offrollflowchart.png&quot; alt=&quot;flowchart3&quot;&gt; --&gt; . feeling = input(&quot;Are you tired today?&quot;) if feeling == &quot;yes&quot;: print(&quot;Stay home and sleep&quot;) if feeling == &quot;no&quot;: homework = input(&quot;Do you have homework to do?&quot;) if homework == &quot;yes&quot;: print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep&quot;) . Go to school . drinkable = &quot;potable&quot; temperature = &quot;warm&quot; if drinkable == &quot;potable&quot;: print(&quot;water is potable&quot;) if temperature == &quot;cold&quot;: print(&quot;water is &quot; + str(temperature)) print(&quot;water is in ideal condition&quot;) print(&quot;drink up!&quot;) else: print(&quot;water is &quot; + str(temperature)) print(&quot;water is not in ideal condition&quot;) print(&quot;chill with ice&quot;) else: print(&quot;do not drink, water is not potable&quot;) . water is potable water is warm water is not in ideal condition chill with ice . Kahoot quiz: The Kahoot is not playble .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupthree",
            "relUrl": "/students/groupthree",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 3.9 & 3.11",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . selection | sequence | iteration | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? Wow! Good job! . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . What Grade Did You Get? Wow! Good job! . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . go to school! . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . go to school! . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . isalexatired = True havehw = True if isalexatired == True and havehw == False: print(&quot;Stay home and sleep!&quot;) else: if havehw == True: print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep!&quot;) gotoschool = not(isalexatired) or isalexatired and havehw if gotoschool == True: print(&quot;Go do you work at school!&quot;) if gotoschool == False: print(&quot;Stay home and sleep queen&quot;) . Go to school Go do you work at school! . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . 5 4 3 2 1 0 All done! . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . The parking rate is as follows: Less than one hour: Free 1-2 hours: $5 2-3 hours: $8 3-4 hours: $10 4+ hours: $12 How many hours have you parked at this garage? 3.0 hours costs: $10 Have a good day! . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): guess = input(&quot;What is your guess? (between 1 and 100)&quot;) return guess #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; number: print(&quot;you guessed too low&quot;) #change this lower_bound = guess elif int(guess) &gt; number: print(&quot;you guessed too high&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 88. you guessed too high Guess a number between 0 and 88. You guessed 33. you guessed too high Guess a number between 0 and 33. You guessed 22. you guessed too high Guess a number between 0 and 22. You guessed 12. Guess a number between 0 and 22. You guessed 14. you guessed too high Guess a number between 0 and 14. You guessed 8. you guessed too low Guess a number between 8 and 14. You guessed 10. you guessed too low Guess a number between 10 and 14. You guessed 11. you guessed too low Guess a number between 11 and 14. You guessed 12. Guess a number between 11 and 14. You guessed 12. Guess a number between 11 and 14. You guessed . . ValueError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb Cell 22 in &lt;cell line: 34&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=35&#39;&gt;36&lt;/a&gt; num_guesses += 1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=36&#39;&gt;37&lt;/a&gt; print(f&#34;You guessed {user_guess}.&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; lower_bound, upper_bound = search(number, user_guess) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; print(f&#34;Guess a number between {lower_bound} and {upper_bound}.&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=39&#39;&gt;40&lt;/a&gt; if user_guess == number: /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb Cell 22 in search(number, guess) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; def search(number, guess): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; global lower_bound, upper_bound &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; if int(guess) &lt; number: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=24&#39;&gt;25&lt;/a&gt; print(&#34;you guessed too low&#34;) #change this &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; lower_bound = guess ValueError: invalid literal for int() with base 10: &#39;&#39; . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first . this is found by taking the highest index number plus the lowest index number and divide by 2 . | the numbers on the right will be greater and the numbers on the left will be smaller . | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers . lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89: 19 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22: 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2015/2022/12/02/group5lesson.html",
            "relUrl": "/week%2015/2022/12/02/group5lesson.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "LESSON PLAN",
            "content": "Lesson 3.5 Finn/Jake . What is a Boolean . The defention of a Boolean is a denoting a system of algebraic notation used to represent logical propositions, especially in computing and electronics. | A boolean expresions are either true or false. | Testing if two numbers or variables are equal is a common example. | For example: The sky is blue = True | What do we use to represent them? (Hint think of how domain/range of graph is answered) &lt;- variables | How is binary related to this? &lt;- 0=false and 1=true | How could this be used when asked a question? | . Examples (Not part of homework) . Type the code down below for these two example . Try to make a statement that determines if a variable &quot;score&quot; is equal to the number 3 | Try to make this score variable have an output if it equals 3 | . # The code for ex:1 score = 3 i = score if i == 3: print(&quot;True&quot;) else: print(&quot;False&quot;) # The code for ex:2 . True . Relational Operators . The mathmatical relationship between two variables | Determines an output on whether or not the statement is true | a=b, a&gt;b, etc. | . Examples (Not part of homework) . Type the code down below for these two example . You have to be the age of 16 or older to drive | Each rollercoaster cart holds 4 for people per cart | . # Put the code for ex:1 i = &quot;age&quot; if i &gt;= str(16): print(&quot;can drive&quot;) else: print(&quot;cannot drive&quot;) # Put the code for ex:2 i = &quot;number of people&quot; numcarts = i/4 cannotride = 16 % i . Logical Operators . NOT . NOT, it displays the opposite of whatever the data is. Mainly used for true/false, and does not effect the variable. | . isRaining = False result = not(isRaining) print(result) . True . AND . AND, used to evaulte two conditions together and determine if both condintions are met | . grade = 95 if grade &gt; 70 and grade &lt;= 100: print(&quot;You passed the quiz&quot;) . You passed the quiz . OR . OR, when using or the function only looks to see if one of the conditions is met then will | . lives = 1 score = 21 if lives &lt;= 0 or score &gt; 20: print(&quot;end game&quot;) . end game . Hacks . Explain in your own words what each logical operator does | Code your own scenario that makes sense for each logical operator | . Lesson 3.6 Paaras/Shruthi . Learning Objectives (Some Things You Might Want to Keep Note Of) . Conditionals allow for the expression of algorithms that utilize selection without a programming language. | Writing conditional statements is key to computer science. | Determine the result of conditional statements | . Key Terms . Selection: The specific block of code that will execute depending on the algorithm condition returning true or false. | Algorithm: &quot;A finite set of instructions that accomplish a specific task.&quot; | Conditional Statement / If-Statement: A statement that affects the sequence of control by executing certain statements depending on the value of a boolean. | . function isEven(parameter) { if (parameter % 2 == 0) { console.log(&quot;The number is even.&quot;); } else if (parameter % 2 != 0) { console.log(&quot;The number is odd.&quot;) } } isEven(4) . A computer science student such as yourself will see conditional statements in JavaScript a lot. Below is an example of one in action: . if (30 == 7) { console.log(&quot;The condition is true&quot;) } . That is one conditional statement, but this algorithm is too simple to have anything done with it. Below is an algorithm building on the previous algorithm: . if (30 == 7) { console.log(&quot;The condition is true&quot;) } else if (30 != 7) { console.log(&quot;The condition is false&quot;) } . Input In [6] if (30 == 7) { ^ SyntaxError: invalid syntax . Conditional statements can be used for many a purpose. The algorithm above was quite simple, but conditionals can be found in more complex algorithms. . Essential Knowledge . Conditional statements (&quot;if&quot; statements) affect the sequential flow of control by executing different statements based on the value of a Boolean expression. The exam reference sheet provides: . In which the code in block of statements is executed if the Boolean expression condition evaluates to true; no action is taken if condition evaluates to false . # also needs to iterate through to check every character (what if there are multiple of each vowel?) word=input(&quot;Input a word to check how many vowels it has. &quot;) i == 0 #number of vowels if word.__contains__(&quot;a&quot;): i =+ 1 if word.__contains__(&quot;e&quot;): i =+ 1 if word.__contains__(&quot;i&quot;): i =+ 1 if word.__contains__(&quot;o&quot;): i =+ 1 if word.__contains__(&quot;u&quot;): i =+ 1 if i == 0: print(&quot;this word has no vowels&quot;) else: print(i) . NameError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 24 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # my first attempt at the Level 1 Challenge &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; word=input(&#34;Input a word to check how many vowels it has. &#34;) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; i == 0 #number of vowels &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; if word.__contains__(&#34;a&#34;): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; i =+ 1 NameError: name &#39;i&#39; is not defined . input_string = input(&quot;Input a string to check how many vowels it has. &quot;) vowelcount = 0 for character in input_string: #iterates through the string character by character if character == &quot;a&quot;: vowelcount += 1 elif character == &quot;e&quot;: vowelcount += 1 elif character == &quot;i&quot;: vowelcount += 1 elif character == &quot;o&quot;: vowelcount += 1 elif character == &quot;u&quot;: vowelcount += 1 print(vowelcount) . 4 . numberstring = input(&quot;Input a number to find the sum of all the multiples of 3 or 5 below it. &quot;) numbertocheck = int(numberstring) totalmultiples = 0 if numbertocheck &gt;= 0: # if the number is negative it will display the sum as 0 for n in range(numbertocheck+1): if n/3 == int(n/3): #checks for multiples of 3 print(str(n) + &quot; is a multiple of 3&quot;) totalmultiples += n #elif prevents duplicates of numbers with both multiples of 3 and 5 elif n/5 == int(n/5): # checks for multiples of 5 print(str(n) + &quot; is a multiple of 5&quot;) totalmultiples += n print(totalmultiples) . 0 is a multiple of 3 3 is a multiple of 3 5 is a multiple of 5 6 is a multiple of 3 9 is a multiple of 3 10 is a multiple of 5 12 is a multiple of 3 15 is a multiple of 3 60 . def average(lst): return sum(lst)/len(lst) gradelist = [92, 83, 90, 74, 86, 97] averagegrade = average(gradelist) print(str(averagegrade) + &quot; is the student&#39;s grade average&quot;) if averagegrade &gt;= 75: print(&quot;student is eligible for credit&quot;) else: print(&quot;student needs to retake tests during break&quot;) . 87.0 is the student&#39;s grade average student is eligible for credit . num1 = input(&quot;What is your first number?&quot;) num2 = input(&quot;What is your second number?&quot;) sumofnumbers = int(num1) + int(num2) if sumofnumbers &gt;= 100: print(str(sumofnumbers) + &quot; is greater than or equal to 100&quot;) else: print(str(sumofnumbers) + &quot; is less than than 100&quot;) . 202 is greater than or equal to 100 . # to test if a show is included in Netflix, and if it is recommended showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is reccomended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is reccomended . STEM = input(&quot;Are you intrested in STEM? Y or N&quot;) if STEM == &quot;Y&quot;: subject = input(&quot;Do you like math or science better?&quot;) if subject == &quot;math&quot;: print(&quot;Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics&quot;) if subject == &quot;science&quot;: print(&quot;Class recommendations: Chemistry, Physics, AP Enviornmental Science, AP Physics, AP Chemistry&quot;) else: language = input(&quot;Are you intrested in language? Y or N&quot;) if language == &quot;Y&quot;: lansubject = input(&quot;Do you prefer a foreign language or English?&quot;) if lansubject == &quot;foreign language&quot;: print(&quot;Class recommendations: Spanish, Mandarin, AP Spanish, AP Mandarin&quot;) if lansubject == &quot;English&quot;: print(&quot;Class recommendations: American Literature, AP English Literature&quot;) if language == &quot;N&quot;: print(&quot;See class list for more options!&quot;) . Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics . Hacks . For the first hack, pretend you are a school&#39;s test grader. Create an array with integers, each integer representing one score from a student&#39;s taken tests. If the average of the student&#39;s test scores are at least 75 percent, then display that the student is elligible for credit, and if not, display that the student must retake the tests over break. | The second hack is more number-oriented. Create an algorithm that calculates the sum of two numbers, then determines whether the sum is greater than or less than 100. | The hacks above was heavily derived from CollegeBoard. As a computer science student, you should be able to create an algorithm utilizing conditionals. Try something number-oriented if you get stuck. Creativity gets points. | . Lesson 3.7 James . Nested Conditionals . Nested conditional statements consist of conditional statements within conditional statements | they&#39;re nested one inside the other | An else if inside of another else if | Can be used for a varying amount of &quot;else if statements.&quot; The first if statement can represent if two coditions are true. The first else if can represent if only one or the other is true. The last else if represents if neither of the conditions are true. | . Take aways . Learn how to determine the result of nested condtional statements | Nested conditional statements consist of conditional statements within conditional statements | One condition leads to check in a second condition | . Writing Nested Conditional Statements . Can be planned and writen out first | Flow chart is a possibility. Ask a question. If the statement is false end the flowchart with one result. If it is true then repeat the process once more. | If (condition 1) | { first block of statements | . | } | else | { IF (condition 2) | { second block of statements | . | } | . | } | . this statement is false make a new result. Finally if the statement is true make a final result . Question 1 . Look at the following code . what happens when x is 5 and y becomes 4? Is the output same or change? | . x = 2 y = 3 if x == y: print(&quot;x and y are equal&quot;) else: if x &gt; y: print(&quot;x is bigger than y&quot;) elif x &lt; y: print(&quot;x is smaller than y&quot;) . Question 2 . How much it will be cost when the height will be 60, age is 17, and photo taken? | when this person came after 1 year how much it will be cost? | . height = int(input(&quot;Welcom to the rollercoaster! nWhat is your height in Inch? &quot;)) age = int(input(&quot;What is your age?&quot;)) if height &lt; 48 : print(&quot;Can&#39;t ride&quot;) elif age &lt; 12 : photo = input(&quot;Adult tickets are $5 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $8.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $5.&quot;) elif age &lt; 18: photo = input(&quot;Adult tickets are $7 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $10.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $7.&quot;) else : photo = input(&quot;Adult tickets are $12 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $15.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $12.&quot;) . The total bill is $10. . Let&#39;s look at Examples . import random global i game = [&quot;rock&quot;, &quot;scissor&quot;, &quot;paper&quot;] winning = [&quot;paper&quot;, &quot;rock&quot;, &quot;scissor&quot;] i = 0 def gameStart(): randomNumber = random.randrange(0,2) randomOne = game[randomNumber] gamer = str(input(&quot;what will you do&quot;)) print(gamer) print(randomOne) while True: if winning[i] == gamer: break else: i += 1 if randomNumber == i: print(&quot;You win&quot;) else: if randomNumber == (i+1)%3: print(&quot;Lose&quot;) elif randomNumber == (i+2)%3: print(&quot;Draw&quot;) pre = input(&quot;Do you want a game?[yes/no]&quot;) if pre == &quot;yes&quot;: gameStart() randomNumber = random.randrange(0,2) else: print(&quot;Goodbye&quot;) gameStart() . rock scissor . UnboundLocalError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 33 in &lt;cell line: 30&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; print(&#34;Goodbye&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; gameStart() /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 33 in gameStart() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; print(randomOne) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; while True: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; if winning[i] == gamer: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; break &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; else: UnboundLocalError: local variable &#39;i&#39; referenced before assignment . . Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . | | | | | | | | . | | | | | | | | . | | | | | | | | . Hacks . Create 3 differnt flow charts representing nested statements and transfer them into code. | Create a piece of code that displays four statements instead of three. Try to do more if you can. | Make piece of code that gives three different recommandations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. | . Kahoot quiz . kahoot . After finishing this quiz, please take a screenshot of how much you got correct | . Rubric for hacks: . Each section is worth .33 and you will get + 0.01 if all are completed to have full points. | . How to get a .33 . All hacks are done for the section, fully completed. | . How to get a .30 . Not all hacks are done in the section | . Below a .30 . Sections are missing/incomplete | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/lesson/group3",
            "relUrl": "/lesson/group3",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Simulations- Unit 3 Section 16 Lesson",
            "content": "3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . leads into real life game example: . . . A Real Life Example: Four Corners - Lydia &amp; Ava . an example of a simulation and experiment = the game of 4 corners | games are simulations! | We are going to play a round of 4 corners here in class. This game is a real life version of our simulation. | Mr. Mortensen will be the person in the middle choosing corners. | Everyone will choose a corner, and if your corner is chosen, you are out! | . | . The rules of the game: . a person stands in the center of a room and the 4 coners are labeled 1-4 | Every player chooses a corner while the person in the middle closes their eyes | person in the middle chooses/calls out a number when instructed | every player in the chosen corner is now out | contine until there is a winner! | Let&#39;s play! . Below is the simulation of the four corners game! . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . You chose corner number 2 and are still in! You chose corner number 3 and are still in! You chose corner number 4 and you&#39;re OUT . Comparing Experiment to Simulation Code: . Mr. Mortensen (person in the middle) = random.randint | if statement = if player is out | else = safe/continue | while loop = repeats process until there is a winner of the game | . DEBRIEF QUESTIONS: . Why is it better to code simulations than experiement in real life? | What makes this game a simulation? | What are its advantages and disadvantages? | Would an experiment be better in this situation? (raise hands for each team) | . . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (collegeboard based questions) . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . . . Rolling a Dice Example - Sri . Below is a simulation of rolling dice! Examine the code and think about how this simulation works and its purpose! . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 1, 2] . . . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . . Remix of Game of Life . start step . . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . . . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "LESSON PLAN",
            "content": "Lesson 3.5 Finn/Jake . What is a Boolean . The defention of a Boolean is a denoting a system of algebraic notation used to represent logical propositions, especially in computing and electronics. | A boolean expresions are either true or false. | Testing if two numbers or variables are equal is a common example. | For example: The sky is blue = True | What do we use to represent them? (Hint think of how domain/range of graph is answered) &lt;- variables | How is binary related to this? &lt;- 0=false and 1=true | How could this be used when asked a question? | . Examples (Not part of homework) . Type the code down below for these two example . Try to make a statement that determines if a variable &quot;score&quot; is equal to the number 3 | Try to make this score variable have an output if it equals 3 | . # The code for ex:1 i = score if i = 3: print(&quot;True&quot;)_ else: print(False&quot;) # The code for ex:2 . Relational Operators . The mathmatical relationship between two variables | Determines an output on whether or not the statement is true | a=b, a&gt;b, etc. | . Examples (Not part of homework) . Type the code down below for these two example . You have to be the age of 16 or older to drive | Each rollercoaster cart holds 4 for people per cart | . # Put the code for ex:1 i = &quot;age&quot; if i &gt;= 16: print(&quot;can drive&quot;) else: print(&quot;cannot drive&quot;) # Put the code for ex:2 i = &quot;numer of people&quot; numcarts = i/4 cannotride = 16 % i . Logical Operators . NOT . NOT, it displays the opposite of whatever the data is. Mainly used for true/false, and does not effect the variable. | . isRaining = False result = not(isRaining) print(result) . True . AND . AND, used to evaulte two conditions together and determine if both condintions are met | . grade = 95 if grade &gt; 70 and grade &lt;= 100: print(&quot;You passed the quiz&quot;) . You passed the quiz . OR . OR, when using or the function only looks to see if one of the conditions is met then will | . lives = 1 score = 21 if lives &lt;= 0 or score &gt; 20: print(&quot;end game&quot;) . end game . Hacks . Explain in your own words what each logical operator does | Code your own scenario that makes sense for each logical operator | . Lesson 3.6 Paaras/Shruthi . Learning Objectives (Some Things You Might Want to Keep Note Of) . Conditionals allow for the expression of algorithms that utilize selection without a programming language. | Writing conditional statements is key to computer science. | Determine the result of conditional statements | . Key Terms . Selection: The specific block of code that will execute depending on the algorithm condition returning true or false. | Algorithm: &quot;A finite set of instructions that accomplish a specific task.&quot; | Conditional Statement / If-Statement: A statement that affects the sequence of control by executing certain statements depending on the value of a boolean. | . function isEven(parameter) { if (parameter % 2 == 0) { console.log(&quot;The number is even.&quot;); } else if (parameter % 2 != 0) { console.log(&quot;The number is odd.&quot;) } } isEven(4) . Input In [5] function isEven(parameter) { ^ SyntaxError: invalid syntax . A computer science student such as yourself will see conditional statements in JavaScript a lot. Below is an example of one in action: . if (30 == 7) { console.log(&quot;The condition is true&quot;) } . That is one conditional statement, but this algorithm is too simple to have anything done with it. Below is an algorithm building on the previous algorithm: . if (30 == 7) { console.log(&quot;The condition is true&quot;) } else if (30 != 7) { console.log(&quot;The condition is false&quot;) } . Input In [6] if (30 == 7) { ^ SyntaxError: invalid syntax . Conditional statements can be used for many a purpose. The algorithm above was quite simple, but conditionals can be found in more complex algorithms. . Essential Knowledge . Conditional statements (&quot;if&quot; statements) affect the sequential flow of control by executing different statements based on the value of a Boolean expression. The exam reference sheet provides: . In which the code in block of statements is executed if the Boolean expression condition evaluates to true; no action is taken if condition evaluates to false . # also needs to iterate through to check every character (what if there are multiple of each vowel?) word=input(&quot;Input a word to check how many vowels it has. &quot;) i == 0 #number of vowels if word.__contains__(&quot;a&quot;): i =+ 1 if word.__contains__(&quot;e&quot;): i =+ 1 if word.__contains__(&quot;i&quot;): i =+ 1 if word.__contains__(&quot;o&quot;): i =+ 1 if word.__contains__(&quot;u&quot;): i =+ 1 if i == 0: print(&quot;this word has no vowels&quot;) else: print(i) . NameError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 24 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # my first attempt at the Level 1 Challenge &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; word=input(&#34;Input a word to check how many vowels it has. &#34;) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; i == 0 #number of vowels &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; if word.__contains__(&#34;a&#34;): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; i =+ 1 NameError: name &#39;i&#39; is not defined . input_string = input(&quot;Input a string to check how many vowels it has. &quot;) vowelcount = 0 for character in input_string: #iterates through the string character by character if character == &quot;a&quot;: vowelcount += 1 elif character == &quot;e&quot;: vowelcount += 1 elif character == &quot;i&quot;: vowelcount += 1 elif character == &quot;o&quot;: vowelcount += 1 elif character == &quot;u&quot;: vowelcount += 1 print(vowelcount) . 4 . numberstring = input(&quot;Input a number to find the sum of all the multiples of 3 or 5 below it. &quot;) numbertocheck = int(numberstring) totalmultiples = 0 if numbertocheck &gt;= 0: # if the number is negative it will display the sum as 0 for n in range(numbertocheck+1): if n/3 == int(n/3): #checks for multiples of 3 print(str(n) + &quot; is a multiple of 3&quot;) totalmultiples += n #elif prevents duplicates of numbers with both multiples of 3 and 5 elif n/5 == int(n/5): # checks for multiples of 5 print(str(n) + &quot; is a multiple of 5&quot;) totalmultiples += n print(totalmultiples) . 0 is a multiple of 3 3 is a multiple of 3 5 is a multiple of 5 6 is a multiple of 3 9 is a multiple of 3 10 is a multiple of 5 12 is a multiple of 3 15 is a multiple of 3 60 . def average(lst): return sum(lst)/len(lst) gradelist = [92, 83, 90, 74, 86, 97] averagegrade = average(gradelist) print(str(averagegrade) + &quot; is the student&#39;s grade average&quot;) if averagegrade &gt;= 75: print(&quot;student is eligible for credit&quot;) else: print(&quot;student needs to retake tests during break&quot;) . 87.0 is the student&#39;s grade average student is eligible for credit . num1 = input(&quot;What is your first number?&quot;) num2 = input(&quot;What is your second number?&quot;) sumofnumbers = int(num1) + int(num2) if sumofnumbers &gt;= 100: print(str(sumofnumbers) + &quot; is greater than or equal to 100&quot;) else: print(str(sumofnumbers) + &quot; is less than than 100&quot;) . 202 is greater than or equal to 100 . # to test if a show is included in Netflix, and if it is recommended showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is reccomended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is reccomended . STEM = input(&quot;Are you intrested in STEM? Y or N&quot;) if STEM == &quot;Y&quot;: subject = input(&quot;Do you like math or science better?&quot;) if subject == &quot;math&quot;: print(&quot;Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics&quot;) if subject == &quot;science&quot;: print(&quot;Class recommendations: Chemistry, Physics, AP Enviornmental Science, AP Physics, AP Chemistry&quot;) else: language = input(&quot;Are you intrested in language? Y or N&quot;) if language == &quot;Y&quot;: lansubject = input(&quot;Do you prefer a foreign language or English?&quot;) if lansubject == &quot;foreign language&quot;: print(&quot;Class recommendations: Spanish, Mandarin, AP Spanish, AP Mandarin&quot;) if lansubject == &quot;English&quot;: print(&quot;Class recommendations: American Literature, AP English Literature&quot;) if language == &quot;N&quot;: print(&quot;See class list for more options!&quot;) . Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics . Hacks . For the first hack, pretend you are a school&#39;s test grader. Create an array with integers, each integer representing one score from a student&#39;s taken tests. If the average of the student&#39;s test scores are at least 75 percent, then display that the student is elligible for credit, and if not, display that the student must retake the tests over break. | The second hack is more number-oriented. Create an algorithm that calculates the sum of two numbers, then determines whether the sum is greater than or less than 100. | The hacks above was heavily derived from CollegeBoard. As a computer science student, you should be able to create an algorithm utilizing conditionals. Try something number-oriented if you get stuck. Creativity gets points. | . Lesson 3.7 James . Nested Conditionals . Nested conditional statements consist of conditional statements within conditional statements | they&#39;re nested one inside the other | An else if inside of another else if | Can be used for a varying amount of &quot;else if statements.&quot; The first if statement can represent if two coditions are true. The first else if can represent if only one or the other is true. The last else if represents if neither of the conditions are true. | . Take aways . Learn how to determine the result of nested condtional statements | Nested conditional statements consist of conditional statements within conditional statements | One condition leads to check in a second condition | . Writing Nested Conditional Statements . Can be planned and writen out first | Flow chart is a possibility. Ask a question. If the statement is false end the flowchart with one result. If it is true then repeat the process once more. | If (condition 1) | { first block of statements | . | } | else | { IF (condition 2) | { second block of statements | . | } | . | } | . this statement is false make a new result. Finally if the statement is true make a final result . Question 1 . Look at the following code . what happens when x is 5 and y becomes 4? Is the output same or change? | . x = 2 y = 3 if x == y: print(&quot;x and y are equal&quot;) else: if x &gt; y: print(&quot;x is bigger than y&quot;) elif x &lt; y: print(&quot;x is smaller than y&quot;) . Question 2 . How much it will be cost when the height will be 60, age is 17, and photo taken? | when this person came after 1 year how much it will be cost? | . height = int(input(&quot;Welcom to the rollercoaster! nWhat is your height in Inch? &quot;)) age = int(input(&quot;What is your age?&quot;)) if height &lt; 48 : print(&quot;Can&#39;t ride&quot;) elif age &lt; 12 : photo = input(&quot;Adult tickets are $5 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $8.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $5.&quot;) elif age &lt; 18: photo = input(&quot;Adult tickets are $7 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $10.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $7.&quot;) else : photo = input(&quot;Adult tickets are $12 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $15.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $12.&quot;) . The total bill is $10. . Let&#39;s look at Examples . import random global i game = [&quot;rock&quot;, &quot;scissor&quot;, &quot;paper&quot;] winning = [&quot;paper&quot;, &quot;rock&quot;, &quot;scissor&quot;] i = 0 def gameStart(): randomNumber = random.randrange(0,2) randomOne = game[randomNumber] gamer = str(input(&quot;what will you do&quot;)) print(gamer) print(randomOne) while True: if winning[i] == gamer: break else: i += 1 if randomNumber == i: print(&quot;You win&quot;) else: if randomNumber == (i+1)%3: print(&quot;Lose&quot;) elif randomNumber == (i+2)%3: print(&quot;Draw&quot;) pre = input(&quot;Do you want a game?[yes/no]&quot;) if pre == &quot;yes&quot;: gameStart() randomNumber = random.randrange(0,2) else: print(&quot;Goodbye&quot;) gameStart() . rock scissor . UnboundLocalError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 33 in &lt;cell line: 30&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; print(&#34;Goodbye&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; gameStart() /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 33 in gameStart() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; print(randomOne) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; while True: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; if winning[i] == gamer: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; break &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; else: UnboundLocalError: local variable &#39;i&#39; referenced before assignment . . Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . | | | | | | | | . | | | | | | | | . | | | | | | | | . Hacks . Create 3 differnt flow charts representing nested statements and transfer them into code. | Create a piece of code that displays four statements instead of three. Try to do more if you can. | Make piece of code that gives three different recommandations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. | . Kahoot quiz . kahoot . After finishing this quiz, please take a screenshot of how much you got correct | . Rubric for hacks: . Each section is worth .33 and you will get + 0.01 if all are completed to have full points. | . How to get a .33 . All hacks are done for the section, fully completed. | . How to get a .30 . Not all hacks are done in the section | . Below a .30 . Sections are missing/incomplete | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/lesson/group3",
            "relUrl": "/lesson/group3",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Week 1 Student Lessons",
            "content": "3.1-3.2 . 3.1.1 Data Types and Variables . variable: abstraction inside a program that holds a value (each variable has associated data storage that represents a single value at a time) | typically have meaningful names that helps with the overall organization/understanding of the code | different programming languages provide a variety of methods to represent data (variables, Booleans, numbers, lists, strings) | one form of a value is better suited for representation than antoher | Data Types integer (numbers) | string (or text/letters) | boolean (True/False statements) | . | . age = &quot;25&quot; name = &quot;Timmy&quot; print(name + &quot; is &quot; + age) . Timmy is 25 . car = &quot;Tesla&quot; #example of a string yearmake = &quot;2020&quot; ownerage = 16 #example of an integer haslicense = True #example of a Boolean print(&quot;My car is a &quot; + car + &quot; made in &quot; + yearmake) print(&quot;age: &quot; + str(ownerage)) if haslicense == True: print(&quot;can drive&quot;) else: print(&quot;cannot drive&quot;) . My car is a Tesla made in 2020 age: 16 can drive . 3.1.2 Variables . An assignment operator asigns the value on the right of it (in this case =) to the variable on the left. | Collegeboard pseudocode uses the arrow, &lt;--, to assign values to variables. | Python uses the = as an assignment operator | to assign a variable you need 3 parts: variable name | assignment operator | variable value | | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, the command would display 22, since it has been updated and assigned the new value. | . 3.2.1 List and Strings Using Variables . string: a series of characters (numbers, letters, etc) | list: sequences of elements with each element being a variable website with some other cool methods you can do with lists | . | An element a smaller part in a bigger system, such as an item in a list. | An easy way to reference the elements in a list/string is to index it (the 3rd element, 2nd element, etc). | example of a string: &quot;cookie monster&quot; | . todolist = [&quot;finish hacks&quot;, &quot;math hw&quot;, &quot;chores&quot;] print(todolist[2]) # indexing from begining print(todolist[-3]) # indexing from the end . chores finish hacks . 3.2.2 Data Abstraction with Lists . Lists bundle together multiple elements and/or variables under one name are not defined with specified lengths. | The variables that are stored in a list do not have to be limited to one kind of variable. | The user does not need to know how the list stores data (this gives way for data abstraction). | . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # Here I defined numlist so that it could be used in the abstraction later # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . [2, 3, 4] . 3.2.3 Managing Complexity with lists . assinging values to one variable: use square brackets &quot;[]&quot; to store the values of a certain variable, then you can print the variable to output your desired list (more efficient and less complex) | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, alexac54767 running /bin/python3 You will be asked 4 questions. Question: Are you ready to take a test? Question: The purpose of lists and dictionaries are to manage the ____ of a program complexity is correct! Question: Lists are a form of data ______ abstraction is correct! Question: Which brackets are used to assign values to a variable to make a list? [] is correct! alexac54767 you scored 3/4 . food1 = &quot;pizza&quot; food2 = &quot;hot dog&quot; food3 = &quot;sushi&quot; food4 = &quot;strawberry&quot; food5 = &quot;sandwich&quot; print(food1, food2, food3, food4, food5) food = [food1, food2, food3, food4, food5] #this is simplifying it (making food a list and then only need one word to print it) print(food) . pizza hot dog sushi strawberry sandwich [&#39;pizza&#39;, &#39;hot dog&#39;, &#39;sushi&#39;, &#39;strawberry&#39;, &#39;sandwich&#39;] . name1 = &quot;Alexa&quot; name2 = &quot;Ava&quot; name3 = &quot;Lydia&quot; name4 = &quot;Sri&quot; print(name1, name1, name3, name4) # managing complexity names = [name1, name2, name3, name4] print(names) . Alexa Alexa Lydia Sri [&#39;Alexa&#39;, &#39;Ava&#39;, &#39;Lydia&#39;, &#39;Sri&#39;] . 3.3-3.4 . 3.3.1 algorithm that uses sequencing without using programming language . algorithms: a finite set of instruction that accomplish a task (it can be expressed by natural language, diagrams, + more) | 3 parts to an algorithm: sequencing, selection, and iteration. | every algorithm can be created by a mixture of sequencing, selection, and iteration . sequence: the order of how to do something to achieve a result | selection: allows an algorithm to make a decision based on if a condition is met | iteration: a loop and doing something again until a condition is met | . | . Describe the given algorithm . sequencing: The sequencing in this algorithm provided is how it has the steps (1-5) that must be performed in order. To go onto step 2, you miust do step 1 first. | . | Selection: Selection is used in this algorithm when it decides what to do when it evaluates if the numer equals the item. If it does, it must decide to display &quot;item foud&quot;. However, if it doesn&#39;t, then the algorithm decides to display &quot;item not found&quot;. | . | Iteration: Iteration is used in this algorithm when it must cycle through the list, checking if the condition is met. Once it has gone through all of the number, it returns to step 2 to repeat. | . | . 3.3.2 Mathematical Expressions . Question: How do we represent a step-by-step algorithmic process using sequential code statements? . | Sequential statements are used in processes to specify how signals are assigned . | the process is executed in order as a whole | after all the sequential statements in the process are executed the signals are assigned new values. | execute in the order in which they appear in the process (sequencing) | numerical values can be within variables | variable values can be inside other variables | . 3.3.3 Evaluate expression using arithmetic operator . arithmetic operator: language that use addition, subtraction, multiplication, division, and modulus operators | order of arithmetic operation = same with mathematic operation(PEMDAS but Subtraction first) addition: a+b | subtraction: a-b | multiplication: a*b | division: a/b | modulus: a MOD b syntax of MOD is % | divides given numerator by denominator and result = remainder for the division | ex: 10 % 3 = 1 | . | website that goes over different operations and syntax | . | . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . 3.0 . crossword puzzle hack . 1 down - Iteration (creates a loop in the algorithm) | 2 down - Selection (allows an algorithm to create a decision) | 3 across - Sequence (an order of events) | . 3.4 Evaluate expression that manipulates strings . string concatenation: joins two or more strings end-to-end to make a new string | substring: part of an existing string substring (str1, str2, length): returns a substring of consecutive character from str1, starting the character at position &#39;start&#39; and containing &#39;length&#39; character | ^ Website that explains this | . | strings: ordered sequences of characters substring (str1, str2, length): returns a substring of consecutive character from str1, starting the character at position &#39;start&#39; and containing &#39;length&#39; character | . | . len(&quot;Hi Mr. Mortensen&quot;) . 16 . string1 = &quot;Hi &quot; string2 = &quot;Mr.Mortensen&quot; print(string1 + string2) . Hi Mr.Mortensen . string = &quot;Hi Mr. Mortensen&quot; print(string[3:5]) . Mr . string1 = &quot;degree&quot; string2 = &quot; passenger&quot; FinalString = string1 + string2 print(FinalString[2:9]) print(len(FinalString)) print(len(FinalString[2:9])) . gree pa 16 7 . How this helps me . These topics are very common in everyday code and in collegeboard. They wil appear on the AP test, either for me to interpret for for me to correct or write. This lesson has helped me to: . recognize when a variable is assigned | recognize when other data types (such as a boolean, integer, string) are present | understand what each data type does and which is best for a situation &lt; showed up on the collegebaord MC | how to assign a variable | how to create/interpret a list . | Data Abstraction . I rememebr first seeing data abstraciton on the college board requirements and not understanding what it meant. I feel that this lesson has helped me to understand and hopefully implement Data Abstraction in my future projects (including AP test.) | . | Managing Complexity . I used to approach code the very inefficient way, where you type everything out multiple times and take forever to accomplish something. Now, I recognize ways to shorten the preocess, and make it easier to keep track of the algorithm. This lesson has helped me to recognize those opportunities. | . | Sequencing, Selection, and Iteration . To be completely honest, I had no idea how to approach algorithms and try to describe them with these words before this lesson. That was pretty bad, especially since I need to create a project that implements all of these aspects for the AP test. Now, I can more confidently describe each of these words and how an algorithm uses them, which will be extremely helpful for the AP test. | . | Mathematical Expressions . I remember struggling with the mathematical expressions on our collegebaord MC. I had to research what MOD did. Despite understanding enough to answer the questions, I still didn&#39;t have a solid understanding. After this lesson, I feel more more confident in the operator and what it does. I think I will remember it much better now as well, which will really come in handy when it shows up on the AP test third trimester. | . | Evaluating Expression that Minipulates Strings . One thing that definintely confused me on the collegeboard MC was manipulating strings. There was a specific question asking how you could result in a certian string, by using these munipulations on two previous strings. After researching, I understood what concat did, and how I could use it. However, my skills and understanding were still very shaky. Now, I feel more confident in my ability to both recognize when these manipulations are used, and to be able to write them. Once again, this will be extremely helpful on the AP exam. | . | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/studentlessons/weekone",
            "relUrl": "/studentlessons/weekone",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "3.3 and 3.4 Student Lesson (group 2)",
            "content": "Hack 1 . sequencing: The sequencing in this algorithm provided is how it has the steps (1-5) that must be performed in order. To go onto step 2, you miust do step 1 first. | . | Selection: Selection is used in this algorithm when it decides what to do when it evaluates if the numer equals the item. If it does, it must decide to display “item foud”. However, if it doesn’t, then the algorithm decides to display “item not found”. | . | Iteration: Iteration is used in this algorithm when it must cycle through the list, checking if the condition is met. Once it has gone through all of the number, it returns to step 2 to repeat. | . | . Hack 2 . . 1 down - Iteration | 2 down - Selection | 3 across - Sequence | . Hack 3 . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/grouptwo",
            "relUrl": "/students/grouptwo",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "3.1 and 3.2 Student Lesson (group 1)",
            "content": "Hacks . . Answer these: . In your own words, briefly explain by writing down what an assignment operator is An assignment operator asigns the value on the right of it (in this case =) to the variable on the left. | . | In Collegeboard pseudocode, what symbol is used to assign values to variables? Collegeboard pseudocode uses the arrow, &lt;–, to assign values to variables. | . | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? The command would display 22, since it has been updated and assigned the new value. | . | . . What is a list? A list is finite series of ordered values. | . | What is an element An element a smaller part in a bigger system, such as an item in a list. | . | What is an easy way to reference the elements in a list or string? An easy way to reference the elements in a list/string is to index it (the 3rd element, 2nd element, etc). | . | What is an example of a string? example of a string: “cookie monster” | . | . . . . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupone",
            "relUrl": "/students/groupone",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Student Lessons",
            "content": "Week Team Lesson Topics My Homework Grade . 14 | 1 | 3.1-3.2 Variables, Assignments, and Data Abstractions | Data Types, Variables, Lists, Strings, Data Abstraction, Managing Complexity | Hacks | 1/1 | . 14 | 2 | 3.3-3.4 Mathematical Expressions and Strings | Algorithims, sequence, selection, iteration, mathmatical expressions, MOD, string concatination | Hacks | 0.9/1 | . 14 | 3 | 3.5-3.7 Boolean Expression, Conditionals, Nested Conditionals | Booleans, relational operators, logical operators, conditionals, truth tables, nested conditionals | Hacks | 1/1 | . 15 | 4 | 3.8 and 3.10 Boolean Iteration and Lists | Lists, appending lists, iteration | Hacks | 0.975/1 | . 15 | 5 | 3.9 and 3.11 Developing Algorithms and Binary Search | Algorithims, booleans, binary trees, flowcharts | Hacks | 0.95/1 | . 15 | 6 | 3.12-3.13 Calling and Developing Procedures | Procedures, parameters, managing complexity, modularity, abstraction, function structure | Hacks | 0.85/1 | . 16 | 7 | 3.14-3.15 Libraries and Random Values | Libraries, import random, pip.install | Hacks | 0.9/1 | . 16 | 8 | 3.16 Simulations | Simulations, experiments | Graded Hacks | My group’s lesson grade: 3.8/4 | . 16 | 9 | 3.17-3.18 Algorithm Efficiency and Undecidable Problems | Collaz, unsolvable problems, undecidable problems, algorithim efficiency | Hacks | 0.96/1 | . Week Overall Page . 14 | Teacher Blog Check 1 (live review) | . 15 | Teacher Blog Check 2 (live review) | . 16 | Teacher Blog Check 3 (silent review) | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/lessons",
            "relUrl": "/students/lessons",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 2 1 . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Number of iterations . print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) print(&quot;Hailstone numbers: &quot;, list_) . Please enter a number: Number of iterations: 13 Hailstone numbers: [34, 17.0, 52.0, 26.0, 13.0, 40.0, 20.0, 10.0, 5.0, 16.0, 8.0, 4.0, 2.0, 1.0] . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment . Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) | Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) | use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2016/2022/11/28/group9lesson.html",
            "relUrl": "/week%2016/2022/11/28/group9lesson.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statement | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objectives: . Express an algorithm that uses iteration without using a programming language | Define an iteration | The Basics Of Iteration | Examples | LESSON Vocab: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Before we dive deeper, we need to understand that an iteration is a part of an algorithm. And in that iteration is a set of instructions that need to be followed until a certain desired output is met. . Examples . Here is an example using online shopping: . Lets say you are looking for a lost item inside of your house... What steps would you take? . Suppose there are n rooms to search... number the rooms 1-n . | Start by searching in room number 1 . | Search each room thoroughly for you item. . | Change the room number to the next highest number . | Repeat steps 3 and 4 until you have found your lost item. . | Enjoy the lost item. . | WAIT! There is a flaw in the program. . This is where a stopping condition is useful for when the iteration already meets the desired requirement and gets out of the loop. . Programming Examples . i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! . i = 0 while (i &lt; 5): #Try changing the 5 and see what happens! print(&quot;Hello, World!&quot;) i = i + 1 if (i == 4): #Try Changing the 3 and see what happens! break . Hello, World! Hello, World! Hello, World! Hello, World! . These are just a few examples of what you can do with iteration. . Summary: . An Iteration is a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | We can use stopping conditions to stop an iteration if a condition is already met | . Unit 3 Section 3.8.2 . Unit 3 Section 3.8.2 - Parav Salaniwal . Lesson Objectives . Determine the result or side effect of iteration statements | Learn how to use iterations with for loops and while loops | Creating code to learn how to incrementally list numbers | Learn the range function and using variables in code | . Definition: Iteration Statement - cause statements to be executed zero or more times, subject to some loop-termination criteria . The first function we will learn is the range function, which we will use with for loop. As you may be able to guess, this will give us the sum based on the input provided. We always use a variable, such as i, to represent what the range of numbers the output will show. For example, if I wanted to list the numbers from 1-10 using the range function, it would look like this: . for i in range(11): print(i) . 0 1 2 3 4 5 6 7 8 9 10 . Now the first thing you may notice is my input for the range was 11, and you may wonder why is it not 10? This is because when using the range function, the last number, or the ending value, is not included in the output, therefore we would have to add 1 to receive the correct output. Now if we were looking to include a starting value to have it start from 1 and end at 10, the code would look like this: . for i in range(1,11): print(i) . 1 2 3 4 5 6 7 8 9 10 . When using the range with for loop, the you can list much more than just a increment of one, would anyone like to guess how we could include a change in the incremented value? Try making a change in the python code above to change the incremented value. When using the range function: . for i in range(starting value, ending value, incremented value): print(i) . Now with while loops, we can provide a similar output with a variation in the input. Similar to for loops, it requires a variable which is the starting value. . i=1 while i&lt;=10: print(i) i=i+1 . 1 2 3 4 5 6 7 8 9 10 . Based on your knowledge from for loops, which values in the code above are the starting, incrementing, and ending values? . LESSON . . Unit 3 Section 3.8.3 . Unit 3 Section 3.8.3 - Nikhil . Here is some basic code I have created, let&#39;s first look into this one: I created a list of pets, cat, dog, fish, and snake. Then I created a for loop, &quot;for i in pets&quot; and this looks at every element/value in pets, so &quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot; and &quot;snake&quot;. This next if statmenets checks if the element in the list is &quot;fish&quot; and if it is, it breaks the loop. The statement would just print, cat and dog since the loop breaks at fish. . pets = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;snake&quot;] for i in pets: if i == &quot;fish&quot;: break print(i) . cat dog . This while loop checks if number less than 10 is even and if so, it will print out the even numbers. We set a starting value of number = 0, then while the number is less than 10, the percent sign means modulus so meaning if there is a remaninder when we dvide. So if number divided by 2 has no remainder then it will print number. Then after that it will add 1 to the number and repeat the process untill it reaches 10. So let&#39;s check for 0, while 0 is less than ten, then it moves to next statement, since 0 divded by 2 has a remainder of 0 it will print the value of 0. Now it will add 1 to zero. Then it will see that 1 is less than ten, and then check if 1 divided by 2 has a remainder of 0 which it does not, so it skips the print, and goes straight to addding one, so on so forth. . number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . 0 2 4 6 8 . The purpose of this code is to find the sum of all the even numbers between and any number of your choosing. The integer input asks for the minimum and maximum value. The next statement puts a starting sum value set to 0. The for i in range (minimum,maximum+1) looks at every number between those two values, in this case 1 and 100. Then the if i modulus 2 checks if any numbers that are divisible by 2 and the remainder comes to 0. If there is a number that has a remainder of 0 when divided by 2, it adds that number to the sum. Then the last print statement, prints out the final sum of all even numbers between the two numbers of your choosing. . minimum = int(input(&quot;please enter a minimum number you want your range to be&quot;)) maximum = int(input(&quot;please enter a number that you want to be the maximum value&quot;)) sum = 0 for i in range(minimum,maximum+1): if i % 2 == 0: sum += i print(&quot;The sum of all the even numbers between&quot;, minimum, &quot;and&quot;, maximum, &quot;:&quot;, sum) . The sum of all the even numbers between 1 and 3 : 2 . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 3.8.1 . Define an Iteration: loop that continues repeating until condition is met | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | hourshomework = 0 while hourshomework &lt; 8: print(&quot;Too easy&quot;) hourshomework += 1 if hourshomework == 6: break . Too easy Too easy Too easy Too easy Too easy Too easy . Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section 10 - Lists . Lists Recap . append() - adding element to the end of the list . names = [&#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # add element to the end of the list names.append(&#39;luna&#39;) # start with empty list names = [] names.append(&#39;taiyo&#39;) names.append(&#39;ethan&#39;) names.append(&#39;parav&#39;) names.append(&#39;nikhil&#39;) . insert() - adding an element in a specific position . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # adding in a specific position names.insert(0, &#39;taiyo&#39;) names.insert(3, &#39;ethan&#39;) . remove() - remove an item from the list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # deleting by value names.remove(&#39;parav&#39;) # by position del names[-1] . Unit 3.10.1 (Luna Iwazaki) . len() - returns the number of items in a list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # find length of list num_names = len(names) print(&quot;There are&quot; + str(num_names) + &quot;names.&quot;) . sort() - changes order of list permanently . sorted() - returns a copy of the list which leaves the original copy unchanged . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # sort permanently names.sort() # sort permanently in reverse alphabetical order names.sort(reverse=True) # temp. sort print(sorted(names)) print(sorted(names, reverse=True)) # reversing the order of a list names.reverse() . [&#39;ethan&#39;, &#39;luna&#39;, &#39;nikhil&#39;, &#39;parav&#39;, &#39;taiyo&#39;] [&#39;taiyo&#39;, &#39;parav&#39;, &#39;nikhil&#39;, &#39;luna&#39;, &#39;ethan&#39;] . range() - use to work with number efficiently . for number in range(11): print(number) # making list of numbers 1 to 10 # using the list() value can generate a large list of numbers numbers = list(range(1, 10)) . min() - find the least value in list . nums = [10, 30, 40, 60, 70, 60] least = min(nums) print(min(nums)) . 10 . max() - find the highest value in list . nums = [10, 30, 40, 60, 70, 60] highest = max(nums) print(max(nums)) . 70 . sum() - sum of all in list . nums = [10, 30, 40, 60, 70, 60] total = sum(nums) print(sum(nums)) . 270 . Practice Question . Using the information above fill in the missing code . nums = [] nums.#missing code &#39;15&#39; nums.#missing code &#39;43&#39; nums.#missing code &#39;81&#39; nums.#missing code &#39;25&#39; least = #missing code print(#missing code) . AP Exam Reference Sheet . Since CS is taught in different languages the pseudocode represents fundamental programming concepts. . provides basic operations on lists | provides pseudocode for loops | helps you understand code used in questions | students can use this reference sheet in the AP Exam | . APCSP Testing Reference Sheet . If you looked at the reference sheet and seem to not understand some concepts here is a Khan Academy resource which can help you understand specific topics. . Khan Academy Resource . Practice Question . If the list words contain [&#39;song&#39;, &#39;book&#39;, &#39;video&#39;, &#39;book&#39;] what will be the following code output . Finding Values in Lists (Luna Iwazaki) . Part 1 . use the list below | make a variable to hold the minimum and set it to potential minimum value | loop | check each element to see if it is less than the minimum variable | if the element is less than the minimum variable, update the minimum | after all the elements of the list have been checked, display the minimum value | . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] # add code here . Part 2 . use the list from part 1 | find the sum of even numbers in a list | . Unit 3.10.2 (Ethan Tran) . Traversing a list is the process of visiting each element in a list in a sequential order. It can be used to access, search for, and modify elements in the list. | . Traversing Lists . 1) Complete Traversal: All elements in a list are assessed . 2) Partial Traversal: Only a given portion of elements are assessed . 3) Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. . Quick Lists Reference Sheet . A given element of a list can be evaluated using index, [ ] | . 1) Ex. listName[i] 2) Ex. listName[3] . insert( ) allows a value to be inserted into a list at index i | append( ) allows a value to be added at the end of a list | remove( ) allows an element at index i to be deleted from a list | length( ) returns the number of elements currently in a specific list | . deleted images . A loop such as the example above allows a user to access each item within the list . College Board Example Question . deleted images | . . HACKS Unit 3 Section 10 . Find the lowest value in a list (Luna Iwazaki) . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min = 20 for n in nums: if int(n) &lt; int(min): min = n print(min) . 10 . Lists Quiz (Ethan Tran) . Take a screenshot of your score on put it on your review ticket! . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be inserted into a list at index i? index() Correct! What allows an element at index i to be deleted from a list? remove() Correct! What returns the number of elements currently in a specific list? length() Correct! What allows a value to be added at the end of a list? append() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! . . . College Board Reference Sheets . deleted image | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2015/2022/11/28/group4lesson.html",
            "relUrl": "/week%2015/2022/11/28/group4lesson.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Unit 3.1-3.2 Class Jupyter Notebook Period 4",
            "content": "Unit 3, Section 1.1: Data Types and Variables - Ederick . Essential Knowledge (College Board&#39;s Must Knows): . A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time (However, if the value is a collection type such as a list, then the value can contain multiple values). | Variables typically have meaningful names that helps with the overall organization of the code and understanding of what is being represented by the variables | Some programming languages provide a variety of methods to represent data, which are referenced using variables 9Booleans, numbers, lists, and strings) | One form of a value is better suited for representation than antoher. | . What is a Variable? . A variable is an abstraction made inside a program that holds a value. These variables are used in code to refer to more comples values that the variable contains and makes the program code more organized and smoother to run. . Variables can be seen as &quot;containers&quot; and each container has a name that holds what it is supposed to hold. In the following code, we can see that a variable has the value of &quot;Alex.&quot; How can we make the variable appear more organized in the code? . x = &quot;alex&quot; print(x) . Choosing Variables . When choosing variables, it is important to assign the variables name to something that correlates with what the function of the variable is supposed to do. For example, we do not want a variable that is supposed to hold a name be named &quot;age&quot; becaue it can be confusing and mistakes may be more prevalent. . Example: . age = &quot;25&quot; name = &quot;Timmy&quot; print(name + &quot; is &quot; + age) . car = &quot;Tesla&quot; yearmake = &quot;2020&quot; ownerage = 16 haslicense = True print(&quot;My car is a &quot; + car + &quot; made in &quot; + yearmake) print(&quot;age: &quot; + str(ownerage)) if haslicense == True: print(&quot;can drive&quot;) else: print(&quot;cannot drive&quot;) . Notice how age is going to be seen when printing the code. That can lead to confusion | . Data Types . Variables have different data types that store specific kinds of data depending on what is being represented. Some examples are shown below: . integer (numbers) | string (or text/letters) | Boolean (True/False statements) | . These types of data types can be useful when trying to represent a value. For example, you would not want a variable meant to represent someone&#39;s name with an integer. . Questions (College Board&#39;s Essential Knowledge): . What exactly IS a variable? | What is the best data type to represent someone&#39;s dog&#39;s name? | Why is it important to give variables specific names before containing values? | What is the best way to represent someone&#39;s phone number? | Bonus (Not required but important to know): . How can we update a variable&#39;s value | What function is used to recieve a user&#39;s input? | Variables (3.1.2) - Noor . Learning objective for 3.1.2: . Determine the value of a variable as a result of an assignment . done through looking at how we can use the assignment operator | . Note: . Collegeboard uses &lt;-- as the assignment operator . The assignment operator looks different for different types of coding languages A variable will take the most recent value assigned | . How do you even store a value inside a variable? . Let&#39;s use python for our example: . In python, the assignment operator is the equal sign (=) | In order to store a value inside a variable, we must: Give the variable a name | place the assignment operator | input the variable value | . | . highscore = 100 # How do you store a number like 3.72? money = 3.72 # What about storing your username (string)? username = &quot;name&quot; # What if it is raining outside and you want to store that fact (boolean)? is_raining = True # What about a list of groceries? groceries = [&quot;eggs&quot;, &quot;flour&quot;, &quot;bread&quot;, &quot;milk&quot;] . Lets Look at an Example: . x = 10 y = 20 z = 30 x = y z = x # what do you think z will be? print(z) . Let&#39;s get a little more practical here . Imagine that you are making a calendar and have just finished the html code that is needed: . You now want to be able to switch between the months of the year by using the &quot;next&quot; or &quot;prev&quot; buttons you will need to take the html elements and use them to your advantage but how? | . | . | . &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;calendar&quot;&gt; &lt;div class=&quot;month&quot;&gt; &lt;button class=&quot;prev&quot;&gt;Prev&lt;/button&gt; &lt;button class=&quot;next&quot;&gt;Next&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // to make our lives a little easier, we can store the div next and prev into variables // this way we don&#39;t need to type out as much // Note: You CAN just add the event listener to document.querySelector(.next) or prev and get the same desired outcome nextButton = document.querySelector(.next) prevButton = document.querySelector(.prev) // we can go make the buttons functional by adding an addeventlistner to them nextButton.addEventListener(&quot;click&quot;, changemonth) // added in class-not sure if it&#39;s correct &lt;/script&gt; . Recap: . We learned what is a assignment operator | We learned how to use the assignment operator | We learned how to store a value inside a variable using the assignment operator | We experimented with a few examples | . Hacks: . Answer these: . In your own words, briefly explain by writing down what an assignment operator is | In Collegeboard pseudocode, what symbol is used to assign values to variables? | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | . Hacks: . Copy the all the html code into a markdown file and run your local server. You will then see a decimal to binary converter near the html code. The problem is that it is not converting the decimal to binary. This is because the variables are not defined properly and it is your job to use the information learned today to fix the converter. Don&#39;t change the css . Bonus (optional): . There&#39;s more than one way to define the variable. List two ways to do it. . Rubric . For .15: . Student has followed directions properly and has the converter working | . For .18: . Student has completed some of the bonus material alongside requirement for 2.7 | . For .20: . Student has completed all of the material, answered thoughtfully, and met requirements for 2.7 | . List and Strings Using Variables- Nathan . Strings . Strings is a series of characters (numbers, letters, etc), one example of a string is your name or your id because strings can contain both numbers and letters. . The following are all examples of strings being used in code, in this case, within print functions. . print(&quot;hello world&quot;) print(&#39;hello&#39;) . Lists . Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. . Features of Lists . The elements within the list can be accessed by index. | Can store various elements | The list is in order | . Example of a list . thanksgivingList = [&quot;cranberry pie&quot;, &quot;casserole&quot;, &quot;mashed potatoes&quot;, &quot;turkey&quot;] print(thanksgivingList) . List Index . An index is an element of a string. Indices typically start with 0, but Collegeboard has the index start at 1. . print(thanksgivingList[1]) #In this case, the index starts at 0, but in collegeboard, the index starts at 1 print(thanksgivingList[-3]) #Python can index from the end, in this case, &quot;turkey&quot; would be index -1 and 3. . Hacks . Questions . What is a list? | What is an element | What is an easy way to reference the elements in a list or string? | What is an example of a string? | . Hacks . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . Create an index of your favorite foods . Tips: Index starts at 1, Strings are ordered sequences of characters . Extra work: Try to create an index that lists your favorite food and print the element at index 3. More work: Create a list of your favorite foods and create an index to access them. . marks = [&quot;food1&quot;] . Rubric . Creating a list . Shows great knowledge in creating lists | . Indexing . Is able to index both from the start and from the end | . todolist = [&quot;finish hacks&quot;, &quot;math hw&quot;, &quot;chores&quot;] print(todolist[2]) print(todolist[-3]) . Data Abstraction with Lists - Steven . Data abstraction can be created with lists. . Lists bundle together multiple elements and/or variables under one name are not defined with specified lengths. | The variables that are stored in a list do not have to be limited to one kind of variable. | The user does not need to know how the list stores data (this gives way for data abstraction). | . In the code below, the logic itself works with a list, but the code abstracts it into a sequence of bits in a string (as seen in the input and output). To make this work, the splitbits lists is created and processed. At the end of the code, the result is outputted as a string rather than a list (abstraction). . bits = input(&quot;Input a sequence of bits to invert: &quot;) splitbits = list(bits) for i in range(len(splitbits)): if splitbits[i] == &#39;0&#39;: splitbits[i] = &#39;1&#39; elif splitbits[i] == &#39;1&#39;: splitbits[i] = &#39;0&#39; print(&quot;&quot;.join(splitbits)) . Hacks . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn&#39;t connected to the abstraction. | . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . The following provides a rubric for my hacks (scored out of 0.20) . 0.20 - Fully functioning data abstraction with a list | 0.10 - not functioning, but attempt at making a list | 0.00 - not functioning, no evidence of attempt based upon the guidelines | . Managing Complexity with lists - Liav . Long and slow way . By now, everyone should know the &quot;long and slow way&quot; to print a list of something in python It is easy to just assign a value to a single variable | This method is displayed in this example with test scores: | . | . score1 = 95 score2 = 24 score3 = 87 score4 = 92 print(score1, score2, score3, score4) . As you can see, each score is assigned to its relative variable such as &quot;score1 = 95&quot; and then you just print each variable. | However you can make the code segment faster, easier to read, and more efficient... | . Assinging values to one variable . Use square brackets &quot;[]&quot; to store the values of a certain variable, then you can simply print the variable to output your desired list: | . scores = [95, 24, 87, 92] print(scores) . Now instead of having a difference variable and new line of code for each value, the list is simply displayed by assigning each value to a single value that you can now print. | . How lists manage complexity of a program . Simplification . It is much simpler, faster, and easier to code lists this way | Makes the code segment much easier to read | . | Variables . You do not need as many variables, because you can just assign all corresponding values to a single variable | To change a value you don&#39;t have to edit/add/remove an entire variable | . | . Python Quiz . Now everyone should take this short python quiz and screenshot your score. | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Simplify Foods List . Now simplify this foods list using what you have learned | . food1 = &quot;pizza&quot; food2 = &quot;hot dog&quot; food3 = &quot;sushi&quot; food4 = &quot;strawberry&quot; food5 = &quot;sandwich&quot; print(food1, food2, food3, food4, food5) food = [food1, food2, food3, food4, food5] print(food) . Hacks . On a single markdown file: Insert a screenshot of your score on the python quiz | Insert a screenshot of your simplifying of the food list | Why are using lists better for a program, rather than writing out each line of code? | Make your own list the &quot;long and slow way&quot; then manage the complexity of the list | . | . Rubric . In order to earn a .20/.20 you must On a markdown post: | make an attempt at the python quiz | Successfully simplify the food list | Answer the question in detail | Provide evidence of your own list that you coded | . | . name1 = &quot;Alexa&quot; name2 = &quot;Ava&quot; name3 = &quot;Lydia&quot; name4 = &quot;Sri&quot; print(name1, name1, name3, name4) # managing complexity names = [name1, name2, name3, name4] print(names) .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/jupyter/python/week%2014/2022/11/26/group1lesson.html",
            "relUrl": "/jupyter/python/week%2014/2022/11/26/group1lesson.html",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Unit 3.1-3.2 Class Jupyter Notebook Period 4",
            "content": "Unit 3, Section 1.1: Data Types and Variables - Ederick . Essential Knowledge (College Board&#39;s Must Knows): . A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time (However, if the value is a collection type such as a list, then the value can contain multiple values). | Variables typically have meaningful names that helps with the overall organization of the code and understanding of what is being represented by the variables | Some programming languages provide a variety of methods to represent data, which are referenced using variables 9Booleans, numbers, lists, and strings) | One form of a value is better suited for representation than antoher. | . What is a Variable? . A variable is an abstraction made inside a program that holds a value. These variables are used in code to refer to more comples values that the variable contains and makes the program code more organized and smoother to run. . Variables can be seen as &quot;containers&quot; and each container has a name that holds what it is supposed to hold. In the following code, we can see that a variable has the value of &quot;Alex.&quot; How can we make the variable appear more organized in the code? . x = &quot;alex&quot; print(x) . Choosing Variables . When choosing variables, it is important to assign the variables name to something that correlates with what the function of the variable is supposed to do. For example, we do not want a variable that is supposed to hold a name be named &quot;age&quot; becaue it can be confusing and mistakes may be more prevalent. . Example: . age = &quot;25&quot; name = &quot;Timmy&quot; print(name + &quot; is &quot; + age) . car = &quot;Tesla&quot; yearmake = &quot;2020&quot; ownerage = 16 haslicense = True print(&quot;My car is a &quot; + car + &quot; made in &quot; + yearmake) print(&quot;age: &quot; + str(ownerage)) if haslicense == True: print(&quot;can drive&quot;) else: print(&quot;cannot drive&quot;) . Notice how age is going to be seen when printing the code. That can lead to confusion | . Data Types . Variables have different data types that store specific kinds of data depending on what is being represented. Some examples are shown below: . integer (numbers) | string (or text/letters) | Boolean (True/False statements) | . These types of data types can be useful when trying to represent a value. For example, you would not want a variable meant to represent someone&#39;s name with an integer. . Questions (College Board&#39;s Essential Knowledge): . What exactly IS a variable? | What is the best data type to represent someone&#39;s dog&#39;s name? | Why is it important to give variables specific names before containing values? | What is the best way to represent someone&#39;s phone number? | Bonus (Not required but important to know): . How can we update a variable&#39;s value | What function is used to recieve a user&#39;s input? | Variables (3.1.2) - Noor . Learning objective for 3.1.2: . Determine the value of a variable as a result of an assignment . done through looking at how we can use the assignment operator | . Note: . Collegeboard uses &lt;-- as the assignment operator . The assignment operator looks different for different types of coding languages A variable will take the most recent value assigned | . How do you even store a value inside a variable? . Let&#39;s use python for our example: . In python, the assignment operator is the equal sign (=) | In order to store a value inside a variable, we must: Give the variable a name | place the assignment operator | input the variable value | . | . highscore = 100 # How do you store a number like 3.72? money = 3.72 # What about storing your username (string)? username = &quot;name&quot; # What if it is raining outside and you want to store that fact (boolean)? is_raining = True # What about a list of groceries? groceries = [&quot;eggs&quot;, &quot;flour&quot;, &quot;bread&quot;, &quot;milk&quot;] . Lets Look at an Example: . x = 10 y = 20 z = 30 x = y z = x # what do you think z will be? print(z) . Let&#39;s get a little more practical here . Imagine that you are making a calendar and have just finished the html code that is needed: . You now want to be able to switch between the months of the year by using the &quot;next&quot; or &quot;prev&quot; buttons you will need to take the html elements and use them to your advantage but how? | . | . | . &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;calendar&quot;&gt; &lt;div class=&quot;month&quot;&gt; &lt;button class=&quot;prev&quot;&gt;Prev&lt;/button&gt; &lt;button class=&quot;next&quot;&gt;Next&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // to make our lives a little easier, we can store the div next and prev into variables // this way we don&#39;t need to type out as much // Note: You CAN just add the event listener to document.querySelector(.next) or prev and get the same desired outcome nextButton = document.querySelector(.next) prevButton = document.querySelector(.prev) // we can go make the buttons functional by adding an addeventlistner to them nextButton.addEventListener(&quot;click&quot;, changemonth) // added in class-not sure if it&#39;s correct &lt;/script&gt; . Recap: . We learned what is a assignment operator | We learned how to use the assignment operator | We learned how to store a value inside a variable using the assignment operator | We experimented with a few examples | . Hacks: . Answer these: . In your own words, briefly explain by writing down what an assignment operator is | In Collegeboard pseudocode, what symbol is used to assign values to variables? | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | . Hacks: . Copy the all the html code into a markdown file and run your local server. You will then see a decimal to binary converter near the html code. The problem is that it is not converting the decimal to binary. This is because the variables are not defined properly and it is your job to use the information learned today to fix the converter. Don&#39;t change the css . Bonus (optional): . There&#39;s more than one way to define the variable. List two ways to do it. . Rubric . For .15: . Student has followed directions properly and has the converter working | . For .18: . Student has completed some of the bonus material alongside requirement for 2.7 | . For .20: . Student has completed all of the material, answered thoughtfully, and met requirements for 2.7 | . List and Strings Using Variables- Nathan . Strings . Strings is a series of characters (numbers, letters, etc), one example of a string is your name or your id because strings can contain both numbers and letters. . The following are all examples of strings being used in code, in this case, within print functions. . print(&quot;hello world&quot;) print(&#39;hello&#39;) . Lists . Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. . Features of Lists . The elements within the list can be accessed by index. | Can store various elements | The list is in order | . Example of a list . thanksgivingList = [&quot;cranberry pie&quot;, &quot;casserole&quot;, &quot;mashed potatoes&quot;, &quot;turkey&quot;] print(thanksgivingList) . List Index . An index is an element of a string. Indices typically start with 0, but Collegeboard has the index start at 1. . print(thanksgivingList[1]) #In this case, the index starts at 0, but in collegeboard, the index starts at 1 print(thanksgivingList[-3]) #Python can index from the end, in this case, &quot;turkey&quot; would be index -1 and 3. . Hacks . Questions . What is a list? | What is an element | What is an easy way to reference the elements in a list or string? | What is an example of a string? | . Hacks . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . Create an index of your favorite foods . Tips: Index starts at 1, Strings are ordered sequences of characters . Extra work: Try to create an index that lists your favorite food and print the element at index 3. More work: Create a list of your favorite foods and create an index to access them. . marks = [&quot;food1&quot;] . Rubric . Creating a list . Shows great knowledge in creating lists | . Indexing . Is able to index both from the start and from the end | . todolist = [&quot;finish hacks&quot;, &quot;math hw&quot;, &quot;chores&quot;] print(todolist[2]) print(todolist[-3]) . Data Abstraction with Lists - Steven . Data abstraction can be created with lists. . Lists bundle together multiple elements and/or variables under one name are not defined with specified lengths. | The variables that are stored in a list do not have to be limited to one kind of variable. | The user does not need to know how the list stores data (this gives way for data abstraction). | . In the code below, the logic itself works with a list, but the code abstracts it into a sequence of bits in a string (as seen in the input and output). To make this work, the splitbits lists is created and processed. At the end of the code, the result is outputted as a string rather than a list (abstraction). . bits = input(&quot;Input a sequence of bits to invert: &quot;) splitbits = list(bits) for i in range(len(splitbits)): if splitbits[i] == &#39;0&#39;: splitbits[i] = &#39;1&#39; elif splitbits[i] == &#39;1&#39;: splitbits[i] = &#39;0&#39; print(&quot;&quot;.join(splitbits)) . Hacks . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn&#39;t connected to the abstraction. | . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . The following provides a rubric for my hacks (scored out of 0.20) . 0.20 - Fully functioning data abstraction with a list | 0.10 - not functioning, but attempt at making a list | 0.00 - not functioning, no evidence of attempt based upon the guidelines | . Managing Complexity with lists - Liav . Long and slow way . By now, everyone should know the &quot;long and slow way&quot; to print a list of something in python It is easy to just assign a value to a single variable | This method is displayed in this example with test scores: | . | . score1 = 95 score2 = 24 score3 = 87 score4 = 92 print(score1, score2, score3, score4) . As you can see, each score is assigned to its relative variable such as &quot;score1 = 95&quot; and then you just print each variable. | However you can make the code segment faster, easier to read, and more efficient... | . Assinging values to one variable . Use square brackets &quot;[]&quot; to store the values of a certain variable, then you can simply print the variable to output your desired list: | . scores = [95, 24, 87, 92] print(scores) . Now instead of having a difference variable and new line of code for each value, the list is simply displayed by assigning each value to a single value that you can now print. | . How lists manage complexity of a program . Simplification . It is much simpler, faster, and easier to code lists this way | Makes the code segment much easier to read | . | Variables . You do not need as many variables, because you can just assign all corresponding values to a single variable | To change a value you don&#39;t have to edit/add/remove an entire variable | . | . Python Quiz . Now everyone should take this short python quiz and screenshot your score. | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Simplify Foods List . Now simplify this foods list using what you have learned | . food1 = &quot;pizza&quot; food2 = &quot;hot dog&quot; food3 = &quot;sushi&quot; food4 = &quot;strawberry&quot; food5 = &quot;sandwich&quot; print(food1, food2, food3, food4, food5) food = [food1, food2, food3, food4, food5] print(food) . Hacks . On a single markdown file: Insert a screenshot of your score on the python quiz | Insert a screenshot of your simplifying of the food list | Why are using lists better for a program, rather than writing out each line of code? | Make your own list the &quot;long and slow way&quot; then manage the complexity of the list | . | . Rubric . In order to earn a .20/.20 you must On a markdown post: | make an attempt at the python quiz | Successfully simplify the food list | Answer the question in detail | Provide evidence of your own list that you coded | . | . name1 = &quot;Alexa&quot; name2 = &quot;Ava&quot; name3 = &quot;Lydia&quot; name4 = &quot;Sri&quot; print(name1, name1, name3, name4) # managing complexity names = [name1, name2, name3, name4] print(names) .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/jupyter/python/2022/11/26/LessonPlanNB.html",
            "relUrl": "/jupyter/python/2022/11/26/LessonPlanNB.html",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Lesson 3.3 & 3.4",
            "content": "Lesson 3.3 . Luka . Lesson 3.3.1 . What is the goal? . Express an algorithm that uses sequencing without using programming language. | . What is an algorithms? . An algorithm is a finite set of instruction that accomplish a task, it can be expressed by natural language, diagrams, and various other ways. | . What are the three parts of an algorithm? . Sequencing, selection, and iteration. . | Every algorithm can be created by a mixture of sequencing, selection, and iteration . | . What is a sequence? . A sequence is the order of how to do something to achieve a result, similarly to how you follow the instructions from a teacher. | . What is a selection? . A selection allows an algorithm to make a decision based on if a condition is met, an example of this is when your car is out of fuel, you go to the gas station to fill your car, but if your car is full you wouldn&#39;t go to the gas station. | . What is a iteration? . An iteration is a loop and doing something again until a condition is met, like you put away your computer when you are finished with your work. | . Hacks . You will describe the different parts of an algorithm, sequencing, selection, and iteration in the image below. | . sequencing: | Selection: | Iteration: | . Saavan . Mathematical Expressions . How do we represent a step-by-step algorithmic process using sequential code statements? . First off what is a sequential code statement? Sequential statements are used in processes to specify how signals are assigned. The process is executed in order as a whole. After all the sequential statements in the process are executed the signals are assigned their new values. They execute in the order in which they appear in the process. | . | Sequencing - First step to do- Second step to do - third step to do Followed in the order that the code comes in. | You can put numerical values within variables. You can also put variable values inside other variables Ex. grade - 82 | Ex. highScore - currentScore | . | Can also store results of operations inside of a variable Ex. name - firstName + lastName | . | Can store results of a procedure call Average - calcAverage (10,20,30) | . | Order of operations very important Ex. grade1 - 10 | Grade 2 - grade 1 | . | . | Example Problem - calculate and display average of 25, 32, 42 Num1 - 25 | Num2 -32 | Num3 - 42 | Average - (num1 + num2 + num3)/3 | DISPLAY (Average) | . | . Antony . Goal: Evaluate expression using arithmetic operator. . Arithmetic operator are language that use addition, subtraction, multiplication, division, and modulus operator. . The order of arithmetic operation is the same with mathematic operation(Subtraction first). . Examples of arithmetic operators: . -Addition: a+b -Subtraction: a-b -Multiplication: a*b -Division: a/b -Modulus: a MOD b (a and b can be string or number) . Examples of arithmetic operator in code: . 10 + 5 * 8 / 4 . 20.0 . (10+5) * 8 / 4 . 30.0 . num1 = 10 num2 = 5 num3 = 7 result = num1 + num2 + num3 print(result) . 22 . Modulus operator divides the given numerator by the denominator to find a result,which is finding the remainder for the division(remainder has to an integer). . Operator with MOD have the same sequence with multiplication and division. In python and most programming languages, the syntax of MOD is % . Examples with use of MOD: . num1 = 12 num2 = 25 num3 = 14 result = num1 / 4 * num3 + 9 % 2 - num3 print(result) . 29.0 . num1 = 12 num2 = 25 num3 = 14 result = num2 % num1 * (num3+6) - 10 print(result) . 10 . Hack . -Evaluate the arithmetic expression or this code: . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . 3.0 . HACK for 3.3! CROSS WORD PUZZLE! . example of how to do it in your blog: . 7 across - Baloney . Lesson 3.4 . Matty . Goal: Evaluate expression that manipulate strings . String concatenation joins two or more strings end-to-end to make a new string . A substring is part of an existing string . Strings: . Ordered sequences of characters | some procedures may exist that can be used with strings | each language has its own procedures, methods, and functions. | . Fun fact: Space bar is also a character. . Examples of strings in pseudocode: . len (str) . returns the number of character is str | len(&quot;hello&quot;) returns 5 | . | concat (str1, str2) . returns a single string consisting of str1 followed by str 2 | concat(&quot;hello&quot;,&quot;world&quot;) return &#39;hello world&#39; | . | substring (str1, str2, length) . returns a substring of consecutive character from str1, starting the character at position &#39;start&#39; and containing &#39;length&#39; character | substring (&quot;hello&quot;,&quot;world&quot;, 4,5) returns &#39;lo wor&#39; | . | . . This is an example of a len substring in python: . len(&quot;HelloWorld&quot;) . 10 . This is an example of a concat string in python: . string1 = &quot;Hello&quot; string2 = &quot;World&quot; print(string1 + string2) . HelloWorld . or: . string1 = &quot;Hello&quot; print(string1, &quot;World&quot;) . Hello World . This is an example of a substring string in python: . string = &quot;HelloWorld&quot; print(string[2:6]) . lloW . &quot;Challenge&quot; problem: . (The first to answer the output.) . string1 = &quot;degree&quot; string2 = &quot; passenger&quot; FinalString = string1 + string2 print(FinalString[2:9]) print(len(FinalString)) print(len(FinalString[2:9])) . gree pa 16 7 . There are many more functions that deal with strings, but these three are the ones that college board want you to learn. if you want to learn more about them, a google search will do the trick. . HACK! . Link to the funnest activity ever!!!! . . HACK! REVIEW . Hack #1 . Hack #2 . Hack #3 . Make a new blog post and finish all of the hacks on there and submit it to the review ticket. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2014/2022/11/20/group2lesson.html",
            "relUrl": "/week%2014/2022/11/20/group2lesson.html",
            "date": " • Nov 20, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Lesson 3.3 & 3.4",
            "content": "Lesson 3.3 . Luka . Lesson 3.3.1 . What is the goal? . Express an algorithm that uses sequencing without using programming language. | . What is an algorithms? . An algorithm is a finite set of instruction that accomplish a task, it can be expressed by natural language, diagrams, and various other ways. | . What are the three parts of an algorithm? . Sequencing, selection, and iteration. . | Every algorithm can be created by a mixture of sequencing, selection, and iteration . | . What is a sequence? . A sequence is the order of how to do something to achieve a result, similarly to how you follow the instructions from a teacher. | . What is a selection? . A selection allows an algorithm to make a decision based on if a condition is met, an example of this is when your car is out of fuel, you go to the gas station to fill your car, but if your car is full you wouldn&#39;t go to the gas station. | . What is a iteration? . An iteration is a loop and doing something again until a condition is met, like you put away your computer when you are finished with your work. | . Hacks . You will describe the different parts of an algorithm, sequencing, selection, and iteration in the image below. | . sequencing: | Selection: | Iteration: | . Saavan . Mathematical Expressions . How do we represent a step-by-step algorithmic process using sequential code statements? . First off what is a sequential code statement? Sequential statements are used in processes to specify how signals are assigned. The process is executed in order as a whole. After all the sequential statements in the process are executed the signals are assigned their new values. They execute in the order in which they appear in the process. | . | Sequencing - First step to do- Second step to do - third step to do Followed in the order that the code comes in. | You can put numerical values within variables. You can also put variable values inside other variables Ex. grade - 82 | Ex. highScore - currentScore | . | Can also store results of operations inside of a variable Ex. name - firstName + lastName | . | Can store results of a procedure call Average - calcAverage (10,20,30) | . | Order of operations very important Ex. grade1 - 10 | Grade 2 - grade 1 | . | . | Example Problem - calculate and display average of 25, 32, 42 Num1 - 25 | Num2 -32 | Num3 - 42 | Average - (num1 + num2 + num3)/3 | DISPLAY (Average) | . | . Antony . Goal: Evaluate expression using arithmetic operator. . Arithmetic operator are language that use addition, subtraction, multiplication, division, and modulus operator. . The order of arithmetic operation is the same with mathematic operation(Subtraction first). . Examples of arithmetic operators: . -Addition: a+b -Subtraction: a-b -Multiplication: a*b -Division: a/b -Modulus: a MOD b (a and b can be string or number) . Examples of arithmetic operator in code: . 10 + 5 * 8 / 4 . 20.0 . (10+5) * 8 / 4 . 30.0 . num1 = 10 num2 = 5 num3 = 7 result = num1 + num2 + num3 print(result) . 22 . Modulus operator divides the given numerator by the denominator to find a result,which is finding the remainder for the division(remainder has to an integer). . Operator with MOD have the same sequence with multiplication and division. In python and most programming languages, the syntax of MOD is % . Examples with use of MOD: . num1 = 12 num2 = 25 num3 = 14 result = num1 / 4 * num3 + 9 % 2 - num3 print(result) . 29.0 . num1 = 12 num2 = 25 num3 = 14 result = num2 % num1 * (num3+6) - 10 print(result) . 10 . Hack . -Evaluate the arithmetic expression or this code: . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . 3.0 . HACK for 3.3! CROSS WORD PUZZLE! . example of how to do it in your blog: . 7 across - Baloney . Lesson 3.4 . Matty . Goal: Evaluate expression that manipulate strings . String concatenation joins two or more strings end-to-end to make a new string . A substring is part of an existing string . Strings: . Ordered sequences of characters | some procedures may exist that can be used with strings | each language has its own procedures, methods, and functions. | . Fun fact: Space bar is also a character. . Examples of strings in pseudocode: . len (str) . returns the number of character is str | len(&quot;hello&quot;) returns 5 | . | concat (str1, str2) . returns a single string consisting of str1 followed by str 2 | concat(&quot;hello&quot;,&quot;world&quot;) return &#39;hello world&#39; | . | substring (str1, str2, length) . returns a substring of consecutive character from str1, starting the character at position &#39;start&#39; and containing &#39;length&#39; character | substring (&quot;hello&quot;,&quot;world&quot;, 4,5) returns &#39;lo wor&#39; | . | . . This is an example of a len substring in python: . len(&quot;HelloWorld&quot;) . 10 . This is an example of a concat string in python: . string1 = &quot;Hello&quot; string2 = &quot;World&quot; print(string1 + string2) . HelloWorld . or: . string1 = &quot;Hello&quot; print(string1, &quot;World&quot;) . Hello World . This is an example of a substring string in python: . string = &quot;HelloWorld&quot; print(string[2:6]) . lloW . &quot;Challenge&quot; problem: . (The first to answer the output.) . string1 = &quot;degree&quot; string2 = &quot; passenger&quot; FinalString = string1 + string2 print(FinalString[2:9]) print(len(FinalString)) print(len(FinalString[2:9])) . gree pa 16 7 . There are many more functions that deal with strings, but these three are the ones that college board want you to learn. if you want to learn more about them, a google search will do the trick. . HACK! . Link to the funnest activity ever!!!! . . HACK! REVIEW . Hack #1 . Hack #2 . Hack #3 . Make a new blog post and finish all of the hacks on there and submit it to the review ticket. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/wk2/2022/11/20/Lesson-presentation.html",
            "relUrl": "/wk2/2022/11/20/Lesson-presentation.html",
            "date": " • Nov 20, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Trimester 2 Tool Check",
            "content": "This is my make server running .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/tools/tri2",
            "relUrl": "/tools/tri2",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Collegebaord Final Reflection/Night at the Museum",
            "content": "Taking the Final . There were many questions where I had to stop and think for a while. However, this final didn’t feel as challenging or overwhelming as the previous practice quizes. . Strategies/improvements . I noticed that many of the questions that were on the final were similar to the ones we had taken earlier after the videos. They felt much easier this time. . I understand the topics much better now | broke up the code into pieces (wasn’t overwhelmed by the whole chunk) | took pieces step by step to understand what the code does | used process of elimination (was able to limit down the options until I felt confident in an answer) | when I was stuck, I’d discuss with my teammates who were taking the test as well (combinded knowlege and backgrounds helped to conclude an answer) | . ### Corrections I got a 48/50 on the final, which would be a 5 on the AP test. These were the problems I got incorrect. . #11 | My mistake was that I thought that the code compares each element to every other element in the list. Originally, I thought since the list is checking for duplicates, it would need to check for dupliactes in all the elements. | However, it acutually only compares it to the elements that follow, since it iterates through j + 1. It doesn’t require checking the previous ones since it checks for duplicates as it goes. . | #36 | This question was very hard for me to understand, even after seeing the correct answer. I asked a couple people for help, and their explanations aided in my current understanding. | At first, I thought that i &lt;- i + 1 needed to be first in order to make it even before multiplying it by 2 everytime. I misunderstood the parts of the code, and mixed up appending it to the list and iterating through it. | The APPEND(evenlist, 2 * i) needs to be first. It appends an empty list, and then multiplies i (with a current value of 1) by 2 in order to make it even. It then iterates through by adding one to i. | . Night at the Museum . The Night at the Museum process was a little chaotic for my group. Just before we had to leave to head to the school, our code was changed and made a major error. Our AWS wouldn’t deploy, so we couldn’t fetch data from our APIs. However, it was still a successful night with many intresting projects | it was so intresting to go around and see all the projects that other students created. They were very creative and all the projects were so differet. It was also cool to see the APCSA projects and how they were more advanced and detailed. | . some of other groups’ projects: .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/final/collegeboard",
            "relUrl": "/final/collegeboard",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "My Quiz",
            "content": "def question_with_response(promt): print(&quot;Question: &quot; + promt) msg = input() return msg correct = 0 ec_abort = 0 # I created the variable &quot;ec_abort&quot; (stands for extra credit abort) print(&quot;Hey queen, make sure to think out of the box when taking this quiz.&quot;) print(&quot;You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number.&quot;) question_with_response(&quot;Are you ready?&quot;) if ec_abort == 0: rsp = question_with_response(&quot;How old am I?&quot;) if rsp == &quot;16&quot;: print(rsp + &quot; is correct:)&quot;) correct += 1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # The new variable allows me to code so that if the user of my quiz types &quot;Give me 100%&quot;, it skips to the end with a 5/5 if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite color?&quot;) if rsp == &quot;Blue&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If they get the question correct, then the variable &quot;correct&quot; goes up by 1 if ec_abort == 0: rsp = question_with_response(&quot;How many siblings to I have?&quot;) if rsp == &quot;3&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If their answer is incorrect, the amount correct stays the same and it prints &quot;is no bueno:(&quot; if ec_abort == 0: rsp = question_with_response(&quot;What pet do I have?&quot;) if rsp == &quot;A dog&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite subject?&quot;) if rsp == &quot;Math&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 1: print(&quot;You scored 5/5&quot;) if ec_abort == 0: print (&quot;Slayyy you scored &quot; + str(correct) + &quot;/5&quot;) # If they don&#39;t use the &quot;Give me 100%&quot; option, ec_abort is still 0, allowing this step that gives the perentage correct to show . Hey queen, make sure to think out of the box when taking this quiz. You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number. Question: Are you ready? Question: How old am I? 16 is correct:) Question: What is my favorite color? Blue is correct:) Question: How many siblings to I have? Give me 100% BOOM 100% YOU ARE DONE You scored 5/5 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/myquiz",
            "relUrl": "/notebooks/myquiz",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Video Planning Script/Learnings on Others' Videos",
            "content": "My Job = Frontend Developer . Instructions for my role: . Describe Frontend designs and coding techniques. | Create and implement an effective frontend between humans and technology | Show frontend design artifacts (wire frames) | Describe any consideration you have made for customer requirements. | Indicate accommodations you have made for English Language Learners or those with Disabilities | Show any screens that are currently developed. | Describe Code and Styles Frontend development | HTML, Markdown, JavaScript | Cards, Tables, Blogging | Comments. Be sure to illustrate developers comments in code and how this will facilitate current and future understanding of the key portions of system. | . Screens: . Show group fastpage (explain how this is our frontend) | Show wire frame and briefly explain project | Describe cusomer requirements (what will the merch commisioner need to do? &lt; on group fastpage) | Show code for fastpage (html, markdown, javascript) | Show a table and blogs | try and use more captions and less talking | use side by side screens? | show creating of table? | . Updated Outline: . show wire frame and add captions about customer requirements and our stock API for project | Show VS code with frontend code (pause on certain parts and add arrows and captions) | mention how customer will need to input their specific amount of quanity but for now just will work same as joke API except will minus one when you click the button | show html table (with screenshot of table in Fastpages) | highlight endpoint where connects to backend (link to subdomain) | edit in picture of “failed to fetch” | show attempt to run locally while backend debugs and edit in image of “failed to fetch” with local IP address | show progress and how API shows up | add screen recording of attemting to click quantity (doesn’t work) | show use of blogs? | . Other Videos: . Group from APCSA (Period 2 Rebecca Su) . talked about weekly sprints (development, testing, deployment) | use issues on github to keep track of/assign work | very detailed uml and wire frames | have a post tracking all their progress for their project (list APIS, wesites, etc) | have a currency converter &lt; very intresting and accounting for all groups | . Group from APCSP (Drew Reed) . very descriptive uml on project (good to reference) | showed use of debugging | used CSS to create buttons on timer | very organized and end project will be very cool | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/video/plan",
            "relUrl": "/video/plan",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "College Board Notes 4.1",
            "content": "Internet . packet = a small amount of data sent over a network (each packet includes source and destination of information) | computer system = group of computing devices and programs working together for a joint purpose | computer network = group of interconnected computing devices capable of sending or receiving data -packet comtains data and meta data containung info used for routing info | . Packet Switching . message (file) is broken uo into packets and sent in any order. The packets are reassembled by the recipient’s device | routing = process of finding a path from sender to reciever | path between 2 comuting devices on a computer network = sequence of directly connected computing devices that begins at the sender and ends at the receiver | Bandwidth = maximum amount of data that can be sent in a fixed amount of time on a computer network (typically measured in bits per second) | . Layers to Internet . Network Access Layer | Network Access/Internet Layer Data Transmission (IP address) | Internet Layer (internet is scalable) | Transport Layer | . The Saclibility of the Internet . Autonomous Systems (AS) | Local Area Network (LAN) | The Internet . | World Wide Web is NOT the internet (linked data pages) | . . This is my diagram showing computer systems and networks . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/fourpointonenotes",
            "relUrl": "/collegeboard/fourpointonenotes",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Our API",
            "content": "import requests url = &quot;https://dnaber-languagetool.p.rapidapi.com/v2/languages&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;7798c19b40msh9672054d4a4cb3cp176d9cjsn9d6a5cf1b9bf&quot;, &quot;X-RapidAPI-Host&quot;: &quot;dnaber-languagetool.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) print(&quot;Languages Supported&quot;) languagelist = response.json() for language in languagelist: print(language[&quot;name&quot;], &quot; = &quot;, language[&quot;code&quot;]) . [{&#34;name&#34;:&#34;Arabic&#34;,&#34;code&#34;:&#34;ar&#34;,&#34;longCode&#34;:&#34;ar&#34;},{&#34;name&#34;:&#34;Asturian&#34;,&#34;code&#34;:&#34;ast&#34;,&#34;longCode&#34;:&#34;ast-ES&#34;},{&#34;name&#34;:&#34;Belarusian&#34;,&#34;code&#34;:&#34;be&#34;,&#34;longCode&#34;:&#34;be-BY&#34;},{&#34;name&#34;:&#34;Breton&#34;,&#34;code&#34;:&#34;br&#34;,&#34;longCode&#34;:&#34;br-FR&#34;},{&#34;name&#34;:&#34;Catalan&#34;,&#34;code&#34;:&#34;ca&#34;,&#34;longCode&#34;:&#34;ca-ES&#34;},{&#34;name&#34;:&#34;Catalan (Valencian)&#34;,&#34;code&#34;:&#34;ca&#34;,&#34;longCode&#34;:&#34;ca-ES-valencia&#34;},{&#34;name&#34;:&#34;Chinese&#34;,&#34;code&#34;:&#34;zh&#34;,&#34;longCode&#34;:&#34;zh-CN&#34;},{&#34;name&#34;:&#34;Danish&#34;,&#34;code&#34;:&#34;da&#34;,&#34;longCode&#34;:&#34;da-DK&#34;},{&#34;name&#34;:&#34;Dutch&#34;,&#34;code&#34;:&#34;nl&#34;,&#34;longCode&#34;:&#34;nl&#34;},{&#34;name&#34;:&#34;Dutch&#34;,&#34;code&#34;:&#34;nl&#34;,&#34;longCode&#34;:&#34;nl&#34;},{&#34;name&#34;:&#34;Dutch (Belgium)&#34;,&#34;code&#34;:&#34;nl&#34;,&#34;longCode&#34;:&#34;nl-BE&#34;},{&#34;name&#34;:&#34;English&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en&#34;},{&#34;name&#34;:&#34;English&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en&#34;},{&#34;name&#34;:&#34;English (Australian)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-AU&#34;},{&#34;name&#34;:&#34;English (Australian)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-AU&#34;},{&#34;name&#34;:&#34;English (Canadian)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-CA&#34;},{&#34;name&#34;:&#34;English (Canadian)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-CA&#34;},{&#34;name&#34;:&#34;English (GB)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-GB&#34;},{&#34;name&#34;:&#34;English (GB)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-GB&#34;},{&#34;name&#34;:&#34;English (New Zealand)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-NZ&#34;},{&#34;name&#34;:&#34;English (New Zealand)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-NZ&#34;},{&#34;name&#34;:&#34;English (South African)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-ZA&#34;},{&#34;name&#34;:&#34;English (South African)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-ZA&#34;},{&#34;name&#34;:&#34;English (US)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-US&#34;},{&#34;name&#34;:&#34;English (US)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-US&#34;},{&#34;name&#34;:&#34;Esperanto&#34;,&#34;code&#34;:&#34;eo&#34;,&#34;longCode&#34;:&#34;eo&#34;},{&#34;name&#34;:&#34;French&#34;,&#34;code&#34;:&#34;fr&#34;,&#34;longCode&#34;:&#34;fr&#34;},{&#34;name&#34;:&#34;French&#34;,&#34;code&#34;:&#34;fr&#34;,&#34;longCode&#34;:&#34;fr&#34;},{&#34;name&#34;:&#34;Galician&#34;,&#34;code&#34;:&#34;gl&#34;,&#34;longCode&#34;:&#34;gl-ES&#34;},{&#34;name&#34;:&#34;German&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de&#34;},{&#34;name&#34;:&#34;German&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de&#34;},{&#34;name&#34;:&#34;German (Austria)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-AT&#34;},{&#34;name&#34;:&#34;German (Austria)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-AT&#34;},{&#34;name&#34;:&#34;German (Germany)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-DE&#34;},{&#34;name&#34;:&#34;German (Germany)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-DE&#34;},{&#34;name&#34;:&#34;German (Swiss)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-CH&#34;},{&#34;name&#34;:&#34;German (Swiss)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-CH&#34;},{&#34;name&#34;:&#34;Greek&#34;,&#34;code&#34;:&#34;el&#34;,&#34;longCode&#34;:&#34;el-GR&#34;},{&#34;name&#34;:&#34;Irish&#34;,&#34;code&#34;:&#34;ga&#34;,&#34;longCode&#34;:&#34;ga-IE&#34;},{&#34;name&#34;:&#34;Italian&#34;,&#34;code&#34;:&#34;it&#34;,&#34;longCode&#34;:&#34;it&#34;},{&#34;name&#34;:&#34;Japanese&#34;,&#34;code&#34;:&#34;ja&#34;,&#34;longCode&#34;:&#34;ja-JP&#34;},{&#34;name&#34;:&#34;Khmer&#34;,&#34;code&#34;:&#34;km&#34;,&#34;longCode&#34;:&#34;km-KH&#34;},{&#34;name&#34;:&#34;Norwegian (Bokmål)&#34;,&#34;code&#34;:&#34;nb&#34;,&#34;longCode&#34;:&#34;nb&#34;},{&#34;name&#34;:&#34;Norwegian (Bokmål)&#34;,&#34;code&#34;:&#34;no&#34;,&#34;longCode&#34;:&#34;no&#34;},{&#34;name&#34;:&#34;Persian&#34;,&#34;code&#34;:&#34;fa&#34;,&#34;longCode&#34;:&#34;fa&#34;},{&#34;name&#34;:&#34;Polish&#34;,&#34;code&#34;:&#34;pl&#34;,&#34;longCode&#34;:&#34;pl-PL&#34;},{&#34;name&#34;:&#34;Portuguese&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt&#34;},{&#34;name&#34;:&#34;Portuguese (Angola preAO)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-AO&#34;},{&#34;name&#34;:&#34;Portuguese (Angola preAO)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-AO&#34;},{&#34;name&#34;:&#34;Portuguese (Brazil)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-BR&#34;},{&#34;name&#34;:&#34;Portuguese (Brazil)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-BR&#34;},{&#34;name&#34;:&#34;Portuguese (Moçambique preAO)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-MZ&#34;},{&#34;name&#34;:&#34;Portuguese (Moçambique preAO)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-MZ&#34;},{&#34;name&#34;:&#34;Portuguese (Portugal)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-PT&#34;},{&#34;name&#34;:&#34;Portuguese (Portugal)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-PT&#34;},{&#34;name&#34;:&#34;Romanian&#34;,&#34;code&#34;:&#34;ro&#34;,&#34;longCode&#34;:&#34;ro-RO&#34;},{&#34;name&#34;:&#34;Russian&#34;,&#34;code&#34;:&#34;ru&#34;,&#34;longCode&#34;:&#34;ru-RU&#34;},{&#34;name&#34;:&#34;Simple German&#34;,&#34;code&#34;:&#34;de-DE-x-simple-language&#34;,&#34;longCode&#34;:&#34;de-DE-x-simple-language&#34;},{&#34;name&#34;:&#34;Slovak&#34;,&#34;code&#34;:&#34;sk&#34;,&#34;longCode&#34;:&#34;sk-SK&#34;},{&#34;name&#34;:&#34;Slovenian&#34;,&#34;code&#34;:&#34;sl&#34;,&#34;longCode&#34;:&#34;sl-SI&#34;},{&#34;name&#34;:&#34;Spanish&#34;,&#34;code&#34;:&#34;es&#34;,&#34;longCode&#34;:&#34;es&#34;},{&#34;name&#34;:&#34;Spanish&#34;,&#34;code&#34;:&#34;es&#34;,&#34;longCode&#34;:&#34;es&#34;},{&#34;name&#34;:&#34;Spanish (voseo)&#34;,&#34;code&#34;:&#34;es&#34;,&#34;longCode&#34;:&#34;es-AR&#34;},{&#34;name&#34;:&#34;Swedish&#34;,&#34;code&#34;:&#34;sv&#34;,&#34;longCode&#34;:&#34;sv&#34;},{&#34;name&#34;:&#34;Tagalog&#34;,&#34;code&#34;:&#34;tl&#34;,&#34;longCode&#34;:&#34;tl-PH&#34;},{&#34;name&#34;:&#34;Tamil&#34;,&#34;code&#34;:&#34;ta&#34;,&#34;longCode&#34;:&#34;ta-IN&#34;},{&#34;name&#34;:&#34;Ukrainian&#34;,&#34;code&#34;:&#34;uk&#34;,&#34;longCode&#34;:&#34;uk-UA&#34;}] Languages Supported Arabic = ar Asturian = ast Belarusian = be Breton = br Catalan = ca Catalan (Valencian) = ca Chinese = zh Danish = da Dutch = nl Dutch = nl Dutch (Belgium) = nl English = en English = en English (Australian) = en English (Australian) = en English (Canadian) = en English (Canadian) = en English (GB) = en English (GB) = en English (New Zealand) = en English (New Zealand) = en English (South African) = en English (South African) = en English (US) = en English (US) = en Esperanto = eo French = fr French = fr Galician = gl German = de German = de German (Austria) = de German (Austria) = de German (Germany) = de German (Germany) = de German (Swiss) = de German (Swiss) = de Greek = el Irish = ga Italian = it Japanese = ja Khmer = km Norwegian (Bokmål) = nb Norwegian (Bokmål) = no Persian = fa Polish = pl Portuguese = pt Portuguese (Angola preAO) = pt Portuguese (Angola preAO) = pt Portuguese (Brazil) = pt Portuguese (Brazil) = pt Portuguese (Moçambique preAO) = pt Portuguese (Moçambique preAO) = pt Portuguese (Portugal) = pt Portuguese (Portugal) = pt Romanian = ro Russian = ru Simple German = de-DE-x-simple-language Slovak = sk Slovenian = sl Spanish = es Spanish = es Spanish (voseo) = es Swedish = sv Tagalog = tl Tamil = ta Ukrainian = uk . This is the proccess of gramatically checking the text. It displays the errors in the text and how to fix it. . import requests import json url = &quot;https://dnaber-languagetool.p.rapidapi.com/v2/check&quot; payload = &quot;language=en-US&amp;text=&quot; #checking in English bc of use of code&#39;en&#39; headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;X-RapidAPI-Key&quot;: &quot;7b146afe20msh92e84c02ae27c6ap1185b5jsnb7a574f24cbe&quot;, &quot;X-RapidAPI-Host&quot;: &quot;dnaber-languagetool.p.rapidapi.com&quot; } text = input(&quot;Please enter the text you would like checked&quot;) payload += text #this appends the string defined above to add the text that needs to be checked response = requests.request(&quot;POST&quot;, url, data=payload, headers=headers) # print(response.text) #print(json.dumps(response.json(), indent=4)) print(json.dumps(response.json()[&quot;matches&quot;], indent=4)) #the json.dumps formats the data to look better . [ { &#34;message&#34;: &#34;Possible spelling mistake found.&#34;, &#34;shortMessage&#34;: &#34;Spelling mistake&#34;, &#34;replacements&#34;: [ { &#34;value&#34;: &#34;Hello&#34; }, { &#34;value&#34;: &#34;Hellos&#34; } ], &#34;offset&#34;: 0, &#34;length&#34;: 6, &#34;context&#34;: { &#34;text&#34;: &#34;Helloe Im Alexa&#34;, &#34;offset&#34;: 0, &#34;length&#34;: 6 }, &#34;sentence&#34;: &#34;Helloe Im Alexa&#34;, &#34;type&#34;: { &#34;typeName&#34;: &#34;Other&#34; }, &#34;rule&#34;: { &#34;id&#34;: &#34;MORFOLOGIK_RULE_EN_US&#34;, &#34;description&#34;: &#34;Possible spelling mistake&#34;, &#34;issueType&#34;: &#34;misspelling&#34;, &#34;category&#34;: { &#34;id&#34;: &#34;TYPOS&#34;, &#34;name&#34;: &#34;Possible Typo&#34; }, &#34;isPremium&#34;: false }, &#34;ignoreForIncompleteSentence&#34;: false, &#34;contextForSureMatch&#34;: 0 }, { &#34;message&#34;: &#34;Possible spelling mistake found.&#34;, &#34;shortMessage&#34;: &#34;Spelling mistake&#34;, &#34;replacements&#34;: [ { &#34;value&#34;: &#34;I&#39;m&#34; } ], &#34;offset&#34;: 7, &#34;length&#34;: 2, &#34;context&#34;: { &#34;text&#34;: &#34;Helloe Im Alexa&#34;, &#34;offset&#34;: 7, &#34;length&#34;: 2 }, &#34;sentence&#34;: &#34;Helloe Im Alexa&#34;, &#34;type&#34;: { &#34;typeName&#34;: &#34;Other&#34; }, &#34;rule&#34;: { &#34;id&#34;: &#34;EN_CONTRACTION_SPELLING&#34;, &#34;description&#34;: &#34;Spelling of English contractions&#34;, &#34;issueType&#34;: &#34;misspelling&#34;, &#34;category&#34;: { &#34;id&#34;: &#34;TYPOS&#34;, &#34;name&#34;: &#34;Possible Typo&#34; }, &#34;isPremium&#34;: false }, &#34;ignoreForIncompleteSentence&#34;: false, &#34;contextForSureMatch&#34;: 0 } ] .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/API/SpellCheck",
            "relUrl": "/API/SpellCheck",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "College Board Notes",
            "content": "College Board Notes 1.4 . Types of Errors . Logic Error (mistake in algorith/program and behaves incorrectly or unexpectedly) | Syntax Error (mistake in program where rules of programming lang are not followed) | Run-time Error ( mistake in program that occurs during execution of program) | Overflow error (occurs when a computer attempts to handle a number that is outside of the defined range of value) | . Effective Ways to Find/Correct Errors . test cases | hand tracing | visualizations | debggers | adding extra output statment(s) | . Test, test, test! . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/notes",
            "relUrl": "/collegeboard/notes",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;7798c19b40msh9672054d4a4cb3cp176d9cjsn9d6a5cf1b9bf&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;7798c19b40msh9672054d4a4cb3cp176d9cjsn9d6a5cf1b9bf&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1500,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29499,&#34;totalExchanges&#34;:173,&#34;totalMarketCap&#34;:&#34;983612677451&#34;,&#34;total24hVolume&#34;:&#34;62240853493&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;384354342963&#34;,&#34;price&#34;:&#34;20048.365017211556&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.09&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20051.438940241358&#34;,&#34;20112.942136659854&#34;,&#34;20157.819968805998&#34;,&#34;20254.029991435713&#34;,&#34;20303.466331336567&#34;,&#34;20352.46379557382&#34;,&#34;20340.736960702463&#34;,&#34;20383.68761580728&#34;,&#34;20327.56610010769&#34;,&#34;20249.0598171069&#34;,&#34;20216.33733971908&#34;,&#34;20183.62088115384&#34;,&#34;20159.744112050765&#34;,&#34;20135.103620334423&#34;,&#34;20152.838726388378&#34;,&#34;20223.999055486038&#34;,&#34;20188.386841136497&#34;,&#34;20099.650776087008&#34;,&#34;20022.525302913724&#34;,&#34;20060.360700925474&#34;,&#34;20058.49372151537&#34;,&#34;20101.79019444109&#34;,&#34;20068.60680042962&#34;,&#34;20037.990245449524&#34;,&#34;20040.006424632564&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;34448619621&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166806840532&#34;,&#34;price&#34;:&#34;1363.7268444859621&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.20&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1349.1166752669458&#34;,&#34;1351.4752396724552&#34;,&#34;1352.7565855474788&#34;,&#34;1364.7069535474543&#34;,&#34;1375.2332279379189&#34;,&#34;1375.0120085043593&#34;,&#34;1372.8560956800545&#34;,&#34;1376.1109732749908&#34;,&#34;1374.2091487475132&#34;,&#34;1367.8770624662602&#34;,&#34;1366.413446523702&#34;,&#34;1362.598875204337&#34;,&#34;1360.3636987191837&#34;,&#34;1358.3640048395087&#34;,&#34;1360.4342504890021&#34;,&#34;1369.213281754299&#34;,&#34;1368.3676032576047&#34;,&#34;1364.1360571475047&#34;,&#34;1363.3432991494524&#34;,&#34;1364.0707758574745&#34;,&#34;1363.3606085887561&#34;,&#34;1364.148825121332&#34;,&#34;1361.3954792114398&#34;,&#34;1359.0031784082305&#34;,&#34;1360.6275497370877&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;11436403892&#34;,&#34;btcPrice&#34;:&#34;0.0680218483310335&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68212126851&#34;,&#34;price&#34;:&#34;0.9999934382419505&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.26&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0004730164696796&#34;,&#34;0.9996925245670222&#34;,&#34;1.0003305556540378&#34;,&#34;0.9991437132975184&#34;,&#34;0.9997206896584828&#34;,&#34;1.0003229307902617&#34;,&#34;1.0002174675069595&#34;,&#34;0.999925766541416&#34;,&#34;1.000708618241012&#34;,&#34;1.0010737689896891&#34;,&#34;1.0002632048681543&#34;,&#34;1.00097822584521&#34;,&#34;1.0002453605323327&#34;,&#34;1.0005499753502725&#34;,&#34;0.9999702733020642&#34;,&#34;0.9994598707479958&#34;,&#34;1.0012863570809547&#34;,&#34;1.0016448157620703&#34;,&#34;0.9996482331493484&#34;,&#34;1.0004215336032052&#34;,&#34;0.9999570213425627&#34;,&#34;0.9999224272643209&#34;,&#34;1.0007392056569566&#34;,&#34;1.000325844124763&#34;,&#34;1.0001333206640304&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;40191076559&#34;,&#34;btcPrice&#34;:&#34;0.000049879051852032&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46264937814&#34;,&#34;price&#34;:&#34;1.0001439253592908&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.15&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0003790781178878&#34;,&#34;0.9997290863175305&#34;,&#34;1.0003038765412497&#34;,&#34;0.9991408722230394&#34;,&#34;0.9997209463954263&#34;,&#34;1.0001156279108188&#34;,&#34;1.0002132589197983&#34;,&#34;0.999979672700525&#34;,&#34;1.0007058659518255&#34;,&#34;1.0009680461396826&#34;,&#34;1.0002125205262982&#34;,&#34;1.0008248585454766&#34;,&#34;1.0001965553835719&#34;,&#34;1.0005780931027144&#34;,&#34;1.0000088554796078&#34;,&#34;0.9994586243665149&#34;,&#34;1.0011869248897938&#34;,&#34;1.0015496148117664&#34;,&#34;0.9997673802296243&#34;,&#34;1.0003598578573154&#34;,&#34;1.0000778482427792&#34;,&#34;0.9998861638814902&#34;,&#34;1.0006873238669673&#34;,&#34;1.0002882569057026&#34;,&#34;1.0001093290939425&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3357548862&#34;,&#34;btcPrice&#34;:&#34;0.000049886558056014&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;41778239691&#34;,&#34;price&#34;:&#34;288.372850606221&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.62&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.0339632140167&#34;,&#34;293.22632610181876&#34;,&#34;293.9558805163323&#34;,&#34;295.03284994285843&#34;,&#34;297.1816835216467&#34;,&#34;296.57165154567053&#34;,&#34;296.508723433339&#34;,&#34;296.27500319415884&#34;,&#34;295.95929231412583&#34;,&#34;295.2368476142224&#34;,&#34;294.87128482644766&#34;,&#34;295.0512570831633&#34;,&#34;294.5306048069131&#34;,&#34;294.30050189031186&#34;,&#34;294.22403335151813&#34;,&#34;294.80827509690437&#34;,&#34;294.33033971155965&#34;,&#34;293.96591310440675&#34;,&#34;293.66576108995565&#34;,&#34;293.99310192770326&#34;,&#34;293.69072498915045&#34;,&#34;293.4540279331547&#34;,&#34;293.23188737664185&#34;,&#34;293.09086576852025&#34;,&#34;290.12424881390194&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;864595768&#34;,&#34;btcPrice&#34;:&#34;0.01438385875150679&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24922289815&#34;,&#34;price&#34;:&#34;0.4998596422677392&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.07&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4936121327589804&#34;,&#34;0.49360848838582033&#34;,&#34;0.49055029363897007&#34;,&#34;0.49224624716168&#34;,&#34;0.49591130268111816&#34;,&#34;0.4951932790046478&#34;,&#34;0.49595231887605623&#34;,&#34;0.5006001796445517&#34;,&#34;0.5025322706608095&#34;,&#34;0.4988268286009171&#34;,&#34;0.49511942477701776&#34;,&#34;0.4937997408415523&#34;,&#34;0.4938461715574201&#34;,&#34;0.4949672333116952&#34;,&#34;0.49671660295169745&#34;,&#34;0.4983157134968618&#34;,&#34;0.4984385599250301&#34;,&#34;0.4958643382230643&#34;,&#34;0.4954888154508337&#34;,&#34;0.4956388106133542&#34;,&#34;0.49687913330335365&#34;,&#34;0.49710524663432437&#34;,&#34;0.4967817423491458&#34;,&#34;0.4960523063301114&#34;,&#34;0.5002588730645078&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;1897470292&#34;,&#34;btcPrice&#34;:&#34;0.000024932688617681&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21378094996&#34;,&#34;price&#34;:&#34;0.9998341667790431&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.28&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.000400357879546&#34;,&#34;0.9997126067360349&#34;,&#34;1.0002864262312419&#34;,&#34;0.9990306013607333&#34;,&#34;0.9996281277025894&#34;,&#34;1.0001801913869788&#34;,&#34;1.000112080834013&#34;,&#34;0.9998221448047259&#34;,&#34;1.0006914671738822&#34;,&#34;1.0010002833226768&#34;,&#34;1.0001548975570813&#34;,&#34;1.0008893072028962&#34;,&#34;1.0001675248577555&#34;,&#34;1.0004436296308015&#34;,&#34;0.9998831620327592&#34;,&#34;0.9993790802417244&#34;,&#34;1.0011655146499898&#34;,&#34;1.0015608327721508&#34;,&#34;0.9996737479147666&#34;,&#34;1.0003874163381075&#34;,&#34;0.999855178764249&#34;,&#34;0.9997695857566036&#34;,&#34;1.0006363550917916&#34;,&#34;1.0003015517514349&#34;,&#34;1.0001110800082091&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6496557308&#34;,&#34;btcPrice&#34;:&#34;0.000049871107490346&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13375082160&#34;,&#34;price&#34;:&#34;0.4298943742278509&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.42939125650203785&#34;,&#34;0.43033129399842107&#34;,&#34;0.431078111896934&#34;,&#34;0.4318859878379686&#34;,&#34;0.4357131618197005&#34;,&#34;0.43568381169625015&#34;,&#34;0.4346962887724402&#34;,&#34;0.4350131875819571&#34;,&#34;0.43469738319003864&#34;,&#34;0.43326982424487304&#34;,&#34;0.43263774502568014&#34;,&#34;0.43191341474300415&#34;,&#34;0.4312921949359245&#34;,&#34;0.4311011590020075&#34;,&#34;0.4302280684331196&#34;,&#34;0.4319813231178509&#34;,&#34;0.43173383257478504&#34;,&#34;0.4303997167352433&#34;,&#34;0.429398559339474&#34;,&#34;0.4299648257425132&#34;,&#34;0.4297343398397519&#34;,&#34;0.42997828353732326&#34;,&#34;0.42937033740290426&#34;,&#34;0.42883620108710657&#34;,&#34;0.42920069115240905&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;747679271&#34;,&#34;btcPrice&#34;:&#34;0.000021442864485896&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11976043875&#34;,&#34;price&#34;:&#34;33.71428257698631&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.19&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.75977114711794&#34;,&#34;33.875549349957005&#34;,&#34;34.01919374746187&#34;,&#34;34.25583589027168&#34;,&#34;34.33192527709708&#34;,&#34;34.34811446907118&#34;,&#34;34.327771426896376&#34;,&#34;34.39163652190693&#34;,&#34;34.37437113302313&#34;,&#34;34.210536634835925&#34;,&#34;34.010295904098804&#34;,&#34;34.032297629030815&#34;,&#34;34.0205375439139&#34;,&#34;33.986450347226565&#34;,&#34;33.97284356925897&#34;,&#34;34.12322348136839&#34;,&#34;34.04818308388973&#34;,&#34;33.90841528770745&#34;,&#34;33.922236226998955&#34;,&#34;33.895084271212774&#34;,&#34;33.877508596833344&#34;,&#34;33.769632367031555&#34;,&#34;33.71898828195219&#34;,&#34;33.69001212339477&#34;,&#34;33.72267866886839&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;728230383&#34;,&#34;btcPrice&#34;:&#34;0.001681647483375454&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8490771840&#34;,&#34;price&#34;:&#34;0.06399881605101142&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.71&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06430001652573364&#34;,&#34;0.06437036408966565&#34;,&#34;0.06456880597204392&#34;,&#34;0.06502233408584714&#34;,&#34;0.06503812200415436&#34;,&#34;0.06503998592742274&#34;,&#34;0.06588520090979873&#34;,&#34;0.06601129659338578&#34;,&#34;0.06581176470778156&#34;,&#34;0.06553294673649296&#34;,&#34;0.06533678130300317&#34;,&#34;0.06510197364336227&#34;,&#34;0.06525813392333525&#34;,&#34;0.06507123735868817&#34;,&#34;0.06508747877233641&#34;,&#34;0.06537694106515178&#34;,&#34;0.06521416310707462&#34;,&#34;0.06486795280882116&#34;,&#34;0.06440018609785521&#34;,&#34;0.06431000551190193&#34;,&#34;0.06399099516985579&#34;,&#34;0.0639611688502269&#34;,&#34;0.06388198077385676&#34;,&#34;0.06396888900414123&#34;,&#34;0.06390412971383753&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;549013562&#34;,&#34;btcPrice&#34;:&#34;0.00000319222121086&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7359047093&#34;,&#34;price&#34;:&#34;0.8404891786387144&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.30&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8437744357312483&#34;,&#34;0.8509094697048541&#34;,&#34;0.8529940032792178&#34;,&#34;0.8540440777034858&#34;,&#34;0.8516241240942773&#34;,&#34;0.8496744646261335&#34;,&#34;0.8469999329838124&#34;,&#34;0.8481864165795252&#34;,&#34;0.8466077838956056&#34;,&#34;0.84420107235308&#34;,&#34;0.845768857513781&#34;,&#34;0.8474973485957346&#34;,&#34;0.8463925672110996&#34;,&#34;0.8432430183950218&#34;,&#34;0.8407816804410218&#34;,&#34;0.8419007497492077&#34;,&#34;0.8398864867524278&#34;,&#34;0.8393073071328305&#34;,&#34;0.8429567390022452&#34;,&#34;0.8430941255831178&#34;,&#34;0.8444119779861358&#34;,&#34;0.8446502533596543&#34;,&#34;0.8422100742264239&#34;,&#34;0.8398203812650741&#34;,&#34;0.8392859340943655&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;508406775&#34;,&#34;btcPrice&#34;:&#34;0.000041923078411489&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7337905156&#34;,&#34;price&#34;:&#34;6.3785000633196605&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.45&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.39825823489953&#34;,&#34;6.409513679699773&#34;,&#34;6.429741803717237&#34;,&#34;6.456004351045777&#34;,&#34;6.48959781266168&#34;,&#34;6.502842344430388&#34;,&#34;6.494975652303574&#34;,&#34;6.498153272584972&#34;,&#34;6.477193762524708&#34;,&#34;6.4749696116534&#34;,&#34;6.446783196251528&#34;,&#34;6.4451248697841494&#34;,&#34;6.445036089260377&#34;,&#34;6.436040246095806&#34;,&#34;6.435080457086081&#34;,&#34;6.463836456516857&#34;,&#34;6.450387542070514&#34;,&#34;6.421359237807177&#34;,&#34;6.391124134834344&#34;,&#34;6.389976567958392&#34;,&#34;6.385572049998837&#34;,&#34;6.392125200223458&#34;,&#34;6.382091060151221&#34;,&#34;6.386981587242469&#34;,&#34;6.371255606973179&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;218901130&#34;,&#34;btcPrice&#34;:&#34;0.000318155623056728&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6654002522&#34;,&#34;price&#34;:&#34;0.000011286461059515&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.56&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011388926295804&#34;,&#34;0.000011400691835227&#34;,&#34;0.000011433362145591&#34;,&#34;0.000011491345676996&#34;,&#34;0.000011523072429884&#34;,&#34;0.000011526229724601&#34;,&#34;0.000011561968127599&#34;,&#34;0.000011585318815413&#34;,&#34;0.000011497977586636&#34;,&#34;0.000011468707147471&#34;,&#34;0.000011434052857603&#34;,&#34;0.00001144032221974&#34;,&#34;0.000011461144205322&#34;,&#34;0.000011476554808705&#34;,&#34;0.000011469743005642&#34;,&#34;0.00001147197624755&#34;,&#34;0.000011424815330699&#34;,&#34;0.000011366708333454&#34;,&#34;0.0000113570498162&#34;,&#34;0.000011330129168691&#34;,&#34;0.000011283648128574&#34;,&#34;0.000011278387257469&#34;,&#34;0.000011289529854914&#34;,&#34;0.000011276233126799&#34;,&#34;0.000011273560500492&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;295884874&#34;,&#34;btcPrice&#34;:&#34;5.6296167e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6330102326&#34;,&#34;price&#34;:&#34;0.9999136316591463&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.12&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.0001442146345538&#34;,&#34;0.9995536933387662&#34;,&#34;0.9998892692241316&#34;,&#34;0.9989521525504824&#34;,&#34;0.9994530889305914&#34;,&#34;0.9997283495960755&#34;,&#34;0.9998553697654398&#34;,&#34;0.9995096259449162&#34;,&#34;1.00014999944705&#34;,&#34;1.000547118017383&#34;,&#34;1.0000224010848462&#34;,&#34;1.0003550198188038&#34;,&#34;1.0000223644977213&#34;,&#34;1.0001689023102156&#34;,&#34;0.9997500246036027&#34;,&#34;0.999188166117977&#34;,&#34;1.0005244452746045&#34;,&#34;1.0009465956605519&#34;,&#34;0.999923212227354&#34;,&#34;0.999943746062425&#34;,&#34;0.9998895246210896&#34;,&#34;0.9996584146724661&#34;,&#34;1.00032070114622&#34;,&#34;1.0001058587674057&#34;,&#34;0.9999037241650416&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;124698370&#34;,&#34;btcPrice&#34;:&#34;0.000049875071149229&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5777074397&#34;,&#34;price&#34;:&#34;0.06256558134968382&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.36&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06236865465429385&#34;,&#34;0.06246589991130288&#34;,&#34;0.06240843270681821&#34;,&#34;0.062249161574027316&#34;,&#34;0.06223099830897218&#34;,&#34;0.06264617941013605&#34;,&#34;0.06281452510294&#34;,&#34;0.06276275207762542&#34;,&#34;0.06268343841288901&#34;,&#34;0.06255691626086467&#34;,&#34;0.0624515709368335&#34;,&#34;0.062470443380712434&#34;,&#34;0.06256137344897823&#34;,&#34;0.06269756605100256&#34;,&#34;0.06269254530093321&#34;,&#34;0.06269809717602999&#34;,&#34;0.06270258509423554&#34;,&#34;0.06262935941097252&#34;,&#34;0.0625525372842027&#34;,&#34;0.0626080433578714&#34;,&#34;0.06263852382635865&#34;,&#34;0.06265458985596026&#34;,&#34;0.06258971581342093&#34;,&#34;0.06255323825419136&#34;,&#34;0.06256018276012307&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;339553441&#34;,&#34;btcPrice&#34;:&#34;0.000003120732353784&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5506331908&#34;,&#34;price&#34;:&#34;1363.1831262096398&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.91&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1349.13607829603&#34;,&#34;1351.4689477854226&#34;,&#34;1354.685548232379&#34;,&#34;1361.146588456366&#34;,&#34;1373.1112591782544&#34;,&#34;1375.4567308292258&#34;,&#34;1373.5021921077062&#34;,&#34;1374.5798088672896&#34;,&#34;1374.2047922199295&#34;,&#34;1370.3789875745763&#34;,&#34;1366.6984725193515&#34;,&#34;1364.4398969103008&#34;,&#34;1361.7692633130323&#34;,&#34;1360.874730475116&#34;,&#34;1360.5880536977058&#34;,&#34;1367.7933188873656&#34;,&#34;1371.0864182649937&#34;,&#34;1366.2849418001506&#34;,&#34;1363.6612621508384&#34;,&#34;1366.3897957603679&#34;,&#34;1362.6017418911797&#34;,&#34;1363.558194381478&#34;,&#34;1361.1032201925939&#34;,&#34;1358.1013179936974&#34;,&#34;1359.5832745179157&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;190296605&#34;,&#34;btcPrice&#34;:&#34;0.06801276462109211&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5412801667&#34;,&#34;price&#34;:&#34;6.970342314938424&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;3.30&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.7736642117361905&#34;,&#34;6.756076217414185&#34;,&#34;6.793449625987095&#34;,&#34;6.865859893412923&#34;,&#34;6.937483195481218&#34;,&#34;6.979515536920047&#34;,&#34;6.9478029429015224&#34;,&#34;6.9284625247560845&#34;,&#34;6.907914104712911&#34;,&#34;6.874769405900166&#34;,&#34;6.896114575710537&#34;,&#34;6.902438327868096&#34;,&#34;6.863039316865727&#34;,&#34;6.8298809342946445&#34;,&#34;6.841694456601706&#34;,&#34;6.90374298301861&#34;,&#34;6.8980780970926565&#34;,&#34;6.846666245892528&#34;,&#34;6.840143513460894&#34;,&#34;6.886346571294433&#34;,&#34;6.894919048207694&#34;,&#34;6.8980327967208135&#34;,&#34;6.897799219282073&#34;,&#34;6.917336871562214&#34;,&#34;6.9384106402636725&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;240553805&#34;,&#34;btcPrice&#34;:&#34;0.000347676347121293&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5075125889&#34;,&#34;price&#34;:&#34;17.140177883740314&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.60&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.254732588660875&#34;,&#34;17.31200366632601&#34;,&#34;17.356953304800275&#34;,&#34;17.445230081280297&#34;,&#34;17.540093125466566&#34;,&#34;17.549902978316823&#34;,&#34;17.521869854955458&#34;,&#34;17.57089756434244&#34;,&#34;17.511675802061724&#34;,&#34;17.428511702438602&#34;,&#34;17.401335012223097&#34;,&#34;17.367848226413336&#34;,&#34;17.336368659218273&#34;,&#34;17.319601875912156&#34;,&#34;17.320429202377582&#34;,&#34;17.375834229410586&#34;,&#34;17.37115155021162&#34;,&#34;17.337499378166246&#34;,&#34;17.29492516682681&#34;,&#34;17.27482970087828&#34;,&#34;17.236186499512122&#34;,&#34;17.23084707590994&#34;,&#34;17.187481717207028&#34;,&#34;17.155821443785648&#34;,&#34;17.14078782290297&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;253512052&#34;,&#34;btcPrice&#34;:&#34;0.000854941431334947&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4906795698&#34;,&#34;price&#34;:&#34;20047.65670389833&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.00&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20051.22405616085&#34;,&#34;20110.602103151356&#34;,&#34;20155.552573913872&#34;,&#34;20251.49133520362&#34;,&#34;20298.639411610195&#34;,&#34;20350.38567650615&#34;,&#34;20339.07972321146&#34;,&#34;20380.795072455694&#34;,&#34;20324.41856067999&#34;,&#34;20246.294276116678&#34;,&#34;20211.982370889044&#34;,&#34;20181.299321117534&#34;,&#34;20155.621076440202&#34;,&#34;20130.24398537466&#34;,&#34;20151.81371000324&#34;,&#34;20220.458796392188&#34;,&#34;20191.06461094672&#34;,&#34;20102.3711890372&#34;,&#34;20023.818445349818&#34;,&#34;20063.904548084807&#34;,&#34;20060.09333245677&#34;,&#34;20106.126030789226&#34;,&#34;20068.970588505534&#34;,&#34;20037.981397876472&#34;,&#34;20038.946703723883&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;40636617&#34;,&#34;btcPrice&#34;:&#34;0.9999646697716937&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4081058736&#34;,&#34;price&#34;:&#34;13.109745393055944&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.04&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.874689417804111&#34;,&#34;12.977240987750184&#34;,&#34;12.999694810987828&#34;,&#34;13.05809448077896&#34;,&#34;13.134456340172274&#34;,&#34;13.166373400713976&#34;,&#34;13.174046618107784&#34;,&#34;13.156595139367123&#34;,&#34;13.136832518684233&#34;,&#34;13.059151743839621&#34;,&#34;13.024245747988846&#34;,&#34;13.012560239822703&#34;,&#34;12.998975121153673&#34;,&#34;12.998577583467394&#34;,&#34;12.961451954944232&#34;,&#34;13.060564440903033&#34;,&#34;13.110658052250319&#34;,&#34;13.099438593619361&#34;,&#34;13.13330326447949&#34;,&#34;13.33452783192435&#34;,&#34;13.373831271270106&#34;,&#34;13.343650016008963&#34;,&#34;13.181674409038528&#34;,&#34;13.131683725387289&#34;,&#34;13.11536231838439&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;309996311&#34;,&#34;btcPrice&#34;:&#34;0.000653905960999872&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3936402224&#34;,&#34;price&#34;:&#34;15.643761032184168&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.08&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.560986349984056&#34;,&#34;15.561097044869294&#34;,&#34;15.520784658634735&#34;,&#34;15.569346159010081&#34;,&#34;15.638549620210085&#34;,&#34;15.735124066059186&#34;,&#34;15.725775504001712&#34;,&#34;15.757115892473582&#34;,&#34;15.718908551335334&#34;,&#34;15.673810075767081&#34;,&#34;15.65842199459123&#34;,&#34;15.651646315234636&#34;,&#34;15.638815307350377&#34;,&#34;15.638325526594082&#34;,&#34;15.630250194419004&#34;,&#34;15.770101867167902&#34;,&#34;15.772787444807776&#34;,&#34;15.726419071810144&#34;,&#34;15.730397527991796&#34;,&#34;15.706278363014619&#34;,&#34;15.644427965881071&#34;,&#34;15.661521309252834&#34;,&#34;15.65810007258811&#34;,&#34;15.657230878915703&#34;,&#34;15.653006930210385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;16331845&#34;,&#34;btcPrice&#34;:&#34;0.000780301087832049&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3816060260&#34;,&#34;price&#34;:&#34;53.84948369214034&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.88&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.290318948555985&#34;,&#34;54.34626044318356&#34;,&#34;54.51609336019526&#34;,&#34;54.71164008880007&#34;,&#34;54.84017873250239&#34;,&#34;54.85783258935826&#34;,&#34;54.84912409601398&#34;,&#34;54.79423800415394&#34;,&#34;54.77093043110981&#34;,&#34;54.48254700568355&#34;,&#34;54.35863553823271&#34;,&#34;54.35097944334183&#34;,&#34;54.422181211169935&#34;,&#34;54.4489516734391&#34;,&#34;54.48573164038176&#34;,&#34;54.566006895097175&#34;,&#34;54.60169376918578&#34;,&#34;54.434757779526166&#34;,&#34;54.23335179752326&#34;,&#34;54.413459080815954&#34;,&#34;54.21240080510803&#34;,&#34;54.29942643192169&#34;,&#34;54.14247458562991&#34;,&#34;54.048141904913244&#34;,&#34;53.830450120278314&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;414799436&#34;,&#34;btcPrice&#34;:&#34;0.002685978814028499&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3291898159&#34;,&#34;price&#34;:&#34;24.66056515734731&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.08&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.68367396586351&#34;,&#34;24.727036895780905&#34;,&#34;24.763295856196095&#34;,&#34;24.910218336026045&#34;,&#34;25.00389208839861&#34;,&#34;25.02149477638343&#34;,&#34;25.038245964336557&#34;,&#34;25.10263308087383&#34;,&#34;25.055084523451587&#34;,&#34;24.953428269092957&#34;,&#34;24.910919655194686&#34;,&#34;24.875936324284226&#34;,&#34;24.84671933295274&#34;,&#34;24.828862066050032&#34;,&#34;24.846952016930494&#34;,&#34;24.962693812346263&#34;,&#34;24.917387870404692&#34;,&#34;24.806139246634455&#34;,&#34;24.74429478499735&#34;,&#34;24.780282567891753&#34;,&#34;24.77215711531799&#34;,&#34;24.782999234672975&#34;,&#34;24.733584769696286&#34;,&#34;24.691015340268255&#34;,&#34;24.666234967252606&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;50721623&#34;,&#34;btcPrice&#34;:&#34;0.001230053679498362&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3275220951&#34;,&#34;price&#34;:&#34;28.15861108739772&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.09&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.570158653943103&#34;,&#34;27.588406181551&#34;,&#34;27.632000320786197&#34;,&#34;27.72407252402464&#34;,&#34;28.315134280524177&#34;,&#34;28.701663622553088&#34;,&#34;28.455510043787736&#34;,&#34;28.462425971003423&#34;,&#34;28.431530396764664&#34;,&#34;28.27063736534509&#34;,&#34;28.144183615836692&#34;,&#34;28.154520421670963&#34;,&#34;28.240843430286514&#34;,&#34;28.318006504862765&#34;,&#34;28.299833108837987&#34;,&#34;28.329928166122407&#34;,&#34;28.27078454554885&#34;,&#34;28.13957915693539&#34;,&#34;28.037422192263545&#34;,&#34;28.02538763544355&#34;,&#34;27.990684342238957&#34;,&#34;27.99587068353575&#34;,&#34;27.980180249457508&#34;,&#34;27.96831699810348&#34;,&#34;28.017446779311992&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;640535452&#34;,&#34;btcPrice&#34;:&#34;0.001404534038722036&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2707667553&#34;,&#34;price&#34;:&#34;148.90777553169121&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.91&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.0468911817187&#34;,&#34;146.24477782260104&#34;,&#34;146.1611566569247&#34;,&#34;146.98453497183345&#34;,&#34;147.5235053627857&#34;,&#34;147.81325448931747&#34;,&#34;148.28163857932623&#34;,&#34;149.09225665366174&#34;,&#34;147.89654979841282&#34;,&#34;145.94227441308016&#34;,&#34;145.47852845356343&#34;,&#34;145.43911678899732&#34;,&#34;145.13011985927878&#34;,&#34;145.01926185302602&#34;,&#34;145.05380463743765&#34;,&#34;145.5189388138254&#34;,&#34;144.94121932498405&#34;,&#34;144.55169371872742&#34;,&#34;144.03637609256356&#34;,&#34;144.0602822952893&#34;,&#34;143.9422537624223&#34;,&#34;144.01800973377962&#34;,&#34;144.85743594518297&#34;,&#34;145.90656965474264&#34;,&#34;146.43871992411874&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;133434528&#34;,&#34;btcPrice&#34;:&#34;0.00742742739389739&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2467767343&#34;,&#34;price&#34;:&#34;0.3517782161281549&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.3515342629988674&#34;,&#34;0.3521676081477334&#34;,&#34;0.35309919565030656&#34;,&#34;0.3541903724348078&#34;,&#34;0.3566526799226524&#34;,&#34;0.3568785361406288&#34;,&#34;0.356277927477052&#34;,&#34;0.35771179232442063&#34;,&#34;0.3576900736402804&#34;,&#34;0.35714880263121757&#34;,&#34;0.3558025051327707&#34;,&#34;0.3549060979115252&#34;,&#34;0.3544949322189096&#34;,&#34;0.35419673898063&#34;,&#34;0.3545814398327581&#34;,&#34;0.3560563698021784&#34;,&#34;0.35476940248868055&#34;,&#34;0.35303138884975377&#34;,&#34;0.3526138360299577&#34;,&#34;0.353297325772352&#34;,&#34;0.3530050986834627&#34;,&#34;0.3519348960977679&#34;,&#34;0.3512839084444219&#34;,&#34;0.35035540536790366&#34;,&#34;0.35085105792254034&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;144267788&#34;,&#34;btcPrice&#34;:&#34;0.000017546479018421&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2437405709&#34;,&#34;price&#34;:&#34;0.12063066323232836&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.44&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11886242818438897&#34;,&#34;0.11904460107249429&#34;,&#34;0.11897292310970312&#34;,&#34;0.11903996874083529&#34;,&#34;0.11937706226353863&#34;,&#34;0.11928353420436945&#34;,&#34;0.1193565730892674&#34;,&#34;0.11973240195034526&#34;,&#34;0.11981307931058192&#34;,&#34;0.11920048145769879&#34;,&#34;0.11897308489799317&#34;,&#34;0.11911213921537671&#34;,&#34;0.11882743355055038&#34;,&#34;0.11868474386838856&#34;,&#34;0.11878227754760867&#34;,&#34;0.11974550069912294&#34;,&#34;0.11958643330478903&#34;,&#34;0.11927337184798883&#34;,&#34;0.11957351041625688&#34;,&#34;0.11944049884817015&#34;,&#34;0.12009378998253879&#34;,&#34;0.12024109052539109&#34;,&#34;0.12017728479638659&#34;,&#34;0.12012660542021919&#34;,&#34;0.12022267745313032&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;220566302&#34;,&#34;btcPrice&#34;:&#34;0.000006016982588294&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2276566125&#34;,&#34;price&#34;:&#34;118.99631691356878&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.64&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.31973609743602&#34;,&#34;122.22980221659442&#34;,&#34;122.20905014823225&#34;,&#34;122.74951121547188&#34;,&#34;123.19407940957747&#34;,&#34;122.98427770012786&#34;,&#34;122.7489561074102&#34;,&#34;122.622367281349&#34;,&#34;122.2248259758892&#34;,&#34;121.53652687792291&#34;,&#34;121.05542080331115&#34;,&#34;121.08144019937376&#34;,&#34;121.3486844528348&#34;,&#34;121.35241663771652&#34;,&#34;121.4308975310673&#34;,&#34;121.83807088869149&#34;,&#34;121.79108869683151&#34;,&#34;121.38727041457742&#34;,&#34;120.77014246462569&#34;,&#34;120.9730955171752&#34;,&#34;120.81712651964756&#34;,&#34;120.67586343768751&#34;,&#34;120.35934093743896&#34;,&#34;119.33573062080143&#34;,&#34;118.92020484427697&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;236289638&#34;,&#34;btcPrice&#34;:&#34;0.005935462408600913&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2254967512&#34;,&#34;price&#34;:&#34;20043.97749206499&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.40&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20050.866782919587&#34;,&#34;20079.593668466954&#34;,&#34;20158.93074005341&#34;,&#34;20211.814480937664&#34;,&#34;20307.580914788625&#34;,&#34;20353.1967711348&#34;,&#34;20335.218938308455&#34;,&#34;20375.58916773032&#34;,&#34;20340.90091666203&#34;,&#34;20284.80368318787&#34;,&#34;20235.020272755173&#34;,&#34;20214.37272239842&#34;,&#34;20157.58477689183&#34;,&#34;20148.427911440165&#34;,&#34;20139.404745478332&#34;,&#34;20195.51476083255&#34;,&#34;20218.207717425983&#34;,&#34;20128.86850120113&#34;,&#34;20006.9744546404&#34;,&#34;20060.410623139804&#34;,&#34;20033.996371801375&#34;,&#34;20098.47310976815&#34;,&#34;20097.464012404307&#34;,&#34;20046.809041658624&#34;,&#34;20049.799901903058&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;24085498&#34;,&#34;btcPrice&#34;:&#34;1.0000463598965021&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2206818970&#34;,&#34;price&#34;:&#34;0.10972685957484773&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.20&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;0.10964137644253408&#34;,&#34;0.11000036549663396&#34;,&#34;0.11025327160010467&#34;,&#34;0.11070373939431584&#34;,&#34;0.11104511865941227&#34;,&#34;0.11109857702436873&#34;,&#34;0.1110924929009018&#34;,&#34;0.11126352122246669&#34;,&#34;0.11094331934275127&#34;,&#34;0.11059613120859749&#34;,&#34;0.11052423450494585&#34;,&#34;0.11037764443683885&#34;,&#34;0.11018324144957391&#34;,&#34;0.11015957429341776&#34;,&#34;0.11025941309951554&#34;,&#34;0.1107306596648452&#34;,&#34;0.11056541424952443&#34;,&#34;0.11033981054182589&#34;,&#34;0.11014982408569168&#34;,&#34;0.11018846762437533&#34;,&#34;0.11026378704001755&#34;,&#34;0.11036637137706824&#34;,&#34;0.11006396812568181&#34;,&#34;0.10976547166697294&#34;,&#34;0.10969235793422591&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;18387033&#34;,&#34;btcPrice&#34;:&#34;0.000005473107631502&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2206118169&#34;,&#34;price&#34;:&#34;3.6294130789874477&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.42&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;3.6761672965431966&#34;,&#34;3.690346882494526&#34;,&#34;3.694321108085478&#34;,&#34;3.7048560012992415&#34;,&#34;3.73751823983082&#34;,&#34;3.728316938499929&#34;,&#34;3.726590894963946&#34;,&#34;3.7324865567596524&#34;,&#34;3.7152125117728954&#34;,&#34;3.684688319254966&#34;,&#34;3.6728907302323908&#34;,&#34;3.6707256113983564&#34;,&#34;3.682858101631704&#34;,&#34;3.6816966205355786&#34;,&#34;3.6732422481738896&#34;,&#34;3.68742500998647&#34;,&#34;3.67949841043138&#34;,&#34;3.658086252545483&#34;,&#34;3.6466882303359083&#34;,&#34;3.653534815527586&#34;,&#34;3.6524651001872352&#34;,&#34;3.6566637162352977&#34;,&#34;3.6505578611908183&#34;,&#34;3.641624197517031&#34;,&#34;3.6360026668443743&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;202730034&#34;,&#34;btcPrice&#34;:&#34;0.000181032871053155&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1912395175&#34;,&#34;price&#34;:&#34;0.000290161158067028&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.78&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000297478449646947&#34;,&#34;0.000299529084347598&#34;,&#34;0.00030173904471774&#34;,&#34;0.000299746687090643&#34;,&#34;0.000298962325969473&#34;,&#34;0.000302229563415801&#34;,&#34;0.0003030758001857&#34;,&#34;0.000301535490436218&#34;,&#34;0.000300445667829273&#34;,&#34;0.000299094184910521&#34;,&#34;0.000295609729343043&#34;,&#34;0.00029451177987895&#34;,&#34;0.000296163406502654&#34;,&#34;0.000295896753590268&#34;,&#34;0.000296293813138895&#34;,&#34;0.00029712340206075&#34;,&#34;0.000296241802461865&#34;,&#34;0.000294833413425782&#34;,&#34;0.000295805632133273&#34;,&#34;0.000295448279840089&#34;,&#34;0.000294342506473691&#34;,&#34;0.000292052607134611&#34;,&#34;0.000290629002509443&#34;,&#34;0.000292037309457244&#34;,&#34;0.000292007407136324&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;118053677&#34;,&#34;btcPrice&#34;:&#34;1.4473058417e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1807723577&#34;,&#34;price&#34;:&#34;1.8077235769379718&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.13&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8196832340882974&#34;,&#34;1.8253360632832465&#34;,&#34;1.8285082236543482&#34;,&#34;1.8347555694945936&#34;,&#34;1.8381094917557752&#34;,&#34;1.833948476565528&#34;,&#34;1.8341444284523087&#34;,&#34;1.8382997009905768&#34;,&#34;1.8395788091068113&#34;,&#34;1.8309599664678795&#34;,&#34;1.8205198309645931&#34;,&#34;1.8134695201238413&#34;,&#34;1.8119386729956268&#34;,&#34;1.8082288357010967&#34;,&#34;1.8068009632735749&#34;,&#34;1.8188388540688198&#34;,&#34;1.8203819894312625&#34;,&#34;1.814524337055796&#34;,&#34;1.808721193963964&#34;,&#34;1.8196357521223283&#34;,&#34;1.815149328780377&#34;,&#34;1.8112776438372116&#34;,&#34;1.8108458436676627&#34;,&#34;1.8027262559586126&#34;,&#34;1.805119314397385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;12084190&#34;,&#34;btcPrice&#34;:&#34;0.00009016812968968&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1767953502&#34;,&#34;price&#34;:&#34;1.706189443694046&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.26&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6890181082125528&#34;,&#34;1.6914682243282655&#34;,&#34;1.6953510291771732&#34;,&#34;1.7032242512223692&#34;,&#34;1.7136242682184002&#34;,&#34;1.7136009177534397&#34;,&#34;1.7149865876802517&#34;,&#34;1.7184074490109524&#34;,&#34;1.710995334162153&#34;,&#34;1.7048864523565708&#34;,&#34;1.699721441021863&#34;,&#34;1.7003688832097956&#34;,&#34;1.6968447607894448&#34;,&#34;1.6929234664355564&#34;,&#34;1.692450465901943&#34;,&#34;1.7010313056523052&#34;,&#34;1.6985550988885165&#34;,&#34;1.6893705490937398&#34;,&#34;1.6866645696902811&#34;,&#34;1.7019443099317626&#34;,&#34;1.7014230772153076&#34;,&#34;1.7069133070811424&#34;,&#34;1.7033611748224882&#34;,&#34;1.6994360137640887&#34;,&#34;1.704400633762173&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;69926340&#34;,&#34;btcPrice&#34;:&#34;0.000085103670161097&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1725996262&#34;,&#34;price&#34;:&#34;17.259962623670035&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.03&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.076100017021975&#34;,&#34;17.06662658749615&#34;,&#34;17.23481897642682&#34;,&#34;17.392304714899172&#34;,&#34;17.34806076924321&#34;,&#34;17.37896364967073&#34;,&#34;17.3987048654455&#34;,&#34;17.64170122029659&#34;,&#34;17.57215127384117&#34;,&#34;17.43018850760622&#34;,&#34;17.342435916635672&#34;,&#34;17.445574853391744&#34;,&#34;17.32297480082281&#34;,&#34;17.37509972478323&#34;,&#34;17.34525419003646&#34;,&#34;17.409372532584655&#34;,&#34;17.389133405821546&#34;,&#34;17.35036829752898&#34;,&#34;17.427069919455597&#34;,&#34;17.552044170794996&#34;,&#34;17.412493725255267&#34;,&#34;17.349458429441366&#34;,&#34;17.146992959728287&#34;,&#34;17.252120262541386&#34;,&#34;17.264212303383914&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;19832838&#34;,&#34;btcPrice&#34;:&#34;0.000860915853391649&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1632153006&#34;,&#34;price&#34;:&#34;5.553293070555647&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.38&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.56243119343507&#34;,&#34;5.567298776850595&#34;,&#34;5.576308807839807&#34;,&#34;5.601722240721692&#34;,&#34;5.625170729423998&#34;,&#34;5.620904303320557&#34;,&#34;5.636315942124946&#34;,&#34;5.635348964222284&#34;,&#34;5.621159554675177&#34;,&#34;5.60335716785942&#34;,&#34;5.5905571062639625&#34;,&#34;5.592369569284194&#34;,&#34;5.578504466675582&#34;,&#34;5.569698214994045&#34;,&#34;5.57106966286358&#34;,&#34;5.5871830930712845&#34;,&#34;5.58594625512426&#34;,&#34;5.567567471367906&#34;,&#34;5.557070809165411&#34;,&#34;5.564056973722409&#34;,&#34;5.560812558868851&#34;,&#34;5.555371588027569&#34;,&#34;5.5431943077677825&#34;,&#34;5.540294464973471&#34;,&#34;5.542380071855275&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;137601011&#34;,&#34;btcPrice&#34;:&#34;0.000276994810588701&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1579574894&#34;,&#34;price&#34;:&#34;6.014970665776294&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.15&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.0162195206336015&#34;,&#34;6.027382655786574&#34;,&#34;6.024819723237437&#34;,&#34;6.039340191092633&#34;,&#34;6.06724228192398&#34;,&#34;6.084822176339837&#34;,&#34;6.12213244622854&#34;,&#34;6.122207846967171&#34;,&#34;6.115223803839146&#34;,&#34;6.090144995430115&#34;,&#34;6.059958922242473&#34;,&#34;6.054607074054347&#34;,&#34;6.044824998176658&#34;,&#34;6.039684832886364&#34;,&#34;6.031722431559297&#34;,&#34;6.051848135596568&#34;,&#34;6.052505386943968&#34;,&#34;6.039004021283348&#34;,&#34;6.03094716124407&#34;,&#34;6.0282463753416&#34;,&#34;6.032921444329065&#34;,&#34;6.04632010848593&#34;,&#34;6.041115706175561&#34;,&#34;6.045998924171826&#34;,&#34;6.0229305076806545&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;38865516&#34;,&#34;btcPrice&#34;:&#34;0.000300023002405056&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1572728539&#34;,&#34;price&#34;:&#34;0.023557685371196242&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.75&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.0237501279975899&#34;,&#34;0.023800623235562788&#34;,&#34;0.02386182467215722&#34;,&#34;0.023973179564354224&#34;,&#34;0.024039808529594694&#34;,&#34;0.024056225110206598&#34;,&#34;0.02401908035553596&#34;,&#34;0.02404102526204194&#34;,&#34;0.02399624253894211&#34;,&#34;0.023865905918825207&#34;,&#34;0.023792587646072907&#34;,&#34;0.023839365677651318&#34;,&#34;0.02381560283772684&#34;,&#34;0.02375080527252874&#34;,&#34;0.023755408145521056&#34;,&#34;0.02387716977416547&#34;,&#34;0.02387351543491939&#34;,&#34;0.023763817483126306&#34;,&#34;0.023691552163897643&#34;,&#34;0.023726104965078293&#34;,&#34;0.02368589760998112&#34;,&#34;0.023671062742535463&#34;,&#34;0.023601726034422614&#34;,&#34;0.0235570377718252&#34;,&#34;0.0235469112210421&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;71397619&#34;,&#34;btcPrice&#34;:&#34;0.00000117504272049&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1553521920&#34;,&#34;price&#34;:&#34;4.671050346324434&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.16&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.660082859245468&#34;,&#34;4.665507699491085&#34;,&#34;4.669686398275825&#34;,&#34;4.704354056302064&#34;,&#34;4.729879002222916&#34;,&#34;4.714593691596935&#34;,&#34;4.7230722097715105&#34;,&#34;4.727203946438871&#34;,&#34;4.714055794424472&#34;,&#34;4.703283518317288&#34;,&#34;4.699762821774249&#34;,&#34;4.700438661119112&#34;,&#34;4.691700450917038&#34;,&#34;4.677135351952703&#34;,&#34;4.694429858732558&#34;,&#34;4.721898404666295&#34;,&#34;4.72192706714792&#34;,&#34;4.711492514608389&#34;,&#34;4.722961417487937&#34;,&#34;4.727350513894986&#34;,&#34;4.726777756847048&#34;,&#34;4.730691546772397&#34;,&#34;4.723894121828546&#34;,&#34;4.720900237522959&#34;,&#34;4.694323412913096&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;69066093&#34;,&#34;btcPrice&#34;:&#34;0.000232989091245811&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1535034674&#34;,&#34;price&#34;:&#34;0.6998105202178926&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.42&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.7016494769558138&#34;,&#34;0.7013306881258784&#34;,&#34;0.7024614313806439&#34;,&#34;0.7044272163104102&#34;,&#34;0.706472351768559&#34;,&#34;0.7093918654850726&#34;,&#34;0.7108366867405783&#34;,&#34;0.7107953770862832&#34;,&#34;0.7099623704106002&#34;,&#34;0.7073510016314243&#34;,&#34;0.7053811315549995&#34;,&#34;0.7072193110953995&#34;,&#34;0.7050915198697436&#34;,&#34;0.7044747588216688&#34;,&#34;0.7041160697442599&#34;,&#34;0.7066206655413716&#34;,&#34;0.7058549946852882&#34;,&#34;0.7032486369948753&#34;,&#34;0.7012876549332069&#34;,&#34;0.7009747852786251&#34;,&#34;0.700473849406315&#34;,&#34;0.7005982029037023&#34;,&#34;0.7002369574369308&#34;,&#34;0.7006334207984222&#34;,&#34;0.7000127772948245&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;113001150&#34;,&#34;btcPrice&#34;:&#34;0.000034906114270022&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1529701789&#34;,&#34;price&#34;:&#34;0.7648508946257417&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.82&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7860619259860426&#34;,&#34;0.7859435779761835&#34;,&#34;0.7861918029620322&#34;,&#34;0.7917396985406836&#34;,&#34;0.7933727507309073&#34;,&#34;0.7916402869669651&#34;,&#34;0.7935301886412963&#34;,&#34;0.7934006370508817&#34;,&#34;0.7896677909111062&#34;,&#34;0.786328322377868&#34;,&#34;0.7828512102910562&#34;,&#34;0.7827849158908187&#34;,&#34;0.7815399732777862&#34;,&#34;0.7772118263855671&#34;,&#34;0.7746419330272937&#34;,&#34;0.7799681155884691&#34;,&#34;0.777981466209664&#34;,&#34;0.7739045575146072&#34;,&#34;0.7718550460057184&#34;,&#34;0.7715939215456447&#34;,&#34;0.7695383673672498&#34;,&#34;0.7673191324882311&#34;,&#34;0.7657534786224457&#34;,&#34;0.764881660541454&#34;,&#34;0.7646092366582135&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;39160980&#34;,&#34;btcPrice&#34;:&#34;0.000038150287765068&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1412205915&#34;,&#34;price&#34;:&#34;0.05800578172077061&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.49&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.05770823380663813&#34;,&#34;0.05774903033415054&#34;,&#34;0.057915572884848006&#34;,&#34;0.05810678934296818&#34;,&#34;0.05824109880306974&#34;,&#34;0.05837365821928798&#34;,&#34;0.058391844857850296&#34;,&#34;0.058420669824922486&#34;,&#34;0.058284382479036986&#34;,&#34;0.05817173526970868&#34;,&#34;0.05807921716077961&#34;,&#34;0.058157030241846555&#34;,&#34;0.05809696154952601&#34;,&#34;0.05804430834562561&#34;,&#34;0.058079013279903904&#34;,&#34;0.058270287529447726&#34;,&#34;0.05828744692577993&#34;,&#34;0.05819030965298005&#34;,&#34;0.05799510351002881&#34;,&#34;0.05801850162696806&#34;,&#34;0.05804288093820356&#34;,&#34;0.05809254408384736&#34;,&#34;0.05803413483043568&#34;,&#34;0.057982852173679544&#34;,&#34;0.05799862984287226&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;47303997&#34;,&#34;btcPrice&#34;:&#34;0.000002893292379253&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1359852507&#34;,&#34;price&#34;:&#34;1.0013157341865748&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;0.9998387203956588&#34;,&#34;0.9991795416493741&#34;,&#34;0.9995865702781206&#34;,&#34;0.9984005488287919&#34;,&#34;0.9990889387633427&#34;,&#34;0.9992832524161939&#34;,&#34;0.9995431951063479&#34;,&#34;0.9992818968259785&#34;,&#34;0.9999311001849419&#34;,&#34;1.0002320414176233&#34;,&#34;0.9996418223412398&#34;,&#34;1.0001187705349235&#34;,&#34;0.9995079927133396&#34;,&#34;0.999782374902935&#34;,&#34;0.999308877507305&#34;,&#34;0.9988846870195152&#34;,&#34;1.0005152287641716&#34;,&#34;1.0008340522704022&#34;,&#34;0.9994436410988572&#34;,&#34;0.9996849217788387&#34;,&#34;0.9995211220531371&#34;,&#34;0.999211197536607&#34;,&#34;0.9999983085146361&#34;,&#34;0.999769500498533&#34;,&#34;1.0011860473290413&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;6816224&#34;,&#34;btcPrice&#34;:&#34;0.0000499450071528&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1353673348&#34;,&#34;price&#34;:&#34;138.4515366225178&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.55&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;136.7723467133241&#34;,&#34;137.81098287130007&#34;,&#34;138.04298230548113&#34;,&#34;138.87720276266452&#34;,&#34;139.1125352948242&#34;,&#34;139.0565202511056&#34;,&#34;139.15754518214834&#34;,&#34;138.81990972517082&#34;,&#34;137.89167052928534&#34;,&#34;137.45970305588784&#34;,&#34;137.8392892605069&#34;,&#34;139.3980081209242&#34;,&#34;138.9594762558207&#34;,&#34;139.35956951767986&#34;,&#34;139.76224675334996&#34;,&#34;140.73346306408735&#34;,&#34;139.70014562219615&#34;,&#34;139.58102151134608&#34;,&#34;139.19177605867037&#34;,&#34;139.65458123164169&#34;,&#34;139.17824474960636&#34;,&#34;139.1901615972891&#34;,&#34;138.83319330338816&#34;,&#34;138.1218448902609&#34;,&#34;138.15277303739376&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;91114375&#34;,&#34;btcPrice&#34;:&#34;0.006905876688879963&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1315560385&#34;,&#34;price&#34;:&#34;55.68031129283641&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.67&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;54.447577507868715&#34;,&#34;54.128375568181134&#34;,&#34;54.23440566519872&#34;,&#34;54.73707935361438&#34;,&#34;55.29878160930527&#34;,&#34;55.12497748150301&#34;,&#34;55.42130584548864&#34;,&#34;55.15246246213931&#34;,&#34;55.040118775249475&#34;,&#34;54.79984173940808&#34;,&#34;54.611754004068196&#34;,&#34;54.73084890510059&#34;,&#34;55.07467359664748&#34;,&#34;55.12258904806393&#34;,&#34;55.12232719822051&#34;,&#34;55.10748540691841&#34;,&#34;55.01733359597467&#34;,&#34;54.876885804473424&#34;,&#34;54.85576050348866&#34;,&#34;55.096674446643746&#34;,&#34;55.35611005385607&#34;,&#34;54.96784781952569&#34;,&#34;54.84449264613283&#34;,&#34;54.95034295425699&#34;,&#34;55.112649002423744&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;56551571&#34;,&#34;btcPrice&#34;:&#34;0.002777299358079064&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1298765552&#34;,&#34;price&#34;:&#34;1.4300647644749105&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.35&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.4215338154290353&#34;,&#34;1.425785384185857&#34;,&#34;1.4279580637852494&#34;,&#34;1.4343164461157478&#34;,&#34;1.44533506798751&#34;,&#34;1.4458980149471825&#34;,&#34;1.442887292689709&#34;,&#34;1.4491458802390045&#34;,&#34;1.4448918253453362&#34;,&#34;1.4395360524680738&#34;,&#34;1.4357054965075182&#34;,&#34;1.436366388066666&#34;,&#34;1.4339651090330499&#34;,&#34;1.4334495267586773&#34;,&#34;1.4333504141935083&#34;,&#34;1.4389840361204465&#34;,&#34;1.4379456439736016&#34;,&#34;1.4315401694215406&#34;,&#34;1.4240153029007887&#34;,&#34;1.4240927210678032&#34;,&#34;1.4220389629012662&#34;,&#34;1.4290008245398644&#34;,&#34;1.4312652127406216&#34;,&#34;1.4310909189590104&#34;,&#34;1.4306725904273427&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;39973056&#34;,&#34;btcPrice&#34;:&#34;0.000071330742594082&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1281111260&#34;,&#34;price&#34;:&#34;0.21564361283618286&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.44&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.2154110356391449&#34;,&#34;0.21556395298813918&#34;,&#34;0.21654088100155322&#34;,&#34;0.21734996911672455&#34;,&#34;0.21877239367594722&#34;,&#34;0.21947482492922862&#34;,&#34;0.21980181027276333&#34;,&#34;0.21907182102411207&#34;,&#34;0.21837999474902092&#34;,&#34;0.2179201134075193&#34;,&#34;0.21682795818287987&#34;,&#34;0.21600225868090728&#34;,&#34;0.21587704160172458&#34;,&#34;0.2158448062065273&#34;,&#34;0.21568131629647883&#34;,&#34;0.21628666481515962&#34;,&#34;0.21575577092565493&#34;,&#34;0.21492437995400548&#34;,&#34;0.21514404501911413&#34;,&#34;0.2171108493305216&#34;,&#34;0.21771656940310347&#34;,&#34;0.21679986568652215&#34;,&#34;0.21607273994568685&#34;,&#34;0.21599406892348155&#34;,&#34;0.216016823604864&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;230327611&#34;,&#34;btcPrice&#34;:&#34;0.000010756169525597&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1273362601&#34;,&#34;price&#34;:&#34;0.8492083368987202&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.45&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8587964523939258&#34;,&#34;0.8597445619216338&#34;,&#34;0.8611496857436736&#34;,&#34;0.865552155362601&#34;,&#34;0.8666655073914699&#34;,&#34;0.8666063461880543&#34;,&#34;0.8661421792463039&#34;,&#34;0.8670202524108236&#34;,&#34;0.8645275388953965&#34;,&#34;0.8601521201043011&#34;,&#34;0.8593695662980281&#34;,&#34;0.8662535514126233&#34;,&#34;0.8588847882234059&#34;,&#34;0.8544149170251873&#34;,&#34;0.8528484459196816&#34;,&#34;0.8567742977148085&#34;,&#34;0.8559971556239261&#34;,&#34;0.8526369746427614&#34;,&#34;0.8503963749700182&#34;,&#34;0.8514893353210455&#34;,&#34;0.8513642787546029&#34;,&#34;0.8508505323793061&#34;,&#34;0.8483933250963328&#34;,&#34;0.8475209589259349&#34;,&#34;0.8482538011775931&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;76483572&#34;,&#34;btcPrice&#34;:&#34;0.000042357984612195&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1216992139&#34;,&#34;price&#34;:&#34;1.5130652728504481&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.27&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.514949369280686&#34;,&#34;1.5184328905530695&#34;,&#34;1.5246699575717297&#34;,&#34;1.5386072083468705&#34;,&#34;1.5536094881641007&#34;,&#34;1.5570507422780526&#34;,&#34;1.5627604927137266&#34;,&#34;1.5612721472754483&#34;,&#34;1.5639154910163686&#34;,&#34;1.549373162283526&#34;,&#34;1.5394363442551757&#34;,&#34;1.5413748243293799&#34;,&#34;1.5406687905041778&#34;,&#34;1.5536997118197664&#34;,&#34;1.5585509390347834&#34;,&#34;1.5605461378658754&#34;,&#34;1.556322526404288&#34;,&#34;1.5432139594119398&#34;,&#34;1.527711427666444&#34;,&#34;1.5295360489082588&#34;,&#34;1.5251991365229256&#34;,&#34;1.523882390305484&#34;,&#34;1.5152199119209957&#34;,&#34;1.5079084095454254&#34;,&#34;1.5059207760888258&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;8936326&#34;,&#34;btcPrice&#34;:&#34;0.000075470756420859&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1158011402&#34;,&#34;price&#34;:&#34;1.1714655273717414&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.17&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.1695001042910693&#34;,&#34;1.1712804054845907&#34;,&#34;1.1741562139239061&#34;,&#34;1.1794010183679478&#34;,&#34;1.1847650307406867&#34;,&#34;1.1855240685834143&#34;,&#34;1.1866371525249342&#34;,&#34;1.1885970359357818&#34;,&#34;1.1869956333747422&#34;,&#34;1.1822077005037634&#34;,&#34;1.1770242148628085&#34;,&#34;1.17614591514241&#34;,&#34;1.1773458464363997&#34;,&#34;1.1770861707666584&#34;,&#34;1.1811474861902838&#34;,&#34;1.1833592012519114&#34;,&#34;1.1818251357201783&#34;,&#34;1.1782503602022067&#34;,&#34;1.176960097898779&#34;,&#34;1.1767921922729265&#34;,&#34;1.1759604894059537&#34;,&#34;1.1750064515228658&#34;,&#34;1.1729163746108195&#34;,&#34;1.170358956437112&#34;,&#34;1.1692075076471242&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;216574047&#34;,&#34;btcPrice&#34;:&#34;0.000058431973199113&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success BTC 20048.365017211556 Icon Url: https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg Rank Url: https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc ETH 1363.7268444859621 Icon Url: https://cdn.coinranking.com/rk4RKHOuW/eth.svg Rank Url: https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth USDT 0.9999934382419505 Icon Url: https://cdn.coinranking.com/mgHqwlCLj/usdt.svg Rank Url: https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt USDC 1.0001439253592908 Icon Url: https://cdn.coinranking.com/jkDf8sQbY/usdc.svg Rank Url: https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc BNB 288.372850606221 Icon Url: https://cdn.coinranking.com/B1N19L_dZ/bnb.svg Rank Url: https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb XRP 0.4998596422677392 Icon Url: https://cdn.coinranking.com/B1oPuTyfX/xrp.svg Rank Url: https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp BUSD 0.9998341667790431 Icon Url: https://cdn.coinranking.com/6SJHRfClq/busd.svg Rank Url: https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd ADA 0.4298943742278509 Icon Url: https://cdn.coinranking.com/ryY28nXhW/ada.svg Rank Url: https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada SOL 33.71428257698631 Icon Url: https://cdn.coinranking.com/yvUG4Qex5/solana.svg Rank Url: https://coinranking.com/coin/zNZHO_Sjf+solana-sol DOGE 0.06399881605101142 Icon Url: https://cdn.coinranking.com/H1arXIuOZ/doge.svg Rank Url: https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge MATIC 0.8404891786387144 Icon Url: https://cdn.coinranking.com/WulYRq14o/polygon.png Rank Url: https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic DOT 6.3785000633196605 Icon Url: https://cdn.coinranking.com/RsljYqnbu/polkadot.svg Rank Url: https://coinranking.com/coin/25W7FG7om+polkadot-dot SHIB 0.000011286461059515 Icon Url: https://cdn.coinranking.com/D69LfI-tm/shib.png Rank Url: https://coinranking.com/coin/xz24e0BjL+shibainu-shib DAI 0.9999136316591463 Icon Url: https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg Rank Url: https://coinranking.com/coin/MoTuySvg7+dai-dai TRX 0.06256558134968382 Icon Url: https://cdn.coinranking.com/behejNqQs/trx.svg Rank Url: https://coinranking.com/coin/qUhEFk1I61atv+tron-trx WETH 1363.1831262096398 Icon Url: https://cdn.coinranking.com/KIviQyZlt/weth.svg Rank Url: https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth UNI 6.970342314938424 Icon Url: https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48 Rank Url: https://coinranking.com/coin/_H5FVG9iW+uniswap-uni AVAX 17.140177883740314 Icon Url: https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png Rank Url: https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax WBTC 20047.65670389833 Icon Url: https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg Rank Url: https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc ATOM 13.109745393055944 Icon Url: https://cdn.coinranking.com/HJzHboruM/atom.svg Rank Url: https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom OKB 15.643761032184168 Icon Url: https://cdn.coinranking.com/xcZdYtX6E/okx.png Rank Url: https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb LTC 53.84948369214034 Icon Url: https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg Rank Url: https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc FTT 24.66056515734731 Icon Url: https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg Rank Url: https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt ETC 28.15861108739772 Icon Url: https://cdn.coinranking.com/rJfyor__W/etc.svg Rank Url: https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc XMR 148.90777553169121 Icon Url: https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg Rank Url: https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr ALGO 0.3517782161281549 Icon Url: https://cdn.coinranking.com/lzbmCkUGB/algo.svg Rank Url: https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo XLM 0.12063066323232836 Icon Url: https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg Rank Url: https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm BCH 118.99631691356878 Icon Url: https://cdn.coinranking.com/By8ziihX7/bch.svg Rank Url: https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch BTCB 20043.97749206499 Icon Url: https://cdn.coinranking.com/Swr_SeZio/4023.png Rank Url: https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb CRO 0.10972685957484773 Icon Url: https://cdn.coinranking.com/2o91jm73M/cro.svg Rank Url: https://coinranking.com/coin/65PHZTpmE55b+cronos-cro NEAR 3.6294130789874477 Icon Url: https://cdn.coinranking.com/Cth83dCnl/near.png Rank Url: https://coinranking.com/coin/DCrsaMv68+nearprotocol-near LUNC 0.000290161158067028 Icon Url: https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg Rank Url: https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc WEMIX 1.8077235769379718 Icon Url: https://cdn.coinranking.com/1N84MQsoO/7548.png Rank Url: https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix FLOW 1.706189443694046 Icon Url: https://cdn.coinranking.com/xh8X8QBss/flow.png Rank Url: https://coinranking.com/coin/QQ0NCmjVq+flow-flow ENS 17.259962623670035 Icon Url: https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png Rank Url: https://coinranking.com/coin/SbWqqTui-+energyswap-ens FIL 5.553293070555647 Icon Url: https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48 Rank Url: https://coinranking.com/coin/ymQub4fuB+filecoin-fil ICP 6.014970665776294 Icon Url: https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png Rank Url: https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp VET 0.023557685371196242 Icon Url: https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg Rank Url: https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet CAKE 4.671050346324434 Icon Url: https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png Rank Url: https://coinranking.com/coin/ncYFcP709+pancakeswap-cake MANA 0.6998105202178926 Icon Url: https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg Rank Url: https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana IMX 0.7648508946257417 Icon Url: https://cdn.coinranking.com/naRGT2Y_X/10603.png Rank Url: https://coinranking.com/coin/Z96jIvLU7+immutablex-imx HBAR 0.05800578172077061 Icon Url: https://cdn.coinranking.com/dSCnSLilQ/hedera.svg Rank Url: https://coinranking.com/coin/jad286TjB+hedera-hbar FRAX 1.0013157341865748 Icon Url: https://cdn.coinranking.com/BpVNCX-NM/frax.png Rank Url: https://coinranking.com/coin/KfWtaeV1W+frax-frax QNT 138.4515366225178 Icon Url: https://cdn.coinranking.com/a-i9Dl392/quant.png Rank Url: https://coinranking.com/coin/bauj_21eYVwso+quant-qnt EGLD 55.68031129283641 Icon Url: https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg Rank Url: https://coinranking.com/coin/omwkOTglq+elrond-egld XTZ 1.4300647644749105 Icon Url: https://cdn.coinranking.com/HkLUdilQ7/xtz.svg Rank Url: https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz CHZ 0.21564361283618286 Icon Url: https://cdn.coinranking.com/gTsOlSnwR/4066.png Rank Url: https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz SAND 0.8492083368987202 Icon Url: https://cdn.coinranking.com/kd_vwOcnI/sandbox.png Rank Url: https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand LDO 1.5130652728504481 Icon Url: https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png Rank Url: https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo EOS 1.1714655273717414 Icon Url: https://cdn.coinranking.com/PqOYrWSje/eos2.svg Rank Url: https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "College Board Notes",
            "content": "Computing Innovations (categories) . Applications (games, social media, business, productivity) | Physical Devices (computers, smartphones, tablets, Smart “things”, wearables) | Systems (E-commerce, cloud services, E-mail) not local machine | . essential questions: Why does the computing innovation exist? What problems does it solve? . Inputs Types . tactile | audio | visual | text What types of inputs do your devices accept? . | Most programs are written in an event driven enviornment | input usually affects the output (mouse clicks, mouse clicks, screen taps/swipes, physical button clicks, keyboard entries, audio trigger) | outputs produced by device (visual, audio, tactle, text) | . Action triggers an event . action may be initiated by user/another program or device | program “jumps” to code segment accoording to event | code segment is executed | output is triggered by code segment | . What is a program? . program = collection of statements | statement = a single command | group of statements is called a code statement | code segments are executed accoording to the rules of the programming lang | a pragram is often reffered to as software | . Developing a Program . developed with a specific purpose in mind | developers follow specific steps and stick to their plan | sometimes is more exploratory than anything | . How is a program developed? . determine requirements of program | understand the constraints | understand the user concerns/intrests | brianstorm | storyboard program | plan user experience | lay out user interface | organize into modules | develop testing strategy | make prototype | test, test test (at all levels) | reflect after testing | . Comments . allows programmers to write text within program (without affecting program) | comments are for programmers to read | helpful in collabortation | provide credit to those who deserve it in your program | use comments to give credit for specific parts | if you use someone else’s code, give credit | . Program Documentation . describe overall program | list program specifications | describe funtions/procedures/methods within code | describe specific code segments | describe the development of program | how other programs may interact with program | list of contributers/authors of program | . . Dificulties: . I need to take my time when reading the questions and make sure I nderstand the parameters | I need to study the different types of inputs, outputs and functions | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/notes",
            "relUrl": "/collegeboard/notes",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter c is the 3 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? order = [] while True: #use a while loop to promt customer item = input(&quot;Please select an item from the menu&quot;) if item == &quot;&quot;: #allows program to stop promting customer if they click enter break else: order.append(item) #if they don&#39;t click enter and stop the program, it adds the new item onto the order print(order) for v in order: total = total + menu[v] #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 [&#39;fries&#39;, &#39;burger&#39;] 5.98 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Scrum Process",
            "content": "My Group’s Scrum Process . . First, my group will meet and discuss the directions given to us. We will then assign the work to our roles. During the sprint, we will continue to meet daily to discuss our progress. We will also continue to use our scrum board on Github to track our progress and what we need to get done. | . Our Scrum Board .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/AgileMethodology/scrumprocess",
            "relUrl": "/AgileMethodology/scrumprocess",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Group Using Collaboration",
            "content": "Think-Pair-Share Collaboration . My group came together and used this method of collaboration in order to: . get insight and knowledge from our different backgrounds/understandings | double check our work for requirements/errors | give feedback and improve our projects | to help when needed! | . Our Shared Google Doc .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collaboration/1",
            "relUrl": "/collaboration/1",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Tool Checks",
            "content": "Versions of Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Packages of Conda Check . conda list . # packages in environment at /home/alexac54767/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/alexac54767/.local/share/jupyter/kernels/bash javascript /home/alexac54767/.local/share/jupyter/kernels/javascript python3 /home/alexac54767/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . python3 /home/alexac54767/.local/share/jupyter/kernels/python3 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/toolchecks",
            "relUrl": "/notebooks/toolchecks",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Collaboration Video Notes",
            "content": "Goals: . Explain how computing innovations are improved through collaboration. Demonstrate effective interpersonal skills during collaboration. Explain how computing innovations are improved through collaboration. Explain hoe computing innovations are developed by groups of people. . Collaboration Importance . Collaboration is essential in everyday life | Facebook (very successful tech company) says “Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it.” | To create the new and improved Super Mario Brothers, 2 partners listened to each other and used eachother’s ideas to create an even better version | interpersonal skills learned through collaboration: communication, consensus building, conflict resolution, negotiation | . How to Collborate in APCSP . Pair programming (2 programmers): “the driver” writes program code while “the observer/pointer/navigator” reviews each line of program code as it is typed in | Think-Pair-Share: students think through a problem alone, pair with a partner to share ideas, then share results with the class | Leave comments in your code: communicate to your partner(s), communicate to yourself, acknowleedge code segments/media from other sources, differentiate what you and partner(s) did, clarify the functionality of your code | . Online tools . repl.it (can work together) | GitHub (collaboration and repository) | Shared document or folder | ask friends and family to test drive your program and give you feedback | . Quiz Results . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notes/1",
            "relUrl": "/notes/1",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "My Java Script Quiz",
            "content": "Planning Stage . This stage really helped me to stay organized. Also, I can measure my progress since I started this project. . Questions . Which Carlson twin is better? (put image of Ava and Alexa as buttons) | What is the Carlson twins’ favorite hobby? (put image of us in cheer and 3 other hobbies as buttons) | What is the Carlson twins’ favorite Spider-Man? (put images of the 3 spidermans as buttons) | How swaggy are the Carlson twins? (put an image of twins looking cool and use sliders?) Outline . | 6 total screens | opening screen | 4 questions each on a screen | closing screen w score Need to: . | figure out a way to click the wrong answer (more screens?) | how to add images (and as buttons) | be creative (a way to click on pic to show answer?) | . . My finished quiz! . What Worked . Creating this quiz with code.org made it much easier. I slowly got the hang of it, as I understood and learned how each function, variable, and control worked. App Lab made it very easy to add images, as well as buttons and texts. Then, i followed the very similar format for each “onevent”. . Challenges/What Didn’t Work . This project involved a lot of trial and error. I would try see some examples or try and understand what a function would do, and then I’d change it a bit and see what would happen. This happened many times, leading to new thinds but also errors. It took me a lot of time and trials to figure out how to incorporate an if/else statement. The order and location in which the functions are is essential. That is another thing I learned through trial and error. However, there were occasions where I could not figure out how to make it work. In that case, I would strategize a new way of doing. For example, at the end of my quiz where the messages with your end score come up, I had to use “while” statements and define the score as a number. At first, I used inequalities, but they only worked for some situations. I decided to make it simpler, and only use “===”, rather than “&lt;= or &gt;=”. ADAPT AND OVERCOME . Performance Task Skills . Program Purpose and Funcion . This program’s purpose is to test people’s knowledge on the Carlson Twins. Another goal is to tech those who don’t know us well, and achieve a feeling of a closer relationship. | Javascript is used in this program to navigate through different screens, texts, and buttons (outputs) as a user enters data (clicking buttons, type in answers, sliding bars). | . Data Abstraction . In this project, we were given a tool, Code.org, to help simplify the process of using Javascript to make a quiz. It did not involve any lists or other data collection types. This quiz is simple, therefore not needing a data list or dictionary. | . Managing Complexity . In order to be more efficient, the next time I make a quiz using this program, I will attempt to define a function. Then, I will use that function and create a list with the inputs. Hopefully that would be more efficient and speed up the process of coding. | . Procedural Abstraction . As i said in managing complexity, I did not define any new funtions (that weren’t already options provided by code.org). However, I did learn some of the basics of Javascript through exploration and the creation of this quiz. | . Algorithim Implementation . I used sequencing and selection in this quiz. All of the events are in a specific order, going in order of the cells. It is not iteration since I am not using any lists or dictionaries. Selection is used in this quiz with the score calculations, and the incorrect page. Everytime the user gets the correct answer, +1 is added to the variable “score”. These aren’t neccesarily in order, making it selection. | . Testing . Every step of creating this quiz involved testing. Whenever I added a new button, image, or even changed the inequality on the score, I tested it. Also, if there were many options (like getting 2/3 vs 3/3 correct), I would test every possible outcome. Through this process of trial and error, I was able to achieve a successful quiz. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/javascript/quiz",
            "relUrl": "/javascript/quiz",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Using JavaScript",
            "content": "function logIt(output) { console.log(output); } logIt(msg); . evalmachine.&lt;anonymous&gt;:4 logIt(msg); ^ ReferenceError: msg is not defined at evalmachine.&lt;anonymous&gt;:4:7 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . // define a function to hold data for a Person function Person(name, ghID, classof, gpa, status) { this.name = name; this.ghID = ghID; this.classof = classof; this.gpa = gpa; this.status = status; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classof: this.classof, gpa: this.gpa, status: this.status, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, &quot;1901&quot;, &quot; &quot;, &quot;VERY Cool&quot;); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classof: &#39;1901&#39;, gpa: &#39; &#39;, status: &#39;VERY Cool&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classof&#34;:&#34;1901&#34;,&#34;gpa&#34;:&#34; &#34;,&#34;status&#34;:&#34;VERY Cool&#34;,&#34;role&#34;:&#34;Teacher&#34;} . // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2023, 4.0, &quot;cool&quot;), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2024, 3.5, &quot;not cool&quot;), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023, 3.8, &quot;cool&quot;), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2036, 4.2, &quot;very cool&quot;), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2024, 4.135, &quot;kinda cool&quot;), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2023, 3.95, &quot;not cool&quot;) ]; // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classof: &#39;1901&#39;, gpa: &#39; &#39;, status: &#39;VERY Cool&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classof: 2023, gpa: 4, status: &#39;cool&#39;, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classof: 2024, gpa: 3.5, status: &#39;not cool&#39;, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classof: 2023, gpa: 3.8, status: &#39;cool&#39;, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classof: 2036, gpa: 4.2, status: &#39;very cool&#39;, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classof: 2024, gpa: 4.135, status: &#39;kinda cool&#39;, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classof: 2023, gpa: 3.95, status: &#39;not cool&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classof&#34;:&#34;1901&#34;,&#34;gpa&#34;:&#34; &#34;,&#34;status&#34;:&#34;VERY Cool&#34;,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classof: &#39;1901&#39;, gpa: &#39; &#39;, status: &#39;VERY Cool&#39;, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:#3386FF;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GPA&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Status&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classof + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.gpa + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.status + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass ofGPAStatusRole . Mr M | jm1021 | 1901 | | VERY Cool | Teacher | Anthony | tonyhieu | 2023 | 4 | cool | Student | Bria | B-G101 | 2024 | 3.5 | not cool | Student | Allie | xiaoa0 | 2023 | 3.8 | cool | Student | Tigran | Tigran7 | 2036 | 4.2 | very cool | Student | Rebecca | Rebecca-123 | 2024 | 4.135 | kinda cool | Student | Vidhi | unknown | 2023 | 3.95 | not cool | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Changed Theme on Fastpages",
            "content": "Changed my Theme to Cayman . . This is what it looked like when I changed the theme of my Fastpage in GitHub. It looked very nice with the new blue/green colors and fonts. . . However, some aspects in the Fastpage were limited. For example, the fonts became different sizes. The images from the posts on the home page were different sizes. Also, you are not able to acess the other pages (ex: My Work, About Me, Tags, etc.) . . Also, the presentation of the posts look different. The tags don’t have the little symbol to the left of them like in the minima theme. Also, everything is spaced to the left. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/themes/1",
            "relUrl": "/themes/1",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Making a List with Dictonaries . I defined some keys and values on information about me and my partner | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Alexa&quot;, &quot;MiddleName&quot;: &quot;Rose&quot;, &quot;LastName&quot;: &quot;Carlson&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alexarosecarlson.com&quot;, &quot;Owns_Cars&quot;: [&quot;Tesla-Model-3&quot;, &quot;Mercedes-GL450&quot;, &quot;Ford-Expedition&quot;], &quot;Phone&quot;: &quot;8582695083&quot;, &quot;Pets&quot;: [&quot;Dog&quot;], &quot;Favorite_Colors&quot;: [&quot;Blue&quot;, &quot;Purple&quot;], &quot;Phone_Provider&quot;: &quot;Verizon&quot; }) print(InfoDb) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Ava&quot;, &quot;MiddleName&quot;: &quot;Brynn&quot;, &quot;LastName&quot;: &quot;Carlson&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;avabrynncheer@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Tesla-Model-3&quot;, &quot;Mercedes-GL450&quot;, &quot;Ford-Expedition&quot;], &quot;Phone&quot;: &quot;8582695084&quot;, &quot;Pets&quot;: [&quot;Dog&quot;], &quot;Favorite_Colors&quot;: [&quot;Pink&quot;, &quot;Blue&quot;], &quot;Phone_Provider&quot;: &quot;Verizon&quot; }) print() print() # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Alexa&#39;, &#39;MiddleName&#39;: &#39;Rose&#39;, &#39;LastName&#39;: &#39;Carlson&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;alexarosecarlson.com&#39;, &#39;Owns_Cars&#39;: [&#39;Tesla-Model-3&#39;, &#39;Mercedes-GL450&#39;, &#39;Ford-Expedition&#39;], &#39;Phone&#39;: &#39;8582695083&#39;, &#39;Pets&#39;: [&#39;Dog&#39;], &#39;Favorite_Colors&#39;: [&#39;Blue&#39;, &#39;Purple&#39;], &#39;Phone_Provider&#39;: &#39;Verizon&#39;}] [{&#39;FirstName&#39;: &#39;Alexa&#39;, &#39;MiddleName&#39;: &#39;Rose&#39;, &#39;LastName&#39;: &#39;Carlson&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;alexarosecarlson.com&#39;, &#39;Owns_Cars&#39;: [&#39;Tesla-Model-3&#39;, &#39;Mercedes-GL450&#39;, &#39;Ford-Expedition&#39;], &#39;Phone&#39;: &#39;8582695083&#39;, &#39;Pets&#39;: [&#39;Dog&#39;], &#39;Favorite_Colors&#39;: [&#39;Blue&#39;, &#39;Purple&#39;], &#39;Phone_Provider&#39;: &#39;Verizon&#39;}, {&#39;FirstName&#39;: &#39;Ava&#39;, &#39;MiddleName&#39;: &#39;Brynn&#39;, &#39;LastName&#39;: &#39;Carlson&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;avabrynncheer@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Tesla-Model-3&#39;, &#39;Mercedes-GL450&#39;, &#39;Ford-Expedition&#39;], &#39;Phone&#39;: &#39;8582695084&#39;, &#39;Pets&#39;: [&#39;Dog&#39;], &#39;Favorite_Colors&#39;: [&#39;Pink&#39;, &#39;Blue&#39;], &#39;Phone_Provider&#39;: &#39;Verizon&#39;}] . Making a Loop . this loop prints the records I defined and listed in the last cell | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;MiddleName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Phone:&quot;, d_rec[&quot;Phone&quot;]) print(&quot; t&quot;, &quot;Pets: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Pets&quot;])) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Favorite Colors: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite_Colors&quot;])) print(&quot; t&quot;, &quot;Phone Provider:&quot;, d_rec[&quot;Phone_Provider&quot;]) print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon . Reversed Loop . this is the last loop, but reversed | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;MiddleName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Phone:&quot;, d_rec[&quot;Phone&quot;]) print(&quot; t&quot;, &quot;Pets: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Pets&quot;])) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Favorite Colors: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite_Colors&quot;])) print(&quot; t&quot;, &quot;Phone Provider:&quot;, d_rec[&quot;Phone_Provider&quot;]) print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output reversed n&quot;) for record in reversed(InfoDb): # this reverses the data in the InfoDB list print_data(record) for_loop() . For loop output reversed Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon . While Loop . this kind of loop defines a variable and uses that to print the next record | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon . While Loop Reversed . this is the while loop reversed | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output reversed n&quot;) i = len(InfoDb) while i &gt; 0: # i has to be greater than 0 now that its is reversed (starting at 2 and can&#39;t go below 0) record = InfoDb[i-1] # lists begin at 0, however, length begins at 1 (must -1 to have same record) print_data(record) i -= 1 # the - allows to go in reverse order return while_loop() . While loop output reversed Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon . Recursion Algorithm . A recursion algorithm calls for itself in it&#39;s definition | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon . Reversed Recursion Algorithm . this is the recursion algorithm reversed | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &gt;= 0: # must be greater than or equal to 0 since the first record in length is 0 in the list record = InfoDb[i] print_data(record) recursive_loop(i - 1) # -1 makes it reversed return print(&quot;Recursive loop output reversed n&quot;) recursive_loop(len(InfoDb)-1) # once again the length is one more than the record in the list so there is -1 . Recursive loop output reversed Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon . Nested Loop . In this nested loop, there is a for loop inside of another for loop. It will run through the inner loop before the outer loop moves onto the next input. In this case, it will multiply the inner loop number by the outer loop number. | . from re import A for i in range(1, 11): for a in range(1, 11): # this is the nested loop that will iterate from 1-10 print(i * a, end=&#39; &#39;) # print the multiplication products print() . 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week2/python_lists",
            "relUrl": "/week2/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "My Quiz",
            "content": "def question_with_response(promt): print(&quot;Question: &quot; + promt) msg = input() return msg correct = 0 ec_abort = 0 # I created the variable &quot;ec_abort&quot; (stands for extra credit abort) print(&quot;Hey queen, make sure to think out of the box when taking this quiz.&quot;) print(&quot;You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number.&quot;) question_with_response(&quot;Are you ready?&quot;) if ec_abort == 0: rsp = question_with_response(&quot;How old am I?&quot;) if rsp == &quot;16&quot;: print(rsp + &quot; is correct:)&quot;) correct += 1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # The new variable allows me to code so that if the user of my quiz types &quot;Give me 100%&quot;, it skips to the end with a 5/5 if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite color?&quot;) if rsp == &quot;Blue&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If they get the question correct, then the variable &quot;correct&quot; goes up by 1 if ec_abort == 0: rsp = question_with_response(&quot;How many siblings to I have?&quot;) if rsp == &quot;3&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If their answer is incorrect, the amount correct stays the same and it prints &quot;is no bueno:(&quot; if ec_abort == 0: rsp = question_with_response(&quot;What pet do I have?&quot;) if rsp == &quot;A dog&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite subject?&quot;) if rsp == &quot;Math&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 1: print(&quot;You scored 5/5&quot;) if ec_abort == 0: print (&quot;Slayyy you scored &quot; + str(correct) + &quot;/5&quot;) # If they don&#39;t use the &quot;Give me 100%&quot; option, ec_abort is still 0, allowing this step that gives the perentage correct to show . Hey queen, make sure to think out of the box when taking this quiz. You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number. Question: Are you ready? Question: How old am I? 16 is correct:) Question: What is my favorite color? Blue is correct:) Question: How many siblings to I have? Give me 100% BOOM 100% YOU ARE DONE You scored 5/5 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/myquiz",
            "relUrl": "/notebooks/myquiz",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Resource Videos",
            "content": "Github help: . GitHub Concepts. . GitHub Set-up Instructions. . Jupyter Notebooks Help: . Jupyter Basics. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/markdown/videos",
            "relUrl": "/markdown/videos",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "My First Jupyter Notebook",
            "content": "print (&quot;Hello, World!&quot;) . Hello, World! .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/myjupyternotebook",
            "relUrl": "/notebooks/myjupyternotebook",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "My First Markdown",
            "content": "My First Markdown #coolright? . I’m starting to figure this out! :joy: . Here are some things I love . My dog, Mocha | my family (twin sister included) | Allstar Cheerleading | Marvel Movies (btw Spiderman is the best) | my friends &lt;3 |",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/markdown/1",
            "relUrl": "/markdown/1",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Binary Math",
            "content": "| Overview | Spell Check API | Binary Math | . Binary Math with Conversions . Shift Left(x2) Plus Binary Octal Hexadecimal Decimal Minus Shift Right(/2) . &lt;&lt; | +1 | 00000000 | 0 | 0 | 0 | -1 | &gt;&gt; | . 2^2=+4 | 2^1=+2 | 2^0=+1 | . Turn on | Turn on | Turn on | . | | | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Frontend",
          "content": "| Overview | Java Script Table | . Code in this Sub Menu . This is a link to my use of Javascript. I built a table using html, javascript, and collecting data through Json. | .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "API",
          "content": "| Overview | Spell Check API | Binary Math | . APIs in this Sub Menu . HTML, CSS, and JavaScript are the front-end of the API. Python and API resource definitions are used for RESTful API definitions. Abstraction of Frontend and Backend code, the exchange of standard data format (JSON), and guidelines for exchange (REST) is a technique that saves a lot of time between developers. Learning APIs is a highly recommended step for every developer trying to break into the world of tech. . Covid19: RapidAPI example. This is introducing APIs by accessing something that already exists. RapidAPI shows how many practice RESTful definitions. Almost any data source imagined can be accessed here. | Jokes: An introduction to Python RESTful API libraries. A Python List is used to make a Data Model, but persistence in this technique is limited, each time server is refreshed data is lost. This example is great for learning, but data is considered volatile. | Users: Another RESTful API library example. However, this backend establishes data persistence through the use of a database. This data if properly managed in deployment and migrated when changed can last forever. | . Web API Overview . . A Web API is an application programming interface typically for a web browser. Non-changing or Static Endpoints are used in interacting with the server-side Web APIs. RESTful Web APIs use HTTP methods to access resources via URL parameters, and use JSON for transmitting text between client and server. Server. In these examples, we will be using Python to define REST APIs. Python tools are very popular for building RESTful APIs | REST: Representational State Transfer. A set of guidelines on how to architect a network-connected software system. | Client-server: One guideline is a client and server must be decoupled from each other, allowing each to develop independently. | Layered system: The client may access the resources on the server indirectly through other layers such as a proxy or using authentication. This will be clarified by application and security requirements. | . Client. JavaScript is the frontend language used to consume data from the Python defined REST APIs. Fetch will be used to make HTTP requests, as well as handle HTTP response. There are four basic HTTP methods, they align with Create, Read, Update, Delete (CRUD). | GET =&gt; Retrieve/Read data | POST =&gt; Create data | PUT =&gt; Update data | DELETE =&gt; Delete data | . REST endpoints will have similarity from application to application. In planning APIs, for a Users system you can anticipate key methods. The Users RESTful APIs would likely contain these endpoints. | GET: /users =&gt; Get a list of users | GET: /users(id) =&gt; Get a single user | POST: /users =&gt; Create a new user | PUT: /users(id) =&gt; Update a user | DELETE: /users(id) =&gt; Delete a user | . Once a RESTful API receives and processes an HTTP request, it will return an HTTP response. Included in this response is an HTTP status code. Common status codes are shown. | 200 =&gt; OK, this response will then have the promise of JSON data | 400 =&gt; Bad Request | 404 =&gt; Not Found | 500 =&gt; Internal Server Error (aka bug) | . . . .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "My Work",
          "content": "Alexa’s APCSP Work . This is all of my APCSP work so far. Enjoy! . Trimester Week Project . 1 | 0 | My First Jupyter Notebook. | . 1 | 0 | My First Markdown Post. | . 1 | 1 | My Quiz. | . 1 | 1 | Tool Check. | . 1 | 2 | Changed Theme. | . 1 | 2 | Lists, Dictionaries, Iteration. | . 1 | 3 | My Javascript Quiz | . 1 | 3 | My Bog About My Quiz | . 1 | 4 | Collaboration Notes | . 1 | 4 | Python Web Server Project (video) | . 1 | 4 | My Group’s Collaboration | . 1 | 5 | Our Scrum Process | . 1 | 5 | Submenu with JS Table | . 1 | 5 | Final Project Planning | . 1 | 6 | Project Wire Frame/UML | . 1 | 6 | College Board Video Notes | . 1 | 7 | API Page with Sumbmenu | . 1 | 7 | Error Testing and Challenge | . 1 | 7 | My Group’s API | . 1 | 7 | College Board 1.4 Notes | . 1 | 7 | Our Project’s College Board Criteria | . 1 | 8 | College Board Videos and Notes 4.1 | . 1 | 8 | Identifying and Correcting Errors Challenge | . 1 | 8 | Spell Check API | . 1 | 8/9 | Our Group’s Deployed Flask Site | . 1 | 9 | Project Week One Video Planning | . 1 | 9 | Our Stock API | . 1 | 9 | Project Week One Video | . 1 | 9 | Blog About our API | . 1 | 10 | Our Group’s Plan for our Final Project | . 1 | 11 | My Group’s Final Project | . 1 | 12 | Collegeboard Final and NATM | . 2 | 13 | Binary Math | . 2 | 14-16 | Student Lessons | . 2 | 17 | Scoring Previous CollegeBoard Submissions | .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/my_work",
          "relUrl": "/my_work",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Extra Resources",
          "content": "For When You’re Stuck . Watch these videos. .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/resources",
          "relUrl": "/resources",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "About Me",
          "content": "This website is made by Alexa Carlson, a girl who’s learning how to code in APCSP :) . This is my family . . and of course my super kool twin ! . . Here are some of my besties . . . . My dog . . I do allstar cheerleading . . I love Marvel (especially Spider-Man) . . I love to travel (fyi Spain is the best) . .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page18": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}