{
  
    
        "post0": {
            "title": "My Plan to finish out my CPT Project",
            "content": "Link to my first draft written portion (incldues link to video) . What I still need to do: . clean up dog hair in my project/personalize | ^ alter comments throughut code | go through rubric and ensure that all criteria are hit and that I fully understand the code | go through previous students’ scoring and compare (don’t make same mistakes) | . I plan to complete these last to-dos before/during Spring Break. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/CPT/Plan",
            "relUrl": "/CPT/Plan",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "My Quiz",
            "content": "def question_with_response(promt): print(&quot;Question: &quot; + promt) msg = input() return msg correct = 0 ec_abort = 0 # I created the variable &quot;ec_abort&quot; (stands for extra credit abort) print(&quot;Hey queen, make sure to think out of the box when taking this quiz.&quot;) print(&quot;You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number.&quot;) question_with_response(&quot;Are you ready?&quot;) if ec_abort == 0: rsp = question_with_response(&quot;How old am I?&quot;) if rsp == &quot;16&quot;: print(rsp + &quot; is correct:)&quot;) correct += 1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # The new variable allows me to code so that if the user of my quiz types &quot;Give me 100%&quot;, it skips to the end with a 5/5 if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite color?&quot;) if rsp == &quot;Blue&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If they get the question correct, then the variable &quot;correct&quot; goes up by 1 if ec_abort == 0: rsp = question_with_response(&quot;How many siblings to I have?&quot;) if rsp == &quot;3&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If their answer is incorrect, the amount correct stays the same and it prints &quot;is no bueno:(&quot; if ec_abort == 0: rsp = question_with_response(&quot;What pet do I have?&quot;) if rsp == &quot;A dog&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite subject?&quot;) if rsp == &quot;Math&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 1: print(&quot;You scored 5/5&quot;) if ec_abort == 0: print (&quot;Slayyy you scored &quot; + str(correct) + &quot;/5&quot;) # If they don&#39;t use the &quot;Give me 100%&quot; option, ec_abort is still 0, allowing this step that gives the perentage correct to show . Hey queen, make sure to think out of the box when taking this quiz. You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number. Question: Are you ready? Question: How old am I? 16 is correct:) Question: What is my favorite color? Blue is correct:) Question: How many siblings to I have? Give me 100% BOOM 100% YOU ARE DONE You scored 5/5 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/myquiz",
            "relUrl": "/notebooks/myquiz",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "CollegeBoard Big Idea 2 Quiz Reflection",
            "content": "My Score: 25/25 . . Reflection . Overall, this quiz felt pretty good. I think I am getting much better at reading the questions, identifying the key parts/information, and answering the question. What I realized with a lot of the questions specifically in Big Idea 2 is that collegeboard provides a lot of unecessary information for the question. So, reading what the question is asking for before reading/analyzing all the data provided has been a strategy of mine. Although I did well on this quiz, there were a couple questions that stumped me for a litte. This problem included: | . Confusing Questions/Topics: . Question 17 . . This question confused me a little. The wording of the answer options was weird, casuing me to believe that multiple of the answers should have worked. However, after looking at the question with more thought and taking it slower, I was able to determine the correct answer. | . Binary . I have never been super strong at multiplying/adding in my head. I was one of those kids in elementary school where I had to out into the hallway to practive my multiplication cards. So, calculating how many bits are required/converting binary to decmal has always taken me a little and is definitely not free of error. However, this is the topic that my group is taking on for out project. That means I will only continue to get stronger and faster at it, similar to my multiplication cards after practice. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/BigIdea2reflection",
            "relUrl": "/collegeboard/BigIdea2reflection",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Tool Checks",
            "content": "Versions of Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Packages of Conda Check . conda list . # packages in environment at /home/alexac54767/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/alexac54767/.local/share/jupyter/kernels/bash javascript /home/alexac54767/.local/share/jupyter/kernels/javascript python3 /home/alexac54767/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . python3 /home/alexac54767/.local/share/jupyter/kernels/python3 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/toolchecks",
            "relUrl": "/notebooks/toolchecks",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "My First Jupyter Notebook",
            "content": "print (&quot;Hello, World!&quot;) . Hello, World! .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/myjupyternotebook",
            "relUrl": "/notebooks/myjupyternotebook",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . ? | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): #baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) pixels: 5,846,448 Scaled size: (5000, 3750) pixels: 18,750,000 -- original image -- . Do you think this is a time complexity or space complexity or both problem? . ? | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 263 Alabama . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . 178 1.78 . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,jeyboardInterrupt Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-22-DS-space_time_complexity.ipynb Cell 22 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; for i in numbers: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; for j in numbers: -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-22-DS-space_time_complexity.ipynb#X30sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(i,j) File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:531, in OutStream.write(self, string) 529 is_child = (not self._is_master_process()) 530 # only touch the buffer in the IO thread to avoid races --&gt; 531 self.pub_thread.schedule(lambda: self._buffer.write(string)) 532 if is_child: 533 # mp.Pool cannot be trusted to flush promptly (or ever), 534 # and this helps. 535 if self._subprocess_flush_pending: File ~/anaconda3/lib/python3.9/site-packages/ipykernel/iostream.py:216, in IOPubThread.schedule(self, f) 214 self._events.append(f) 215 # wake event thread (message content is ignored) --&gt; 216 self._event_pipe.send(b&#39;&#39;) 217 else: 218 f() File ~/anaconda3/lib/python3.9/site-packages/zmq/sugar/socket.py:547, in Socket.send(self, data, flags, copy, track, routing_id, group) 540 data = zmq.Frame( 541 data, 542 track=track, 543 copy=copy or None, 544 copy_threshold=self.copy_threshold, 545 ) 546 data.group = group --&gt; 547 return super(Socket, self).send(data, flags=flags, copy=copy, track=track) File zmq/backend/cython/socket.pyx:718, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:765, in zmq.backend.cython.socket.Socket.send() File zmq/backend/cython/socket.pyx:242, in zmq.backend.cython.socket._send_copy() File ~/anaconda3/lib/python3.9/site-packages/zmq/backend/cython/checkrc.pxd:13, in zmq.backend.cython.checkrc._check_rc() KeyboardInterrupt: . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) #print(fibonacci(34)) print(fibonacci(40)) . 102334155 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) print(generate_subsets([1,2,3,4,5,6])) #print(generate_subsets(numbers)) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4], [1, 2, 3, 5, 6], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3], [1, 2, 4, 5, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4], [1, 2, 5, 6], [1, 2, 5], [1, 2, 6], [1, 2], [1, 3, 4, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4], [1, 3, 5, 6], [1, 3, 5], [1, 3, 6], [1, 3], [1, 4, 5, 6], [1, 4, 5], [1, 4, 6], [1, 4], [1, 5, 6], [1, 5], [1, 6], [1], [2, 3, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4], [2, 3, 5, 6], [2, 3, 5], [2, 3, 6], [2, 3], [2, 4, 5, 6], [2, 4, 5], [2, 4, 6], [2, 4], [2, 5, 6], [2, 5], [2, 6], [2], [3, 4, 5, 6], [3, 4, 5], [3, 4, 6], [3, 4], [3, 5, 6], [3, 5], [3, 6], [3], [4, 5, 6], [4, 5], [4, 6], [4], [5, 6], [5], [6], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(37)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 4.035996198654175 seconds 24157817 Time taken: 9.312848806381226 seconds . Hacks . - Record your findings when testing the time elapsed of the different algorithms. . Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | Why is time and space complexity important when choosing an algorithm? | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? | . Complete the Time and Space Complexity analysis questions linked below. Practice .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/2023/03/22/DS-space_time_complexity.html",
            "relUrl": "/2023/03/22/DS-space_time_complexity.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Debugging Example of 2.4a Database with CRUD",
            "content": "Making my own Database with CRUD . My database is a shopping list. Users can create, read, update, and delete items from their list, making it convenient to shop and to stay organized. . link to my 4.a notebook (my database is at the bottom) . My createitem() function (as a part of the menu) - . | Step into the function while debugging - first step in function is to type in the item you want to create, in this example, I am creating the item “Mango” . | The debugger shows every step that the function goes through. - This function creates the object and then defines its attributes. The attributes are displayed on the left, which in this case are “Mango”, “2”, and “Sprouts” . | The menu then displays the created item . | Finally, the newly created item appears in the database. . | . - The other CRUD functions incorporated work in a similar way. When I use the debugger, I can see every step that the function goes through, as well as its result. I think it is so interesting to see how every function is called within the menu and the program then goes to the function and performs it line by line. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/debugging/crud",
            "relUrl": "/debugging/crud",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . - Database schema is the structure and how the data is organized and defined. . What is the purpose of identity Column in SQL database? An identity column in SQL database makes it so it can easily identify objects, as well as keep track of them, edit, and delete them. This way, the database is more organized. | . | What is the purpose of a primary key in SQL database? The primary key in an SQL database is to uniquely label/identify rows in the table | . | What are the Data Types in SQL table? string, numeric, date/time | . | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? A connection object is a unique session with a data source. I think this means that every time SQl connects, it has data specific to the database. This is what creates a conn that connects to the database. | . | Same for cursor object? A cursor object is &quot;a mechanism that enables traversal over the records in a database&quot;. I think these objects allow for the database to take inputs from the user. | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? The database schema are the attricutes in the object (ex:id, name, uid, passowrd, dob)- Is &quot;results&quot; an object? How do you know? | Yes, results is an object. I know this since it has variables and functions. | . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . OperationalError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-16-AP-unit2-4b.ipynb Cell 6 in &lt;cell line: 24&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; cursor.close() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; conn.close() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; read() /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-16-AP-unit2-4b.ipynb Cell 6 in read() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; cursor = conn.cursor() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; # Execute a SELECT statement to retrieve data from a table &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; # Print the results &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2023-03-16-AP-unit2-4b.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; if len(results) == 0: OperationalError: no such table: users . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? I like the OOP programming create() funciton better. It is more efficient and is in fewer lines. However, it does require that you defined all your setters and getters previously. | . | Explain purpose of SQL INSERT. Is this the same as User init? SQL INSERT is a command that will add the data into the database table. It is &quot;activated&quot; seperately, versus the init in the OOP model runs all the functions under init. | . | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? The hacked part makes it so if a user types in a paswword that is less then 2 characters, they will get a message that says the have been hacked and will set their password to &quot;gothackednewpassword123&quot;. | . | Explain try/except, when would except occur? The try/except act as conditionals where they will attempt to pursue code, and then if those conditions aren&#39;t met/fail, it will run the except code. | . | What code seems to be repeated in each of these examples to point, why is it repeated? It seems that defining conn and cursor before the try and except is repeated everytime. Also, the cursor.clos() and the conn.close. I think this may be becuase the connection object, and how the connection is unique everytime. | . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? Yes, DELETE is a dangerous opertation since it cannot be reversed. The record is gone forever. | . | In the print statemements, what is the &quot;f&quot; and what does {uid} do? the &quot;f&quot; and {} form formatted string literals. They allow the uid to be replaced with specific data to the situation. | . | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? The menu repeats so it can perform multiple CRUD operations. | . | Could you refactor this menu? Make it work with a List? I&#39;m not exactly sure how I could refactor this menu. Maybe I could put all the CRUD operation functions into a list, and then iterate through the list to call the functions. I could name it CRUD = [&#39;create()&#39;, &#39;read()&#39;, &#39;update()&#39;, &#39;delete()&#39;, &#39;schema()&#39;]. This would make the code more efficient. | . | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Perform Jupyter &#39;Run All&#39; prior to starting menu . Does this implementation have procedural abstraction? . Yes, this imperative style has procedural abstraction. This style uses recoursion, which is similar to a while loop, but is not a while loop. However, it still acts as iteration, with improved timing and efficiency. | . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. &lt;-recursion | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object:- app = Flask(name) creates the object - app is getting assigned the attributes (setters) | SQLAlchemy db object: setting the database object as the properties from SQLAlchemy | . | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # app = Flask(_name_) creates the object # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False # app is getting assigned the attributes (setters) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # setting the database object as the properties from SQLAlchemy # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User:- defining the class template for &quot;Users&quot; - we will use this template to create objects for the class | db.Model inheritance: (db.Model) is called inheritance -&gt; inheriting the database properties into our class | allows us to use these methods to interact with our database, aka adding to our template | . | init method: &quot;constructor&quot; | used to help us instantiate an object from our User class | makes an object using the Class name and attributes as parameters | . | @property, @&lt;column&gt;.setter: setters: allow us to change the attributes | getters: enable us to retrieve data out of the objects | . | create, read, update, delete methods: Can interact with the database using these methods | create: forms the data in the database | read: retrieves the data from the database | update: updates the data in the database | delete: deletes the data in the database | . | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): # defining the class template for &quot;Users&quot;. We will use this template to create objects for the class __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property # getters: enable us to retrieve data out of the objects def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter # setters: allow us to change the attributes def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None # code is a definition (a template) but isn&#39;t instantiated yet so there is no output . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object:- the db object uses the properties from the SQLAlchemy library to build the rows and collumns in the tables with the user list that has the attributes as data 2. User Object Constructors: all the tester users have have &quot;User&quot; before the parameters, which constructs the data into the User class. | . | Try / Except: the program will attempt the code that is under &quot;try&quot; and then if it fails, it will run the &quot;except&quot; code | in this case, it will try to add the data to the database, however, if it already exists it will print &quot;Records exist uid {user.uid}, or error&quot; | . | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): # sets the properties of the object as we create it with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) #makes an object using the Class name and attributes as parameters u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by:- will result in true or false - identifies credentials | user.password: -will check if the passoword exists in the databse if you uncomment out check credentials and change the password it will display false | . | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() # can identify user crdentials because of ORM Query object return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False # check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except:- this step is to make sure the user doesn&#39;t already exist in the databse - if the user id already exists, it will print it if it doesn&#39;t, it will continue onto the rest of the code (adding to databse) | . | user = User(...): this piece defines &quot;user&quot; as a variable that contains all the attributes of the person from the User class | . | user.dob and try/except: this piece of code it checking for garbage data | it will try to define the user&#39;s date of birth with their input | if it isn&#39;t in the correct format it will set the dob to the defualt (current date) and print that the input was invalid | . | user.create() and try/except it will try user.create() | user.create() is defined earlier and has it&#39;s own tey/except, that will filter out repeats or garbage data | in this code cell, the try will run that function but if it fails it will print an error | . | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all:- this function is requesting all the data/objects from the User class/database 2. json_ready assignment, google List Comprehension: list comprehension makes it so you can create a new list that you would originally need 2+ seperate steps for (loop and then new list) in 1 | the json_ready assignment performs a for loop that reads the user data in the table and automatically appends the the users in the json_ready list | this assignment would originally need to be in more steps, with defining the list first, and then the loop that appends to the json_ready list | . | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list, shorter syntax return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . My Own Databse . Incorporating CRUD into my own database . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class Shop(db.Model): # defining the class template for &quot;Users&quot;. We will use this template to create objects for the class __tablename__ = &#39;shops&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _item = db.Column(db.String(255), unique=False, nullable=False) _storename = db.Column(db.String(255), unique=False, nullable=False) _quantity = db.Column(db.String, unique=False, nullable=False) _price = db.Column(db.Integer, unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, item, storename, quantity, price): self._item = item # variables with self prefix become part of the object, self._storename = storename self._quantity = quantity self._price = price # a name getter method, extracts name from object @property # getters: enable us to retrieve data out of the objects def item(self): return self._item # a setter function, allows name to be updated after initial object creation @item.setter # setters: allow us to change the attributes def item(self, item): self._item = item # a getter method, extracts uid from object @property def storename(self): return self._storename # a setter function, allows uid to be updated after initial object creation @storename.setter def storename(self, storename): self._uid = storename # a name getter method, extracts name from object @property # getters: enable us to retrieve data out of the objects def quantity(self): return self._quantity # a setter function, allows name to be updated after initial object creation @quantity.setter # setters: allow us to change the attributes def quantity(self, quantity): self._quantity = quantity # a name getter method, extracts name from object @property # getters: enable us to retrieve data out of the objects def price(self): return self._price # a setter function, allows name to be updated after initial object creation @price.setter # setters: allow us to change the attributes def price(self, price): self._price = price # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;item&quot;: self.item, &quot;storename&quot;: self.storename, &quot;quantity&quot;: self.quantity, &quot;price&quot;: self.price, } # CRUD update: updates item, storename, quantity, price # returns self def update(self, item=&quot;&quot;, storename=&quot;&quot;, quantity=&quot;&quot;, price=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(item) &gt; 0: self.item = item if len(storename) &gt; 0: self.storename = storename if len(quantity) &gt; 0: self.quantity = quantity if len(price) &gt; 0: self.price = price db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None # code is a definition (a template) but isn&#39;t instantiated yet so there is no output . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initShops(): # sets the properties of the object as we create it with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; i1 = Shop(item=&#39;Milk&#39;, storename=&#39;Vons&#39;, quantity=&#39;1 gallon&#39;, price=&#39;4.38&#39;) #makes an object using the Class name and attributes as parameters i2 = Shop(item=&#39;Hamburger Buns&#39;, storename=&#39;Costco&#39;, quantity=&#39;3 bags&#39;, price=&#39;14.34&#39;) i3 = Shop(item=&#39;Juice&#39;, storename=&#39;Albertsons&#39;, quantity=&#39;1 jug&#39;, price=&#39;3.23&#39;) i4 = Shop(item=&#39;Soup&#39;, storename=&#39;Vons&#39;, quantity=&#39;4 cans&#39;, price=&#39;15.26&#39;) i5 = Shop(item=&#39;Crackers&#39;, storename=&#39;Albertsons&#39;, quantity=&#39;1 box&#39;, price=&#39;5.68&#39;) i6 = Shop(item=&#39;Bananas&#39;, storename=&#39;Sprouts&#39;, quantity=&#39;1 bunch&#39;, price=&#39;8.09&#39;) items = [i1, i2, i3, i4, i5, i6] &quot;&quot;&quot;Builds sample item/note(s) data&quot;&quot;&quot; for item in items: try: &#39;&#39;&#39;add item to table&#39;&#39;&#39; object = item.create() print(f&quot;Created new item {object.item}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad&#39;&#39;&#39; print(f&quot;error, bad data&quot;) initShops() . Created new item Milk Created new item Hamburger Buns Created new item Juice Created new item Soup Created new item Crackers Created new item Bananas . def createitem(): item = input(&quot;Enter the item you want to purchase:&quot;) storename = input(&quot;Enter the store you will get the item from:&quot;) quantity = input(&quot;Enter the quantity&quot;) price = input(&quot;Enter the price&quot;) # Initialize User object before date item = Shop(item=item, storename=storename, quantity=quantity, price=price ) # write object to database with app.app_context(): try: object = item.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error&quot;) createitem() . Created {&#39;id&#39;: 7, &#39;item&#39;: &#39;Cookies&#39;, &#39;storename&#39;: &#39;Costco&#39;, &#39;quantity&#39;: &#39;3 boxes&#39;, &#39;price&#39;: 14.56} . # SQLAlchemy extracts all users from database, turns each user into JSON def readlist(): with app.app_context(): table = Shop.query.all() json_ready = [item.read() for item in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list, shorter syntax return json_ready readlist() . [{&#39;id&#39;: 1, &#39;item&#39;: &#39;Milk&#39;, &#39;storename&#39;: &#39;Vons&#39;, &#39;quantity&#39;: &#39;1 gallon&#39;, &#39;price&#39;: 4.38}, {&#39;id&#39;: 2, &#39;item&#39;: &#39;Hamburger Buns&#39;, &#39;storename&#39;: &#39;Costco&#39;, &#39;quantity&#39;: &#39;3 bags&#39;, &#39;price&#39;: 14.34}, {&#39;id&#39;: 3, &#39;item&#39;: &#39;Juice&#39;, &#39;storename&#39;: &#39;Albertsons&#39;, &#39;quantity&#39;: &#39;1 jug&#39;, &#39;price&#39;: 3.23}, {&#39;id&#39;: 4, &#39;item&#39;: &#39;Soup&#39;, &#39;storename&#39;: &#39;Vons&#39;, &#39;quantity&#39;: &#39;4 cans&#39;, &#39;price&#39;: 15.26}, {&#39;id&#39;: 5, &#39;item&#39;: &#39;Crackers&#39;, &#39;storename&#39;: &#39;Albertsons&#39;, &#39;quantity&#39;: &#39;1 box&#39;, &#39;price&#39;: 5.68}, {&#39;id&#39;: 6, &#39;item&#39;: &#39;Bananas&#39;, &#39;storename&#39;: &#39;Sprouts&#39;, &#39;quantity&#39;: &#39;1 bunch&#39;, &#39;price&#39;: 8.09}, {&#39;id&#39;: 7, &#39;item&#39;: &#39;Cookies&#39;, &#39;storename&#39;: &#39;Costco&#39;, &#39;quantity&#39;: &#39;3 boxes&#39;, &#39;price&#39;: 14.56}] . def deleteitem(): item = input(&quot;Enter the item you want to delete:&quot;) with app.app_context(): result = Shop.query.filter_by(_item=item).first() if result is None: print(&quot;Item not found&quot;) else: result.delete() print(&quot;Deleted item:&quot;, result._item) deleteitem() . Deleted item: Soup . def updateitem(): useritem = input(&quot;Enter the item you want to update: &quot;) with app.app_context(): item = Shop.query.filter_by(_item=useritem).first() if item is None: print(&quot;Item not found&quot;) else: new_item = input(&quot;Enter new item name (press enter to keep current value): &quot;) new_storename = input(&quot;Enter new store name (press enter to keep current value): &quot;) new_quantity = input(&quot;Enter new quantity (press enter to keep current value): &quot;) new_price = input(&quot;Enter new price (press enter to keep current value): &quot;) if new_item: item.item = new_item if new_storename: item.storename = new_storename if new_quantity: item.quantity = new_quantity if new_price: item.price = new_price db.session.commit() print(&quot;Updated item:&quot;, item) updateitem() . Updated item: {&#34;id&#34;: 7, &#34;item&#34;: &#34;Oatmeal Cookies&#34;, &#34;storename&#34;: &#34;Costco&#34;, &#34;quantity&#34;: &#34;3 boxes&#34;, &#34;price&#34;: 14.56} . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schemaitem(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;shops&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schemaitem() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_item&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_storename&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_quantity&#39;, &#39;VARCHAR&#39;, 1, None, 0) (4, &#39;_price&#39;, &#39;INTEGER&#39;, 1, None, 0) . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: createitem() elif operation.lower() == &#39;r&#39;: Shoppinglist = readlist() print(Shoppinglist) elif operation.lower() == &#39;u&#39;: updateitem() elif operation.lower() == &#39;d&#39;: deleteitem() elif operation.lower() == &#39;s&#39;: schemaitem() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Deleted item: Grapes .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "CollegeBoard 2.2 and 2.3 Quizes Reflection",
            "content": "Using Programs with Data Quiz . Score: 6/6 . . Data Compression Quiz . Score: 2/3 . . Corrections: . . I think I wronly assumed when I read this question. It was the first question of the quiz, and I think I read it too quickly and didn’t fully pay attention to detail. I didn’t realize that my answer was refering to security, and not the loss of data during compression. | . Extracting Information from Data Quiz . Score: 6/6 . . Binary Numbers Quiz . Score: 6/6 . . Overall, I think I have learned a lot about these topics. There were definitely a few questions that stumped me and I had to ask the people in my team. However, I generally feel pretty confident in these topics and like I could be much better/more efficient if I were to take the quizes again. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/quizesreflection",
            "relUrl": "/collegeboard/quizesreflection",
            "date": " • Mar 11, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "My Notes/Questions . Pandas: a library that makes formatting datasets much more efficient and easier to keep track of | some functions within Pandas: analyzing, cleaning, manipulating data | dataframe: another name for a data table | metadata: the darker squares in the Data Frame (aka data table) | nil or nol = missing (like doesn&#39;t exist) | ^ garbage data needs to be cleaned using Pandas | csv = comma seperated values | like a cat: you start petting at the head and stop at the tail | head= top of list | tail= bottom of list | is there a way you could identify garbage data and then change it to fit? Ex: could you change the string &quot;junior&quot; to &quot;11&quot;? | . Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7588235294117647 LogisticRegression Accuracy: 0.788235294117647 . /home/alexac54767/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( . Using Chat GPT to format a dataset about food nutrients (related to our fitness project!) . import pandas as pd # Load the data df = pd.read_csv(&#39;/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/files/nutrients_csvfile.csv&#39;) # Print the column names print(df.columns) . Index([&#39;Food&#39;, &#39;Measure&#39;, &#39;Grams&#39;, &#39;Calories&#39;, &#39;Protein&#39;, &#39;Fat&#39;, &#39;Sat.Fat&#39;, &#39;Fiber&#39;, &#39;Carbs&#39;, &#39;Category&#39;], dtype=&#39;object&#39;) . import pandas as pd pd.set_option(&#39;display.max_rows&#39;, 332) # Load the data df = pd.read_csv(&#39;/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/files/nutrients_csvfile.csv&#39;) # Keep only required columns df = df.loc[:, [&#39;Food&#39;, &#39;Grams&#39;, &#39;Calories&#39;, &#39;Protein&#39;, &#39;Fat&#39;, &#39;Sat.Fat&#39;, &#39;Fiber&#39;, &#39;Carbs&#39;]] # Drop rows with missing values df.dropna(inplace=True) # Convert binary categorical variable to numeric df[&#39;Calories&#39;] = df[&#39;Calories&#39;].apply(lambda x: 1 if x == &#39;Low&#39; else 0) print(df) . Food Grams Calories Protein Fat 0 Cows&#39; milk 976 0 32 40 1 Milk skim 984 0 36 t 2 Buttermilk 246 0 9 5 3 Evaporated, undiluted 252 0 16 20 4 Fortified milk 1,419 0 89 42 5 Powdered milk 103 0 27 28 6 skim, instant 85 0 30 t 7 skim, non-instant 85 0 30 t 8 Goats&#39; milk 244 0 8 10 9 (1/2 cup ice cream) 540 0 24 24 10 Cocoa 252 0 8 11 11 skim. milk 250 0 18 4 12 (cornstarch) 248 0 9 10 13 Custard 248 0 13 14 14 Ice cream 188 0 6 18 15 Ice milk 190 0 9 10 16 Cream or half-and-half 120 0 4 15 17 or whipping 119 0 2 44 18 Cheese 225 0 30 11 19 uncreamed 225 0 38 t 20 Cheddar 17 0 4 6 21 Cheddar, grated cup 56 0 14 19 22 Cream cheese 28 0 2 11 23 Processed cheese 28 0 7 9 24 Roquefort type 28 0 6 9 25 Swiss 28 0 7 8 26 Eggs raw 100 0 12 12 27 Eggs Scrambled or fried 128 0 13 16 28 Yolks 34 0 6 10 29 Butter 14 0 t 11 30 Butter 112 0 114 115 31 Butter 112 0 114 115 32 Hydrogenated cooking fat 100 0 0 100 33 Lard 110 0 0 110 34 Margarine 112 0 t 91 35 Margarine, 2 pat or 14 0 t 11 36 Mayonnaise 15 0 t 12 37 Corn oil 14 0 0 14 38 Olive oil 14 0 0 14 39 Safflower seed oil 14 0 0 14 40 French dressing 15 0 t 6 41 Thousand Island sauce 15 0 t 8 43 Bacon 16 0 4 8 44 Beef 85 0 23 16 45 Hamburger 85 0 21 17 46 Ground lean 85 0 24 10 47 Roast beef 85 0 16 36 48 Steak 85 0 20 27 49 Steak, lean, as round 85 0 24 12 50 Corned beef 85 0 22 10 51 Corned beef hash canned 85 0 12 8 52 Corned beef hash Dried 56 0 19 4 53 Pot-pie 227 0 18 28 54 Corned beef hash Stew 235 0 15 10 55 chicken 85 0 23 9 56 Fried, breast or leg and thigh chicken 85 0 25 15 57 Roasted chicken 100 0 25 20 58 Chicken livers, fried 100 0 22 14 59 Duck, domestic 100 0 16 28 60 Lamb, chop, broiled 115 0 24 35 61 Leg roasted 86 0 20 14 62 Shoulder, braised 85 0 18 23 63 Pork, chop, 1 thick 100 0 16 21 64 Ham pan-broiled 85 0 16 22 65 Ham, as 57 0 13 13 66 Ham, canned, spiced 57 0 8 14 67 Pork roast 85 0 21 24 68 Pork sausage 100 0 18 44 69 Turkey 100 0 27 15 70 Veal 85 0 23 9 71 Roast 85 0 13 14 72 Clams 85 0 12 1 73 Cod 100 0 28 5 74 Crab meat 85 0 14 2 75 Fish sticks fried 112 0 19 10 76 Flounder 100 0 30 8 77 Haddock 85 0 16 5 78 Halibut 100 0 26 8 79 Herring 100 0 22 13 80 Lobster 100 0 18 1 81 Mackerel 85 0 18 9 82 Oysters 230 0 232 233 83 Oyster stew 85 0 19 6 84 Salmon 85 0 17 5 85 Sardines 85 0 22 9 86 Scallops 100 0 18 8 87 Shad 85 0 20 10 88 Shrimp 85 0 23 1 89 Swordfish 100 0 27 6 90 Tuna 85 0 25 7 91 Artichoke 100 0 2 t 92 Asparagus 96 0 1 t 93 Beans 125 0 1 t 94 Lima 160 0 8 t 95 Lima, dry, cooked 192 0 16 t 96 Navy, baked with pork 200 0 11 6 97 Red kidney 260 0 15 1 98 Bean sprouts 50 0 1 t 99 Beet greens 100 0 2 t 101 Broccoli 150 0 5 t 102 Brussels sprouts 130 0 6 t 103 Sauerkraut 150 0 1 t 104 Steamed cabbage 170 0 2 t 105 Carrots 150 0 1 t 106 Raw, grated 110 0 1 t 107 Strips, from raw 50 0 t t 108 Cauliflower 120 0 3 t 109 Celery 100 0 1 t 110 Stalk raw 40 0 1 t 111 Chard steamed 150 0 2 t 112 Collards 150 0 5 t 113 Corn 100 0 3 1 114 cooked or canned 200 0 5 t 115 Cucumbers 50 0 t 0 116 Dandelion greens 180 0 5 1 117 Eggplant 180 0 2 t 118 Endive 57 0 1 t 119 Kale 110 0 4 1 120 Kohlrabi 140 0 2 t 121 Lambs quarters, steamed 150 0 5 t 122 Lentils 200 0 15 t 123 Lettuce 100 0 1 t 124 Iceberg 100 0 t t 125 Mushrooms canned 120 0 2 t 126 Mustard greens 140 0 3 t 127 Okra 100 0 1 t 128 Onions 210 0 2 t 129 Raw, green 50 0 t t 130 Parsley 50 0 t t 131 Parsnips 155 0 2 1 132 Peas 100 0 3 t 133 Fresh, steamed peas 100 0 5 t 135 Split cooked peas 100 0 8 t 136 heated peas 100 0 3 t 137 Peppers canned 38 0 t t 138 Peppers Raw, green, sweet 100 0 1 t 139 Peppers with beef and crumbs 150 0 19 9 140 Potatoes, baked 100 0 2 t 141 French-fried 60 0 -1 7 142 Potatoes Mashed with milk and butter 200 0 4 12 143 Potatoes, pan-tried 100 0 4 14 144 Scalloped with cheese potatoes 100 0 6 8 145 Steamed potatoes before peeling 100 0 2 t 146 Potato chips 20 0 1 7 147 Radishes 50 0 t 0 148 Rutabagas 100 0 t 0 149 Soybeans 200 0 22 11 150 Spinach 100 0 3 t 151 Squash 210 0 1 t 152 Winter, mashed 200 0 4 t 153 Sweet potatoes 110 0 2 1 154 Candied 175 0 2 6 155 Tomatoes 240 0 2 t 156 Raw, 2 by 2 1/2 150 0 1 t 157 Tomato juice 240 0 2 t 158 Tomato catsup 17 0 t t 159 Turnip greens 145 0 4 1 160 Turnips, steamed 155 0 1 t 161 Watercress stems, raw 50 0 1 t 162 Apple juice canned 250 0 t 0 163 Apple vinegar 100 0 t 0 164 Apples, raw 130 0 t t 165 Stewed or canned 240 0 t t 166 Apricots 250 0 2 t 167 Dried, uncooked 75 0 4 t 168 Fresh 114 0 1 t 169 Nectar, or juice 250 0 1 t 170 Avocado 108 0 2 18 171 Banana 150 0 1 t 172 Blackberries 144 0 2 1 173 Blueberries 250 0 1 t 174 Cantaloupe 380 0 1 t 175 Cherries 257 0 2 1 176 Fresh, raw 114 0 1 t 177 Cranberry sauce sweetened 277 0 t t 178 Dates 178 0 4 t 179 Figs 42 0 2 t 180 Fresh, raw figs 114 0 2 t 181 figs Canned with syrup 115 0 1 t 182 Fruit cocktail, canned 256 0 1 t 183 Grapefruit sections 250 0 1 t 184 Grapefruit, fresh, 5&#34; diameter 285 0 1 t 185 Grapefruit juice 250 0 1 t 186 Grapes 153 0 1 t 187 European, as Muscat, Tokay 160 0 1 t 188 Grape juice 250 0 1 t 189 Lemon juice 125 0 t t 190 Lemonade concentratefrozen 220 0 t t 191 Limeade concentrate frozen 218 0 t t 192 Olives large 65 0 1 10 193 OlivesRipe 65 0 1 13 194 Oranges 3&#34; diameter 180 0 2 t 195 Orange juice 250 0 2 t 196 Frozen 210 0 2 t 197 Papaya 200 0 1 t 198 Peaches 257 0 1 t 199 Fresh, raw 114 0 1 t 200 Pears 255 0 1 t 201 Raw, 3 by 2V 182 0 1 1 202 Persimmons 125 0 1 t 203 Pineapple 122 0 t t 204 Pineapple Crushed 260 0 1 t 205 Raw, diced 140 0 1 t&#39; 206 Pineapple juice 250 0 1 t 207 Plums 256 0 1 t 208 Raw, 2&#34; diameter 60 0 t t 209 Prunes 270 0 3 1 210 Prune juice 240 0 1 t 211 Raisins 88 0 2 t 212 Raspberries 100 0 t t 213 Raw, red 100 0 t t 214 Rhubarb sweetened 270 0 1 t 215 Strawberries 227 0 1 t 216 Raw 149 0 t t 217 Tangerines 114 0 1 t 218 Watermelon 925 0 2 1 219 Biscuits 38 0 3 4 220 Bran flakes 25 0 3 t 221 Bread, cracked wheat 23 0 2 1 222 Rye 23 0 2 1 223 White, 20 slices, or 454 0 39 15 224 Whole-wheat 454 0 48 14 225 Whole-wheat 23 0 2 1 226 Corn bread ground meal 50 0 3 4 227 Cornflakes 25 0 2 t 228 Corn grits cooked 242 0 8 t 229 Corn meal 118 0 9 4 230 Crackers 14 0 1 1 231 Soda, 2 1/2 square 11 0 1 1 232 Farina 238 0 3 t 233 Flour 110 0 39 22 234 Wheat (all purpose) 110 0 12 1 235 Wheat (whole) 120 0 13 2 236 Macaroni 140 0 5 1 237 Baked with cheese 220 0 18 25 238 Muffins 48 0 4 5 239 Noodles 160 0 7 2 240 Oatmeal 236 0 5 3 241 Pancakes 4&#34; diam. 108 0 7 9 242 Wheat, pancakes 4&#34; diam. 108 0 7 9 243 Pizza 14&#34; diam. 75 0 8 6 244 Popcorn salted 28 0 3 7 245 Puffed rice 14 0 t t 246 Puffed wheat presweetened 28 0 1 t 247 Rice 208 0 15 3 248 Converted 187 0 14 t 249 White 191 0 14 t 250 Rice flakes 30 0 2 t 251 Rice polish 50 0 6 6 252 Rolls 50 0 3 12 253 of refined flour 38 0 3 2 254 whole-wheat 40 0 4 1 255 Spaghetti with meat sauce 250 0 13 10 256 with tomatoes and cheese 250 0 6 5 257 Spanish rice 250 0 4 4 258 Shredded wheat biscuit 28 0 3 1 259 Waffles 75 0 8 9 260 Wheat germ 68 0 17 7 261 Wheat-germ cereal toasted 65 0 20 7 262 Wheat meal cereal unrefined 30 0 4 1 263 Wheat, cooked 200 0 12 1 264 Bean soups 250 0 8 5 265 Beef soup 250 0 6 4 266 Bouillon 240 0 5 0 267 chicken soup 250 0 4 2 268 Clam chowder 255 0 5 2 269 Cream soups 255 0 7 12 270 Noodle 250 0 6 4 271 Split-pea soup 250 0 8 3 272 Tomato soup 245 0 6 7 273 Vegetable 250 0 4 2 274 Apple betty 100 0 1 4 275 Bread pudding 200 0 11 12 276 Cakes 40 0 3 t 277 Chocolate fudge 120 0 5 14 278 Cupcake 50 0 3 3 279 Fruit cake 30 0 2 4 280 Gingerbread 55 0 2 7 281 Plain, with no icing 55 0 4 5 282 Sponge cake 40 0 3 2 283 Candy 25 0 t 3 284 Chocolate creams 30 0 t 4 285 Fudge 90 0 t 12 286 Hard candies 28 0 t 0 287 Marshmallows 30 0 1 0 288 Milk chocolate 56 0 2 6 289 Chocolate syrup 40 0 t t 290 Doughnuts 33 0 2 7 291 Gelatin, made with water 239 0 4 t 292 Honey 42 0 t 0 293 Ice cream 300 0 0 0 294 Ices 150 0 0 0 295 preserves 20 0 0 0 296 Jellies 20 0 0 0 297 Molasses 20 0 0 0 298 Cane Syrup 20 0 0 0 299 9&#34; diam. pie 135 0 3 13 300 Cherry Pie 135 0 3 13 301 Custard 130 0 7 11 302 Lemon meringue 120 0 4 12 303 Mince 135 0 3 9 304 Pumpkin Pie 130 0 5 12 305 Puddings Sugar 200 0 0 0 306 3 teaspoons sugar 12 0 0 0 307 Brown, firm-packed, dark sugar 220 0 0 t 308 Syrup 40 0 0 0 309 table blends sugar 40 0 0 0 310 Tapioca cream pudding 250 0 10 10 311 Almonds 70 0 13 38 312 roasted and salted 70 0 13 40 313 Brazil nuts 70 0 10 47 314 Cashews 70 0 12 32 315 coconut sweetened 50 0 1 20 316 Peanut butter 50 0 12 25 317 Peanut butter, natural 50 0 13 24 318 Peanuts 50 0 13 25 319 Pecans 52 0 5 35 320 Sesame seeds 50 0 9 24 321 Sunflower seeds 50 0 12 26 322 Walnuts 50 0 7 32 323 Beer 480 0 t 0 324 Gin 28 0 0 0 325 Wines 120 0 t 0 326 Table (12.2% alcohol) 120 0 t 0 327 Carbonated drinks Artificially sweetened 346 0 0 0 328 Club soda 346 0 0 0 329 Cola drinks 346 0 0 0 330 Fruit-flavored soda 346 0 0 0 331 Ginger ale 346 0 0 0 332 Root beer 346 0 0 0 333 Coffee 230 0 t 0 334 Tea 230 0 0 t Sat.Fat Fiber Carbs 0 36 0 48 1 t 0 52 2 4 0 13 3 18 0 24 4 23 1.4 119 5 24 0 39 6 t 0 42 7 t 1 42 8 8 0 11 9 22 0 70 10 10 0 26 11 3 1 13 12 9 0 40 13 11 0 28 14 16 0 29 15 9 0 32 16 13 0 5 17 27 1 3 18 10 0 6 19 t 0 6 20 5 0 t 21 17 0 1 22 10 0 1 23 8 0 t 24 8 0 t 25 7 0 t 26 10 0 t 27 14 0 1 28 8 0 t 29 10 0 t 30 116 117 118 31 116 117 118 32 88 0 0 33 92 0 0 34 76 0 t 35 9 0 t 36 5 0 t 37 5 0 0 38 3 0 0 39 3 0 0 40 2 0 2 41 3 0 1 43 7 0 1 44 15 0 0 45 15 0 0 46 9 0 0 47 35 0 0 48 25 0 0 49 11 0 0 50 9 0 0 51 7 t 6 52 4 0 0 53 25 t 32 54 9 t 15 55 7 0 0 56 11 0 0 57 16 0 0 58 12 0 2.30 59 0 0 0 60 33 0 0 61 14 0 0 62 21 0 0 63 18 0 0 64 19 0 0 65 11 0 0 66 12 0 1 67 21 0 0 68 40 0 0 69 0 0 0 70 8 0 0 71 13 0 0 72 0 0 2 73 0 0 0 74 0 0 1 75 5 0 8 76 0 0 0 77 4 0 6 78 0 0 0 79 0 0 0 80 0 0 t 81 0 a 0 82 234 235 236 83 1 0 0 84 1 0 0 85 4 0 0 86 0 0 10 87 0 0 0 88 0 0 0 89 0 0 0 90 3 0 0 91 t 2 10 92 t 0.5 3 93 t 0.8 6 94 t 3.0 24 95 t 2 48 96 6 2 37 97 0 2.5 42 98 0 0.3 3 99 0 1.4 6 101 0 1.9 8 102 0 1.7 12 103 0 1.2 7 104 0 1.3 9 105 0 0.9 10 106 0 1.2 10 107 0 0.5 5 108 0 1 6 109 0 1 4 110 0 0.3 1 111 0 1.4 7 112 0 2 8 113 t 0.8 21 114 0 1.6 41 115 0 0.2 1 116 0 3.2 16 117 0 1.0 9 118 0 0.6 2 119 0 0.9 8 120 0 1.5 9 121 0 3.2 7 122 0 2.4 38 123 0 0.5 2 124 0 0.5 3 125 0 t 4 126 0 1.2 6 127 0 1 7 128 0 1.6 18 129 0 1 5 130 0 t t 131 0 3 22 132 0 0.1 13 133 0 2.2 12 135 0 0.4 21 136 0 1 10 137 0 t 2 138 0 1.4 6 139 8 1 24 140 0 0.5 22 141 3 0.4 20 142 11 0.7 28 143 6 0.40 33 144 7 0.40 14 145 0 0.40 19 146 4 t 10 147 0 0.3 2 148 0 1.4 8 149 0 3.2 20 150 0 1 3 151 0 0.6 8 152 0 2.6 23 153 0 1 36 154 5 1.5 80 155 0 1 9 156 0 0.6 6 157 0 0.6 10 158 0 t 4 159 0 1.8 8 160 0 1.8 9 161 0 0.3 1 162 0 0 34 163 0 0 3 164 0 1 18 165 0 2 26 166 0 1 57 167 0 1 50 168 0 0.70 14 169 0 2 36 170 12 1.80 6 171 0 0.9 23 172 0 6.60 19 173 0 2 65 174 0 2.20 9 175 0 2 26 176 0 0.8 15 177 0 1.2 142 178 0 3.6 134 179 0 1.9 30 180 0 1 22 181 0 1 32 182 0 0.5 50 183 0 0.5 44 184 t 1 14 185 0 1 24 186 0 0.8 16 187 0 0.7 26 188 0 t 42 189 0 t 10 190 0 t 112 191 0 t 108 192 9 0.8 3 193 12 1 1 194 t 1 16 195 0 0.2 25 196 t 0.4 78 197 0 1.8 18 198 0 1 52 199 0 0.6 10 200 0 2 50 201 0 2 25 202 0 2 20 203 0 0.4 26 204 0 0.7 55 205 0 0.6 19 206 0 0.2 32 207 0 0.7 50 208 0 0.2 7 209 0 0.8 81 210 0 0.7 45 211 0 0.7 82 212 0 2 25 213 0 5 14 214 0 1.9 98 215 0 1.3 60 216 0 1.9 12 217 0 1 10 218 0 3.6 29 219 3 t 18 220 0 0.10 32 221 1 0.10 12 222 1 0.10 12 223 12 9.00 229 224 10 67.50 216 225 0 0.31 11 226 2 0.30 15 227 0 0.1 25 228 0 0.2 27 229 2 1.6 74 230 0 t 10 231 0 t 8 232 0 8 22 233 0 2.9 33 234 0 0.3 84 235 0 2.8 79 236 0 0.1 32 237 24 t 44 238 4 t 19 239 2 0.1 37 240 2 4.6 26 241 0 0.1 28 242 0 0.1 28 243 5 t 23 244 2 0.5 20 245 0 t 12 246 0 0.6 26 247 0 1.2 154 248 0 0.4 142 249 0 0.3 150 250 0 0.1 26 251 0 1.2 28 252 11 0.1 23 253 2 t 20 254 0 0.1 20 255 6 0.50 35 256 3 0.50 36 257 0 1.20 40 258 0 0.70 23 259 1 0.10 30 260 3 2.50 34 261 3 2.50 36 262 0 0.70 25 263 0 4.40 35 264 4 0.60 30 265 4 0.50 11 266 0 0 0 267 2 0 10 268 8 0.50 12 269 11 1.20 18 270 3 0.20 13 271 3 0.50 25 272 6 0.50 22 273 2 0 14 274 0 0.5 29 275 11 0.20 56 276 0 0 23 277 12 0.3 70 278 2 t 31 279 3 0.2 17 280 6 t 28 281 4 t 31 282 2 0 22 283 3 0 19 284 4 0 24 285 11 0.1 80 286 0 0 28 287 0 0 23 288 6 0.2 44 289 t 0 22 290 4 t 17 291 t 0 36 292 0 0 30 293 12 10 0 294 0 0 48 295 0 t 14 296 0 0 13 297 0 8 11 298 0 0 13 299 11 0.1 53 300 11 0.1 55 301 10 0 34 302 10 0.1 45 303 8 0.70 62 304 11 8 34 305 0 0 199 306 0 0 12 307 0 0 210 308 0 0 25 309 0 0 29 310 9 0 42 311 28 1.8 13 312 31 1.8 13 313 31 2 7 314 28 0.9 20 315 19 2 26 316 17 0.9 9 317 10 0.9 8 318 16 1.2 9 319 25 1.1 7 320 13 3.1 10 321 7 1.9 10 322 7 1 8 323 0 0 8 324 0 0 t 325 0 0 9 326 0 0 5 327 0 0 0 328 0 0 0 329 0 0 38 330 0 0 42 331 0 0 28 332 0 0 35 333 0 0 1 334 0 0 1 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/2023/03/09/AP-unit2-3.html",
            "relUrl": "/collegeboard/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? Mac uses &quot;cd&quot; and &quot;ls&quot; | . | What are the command you use in Windows terminal to access files? I use &quot;ls&quot; to see what files I have and &quot;cd&quot; to access my files. Windows can also use &quot;C:&quot;.- What are some of the major differences? | Mac does not have the command &quot;C:&quot;, which will return to the home directory on Windows. | . | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? The path is how the program will locate the images. If the path is wrong in anyway or is not specific enough, the image will not be located and therfore not displayed. | . | How does the meta data source and label relate to Unit 5 topics? The meta data source and label involve crediting others and following their licenses if they havre them. This way, if the owner of the images has a license (such as an MIT), they can get the credit they need. | . | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? Ipython is very intresting. It allows Jupyter notebooks to have a specific kernel to run pyton code. It also has a class format that can be used to display images and pandas. | . | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Yellow Smiley Face&quot;, &#39;file&#39;: &quot;yellowsmileyface.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Yellow Smiley Face&quot;, &#39;file&#39;: &quot;yellowsmileyface.jpg&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . - Base64 is similar to Binary and Hexadecimal in which it holds a certain amount of data in bits. However, it stores more as 4 6-Bit Base 64 digits. . Translate first 3 letters of your name to Base64. Ale = QWxl | . | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? Especially in this class, I habe been a consumer to buffering. A good example of this is when I have to wait longer for my VScode changes to commit, since it has a lot of data and space taken up in a file. | . | From your consumer experience, what effects have you experienced from buffering? I have experienced lags and | . | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "CollegeBoard MCQ 3 Reflection",
            "content": ". Taking the Quiz . This was my third time taking an example MCQ test. This was the easiest it&#39;s felt. I felt like I was much more efficient and confident in all my answers. I am getting much better at taking a question step by step, and problem solving to get an answer. | . Improvements Since First Test . test taking strategies | more familar with code | can take code step by step (not freak out when I see it all) | more familiar with many of the functions/code that are in the MCQ from this trimester | I was able to take this test much more quickly and with less stress/uncertainty as the final from last trimester :) | . Corrections . My Score: 48/50 . . Question 35: On this question, I failed to consider all the options. I had assumed that all options would work, however, I failed to consider one order of scores. When I tested out Team C and Team A having the highest score, the program was correct. Although, I didn’t realize that if Team B had the highest score but Team C had a higher score than Team A, then team C was incorrectly ruled the winner. | . | . . Question 50: I should have looked at this queston more throughly, and thought of options for values past the provided table. I thought this question was “too easy”, since I directly looked at the number of steps when the list size was 5, and chose the options with the lowest number. However, if I looked more carefully, I would’ve seen that algorithm B grows at an exponential rate. Sure, at a list size of 5 it has the least steps, but it also grows the fastest. | . | . Improve for Next Time: . The next time I take an MCQ test, I want to run more situations through my head. For example, with question number 35, if I thought about all the situations and orders with scores, I could’ve discovered that option D was faulty. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/MCQ3",
            "relUrl": "/collegeboard/MCQ3",
            "date": " • Mar 3, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "My CPT Write Up",
            "content": "Based on this Collegeboard rubric . . My video . Row 1 (Program Purpose and Function): the purpose of my program is to aid ISPE students to stay organized and ensure they get credit for their class | my program works (functionality) by allowing users to input their workouts and corresponding grade, and see the following inputs on the page in an organized table | the user inputs a workout by typing their “Name”, “Date of Completion”, “Number of Hours Completed”, “Grade” and click submit | the output of the program is that the data appears in a table below | . | Row 2 (Data Abstraction): | . . . name of collection type (database class): ISPE | data in this class is the data (workouts) that the user inputed . | Row 3 (Managing Complexity): . | without the use of the class in the database, the inputed data would be very unorganized in a list and would only be stored locally. However, I could store the data in a list and use a rest API to connect the frontend and backend. However, it would be very tedious since I would have to manually add data to the backend. It would be much more difficult to update, debug, and add data. . | Row 4 (Procedural Abstraction): | . . This function “create_ISPE” takes the iputted data (parameter) and iterates through the variables that the user inputs (name, date, duration, grade). It then defines them as constants, posts them, and autogenerates them into the table diplayed on frontend. This allows the data inputed by the user to actually show up in the table, carrying out the purpose of the program. . | Row 5 (Algorithm Implentation): . | . . This class in my API is defining a get funtion that recieves the data from the frontend, and jsonifies the data. It does this by going through a sequence where it first extracts all the exisiting data, reads it, and then rewrites it as a JSON format. The second piece of code pictured then fetches the data that is in JSON format by using GET methods. This frontend uses the funtion read_ISPE to refrense the class_read function in the backend. In order to do this, it goes through a series of conditionals (selection), to determine if the data is valid and ready to be added to the database. If it produces a response error, then the funtion is returned. If the data is valid and in the correct format, then it will be added to the table which will be displayed to the user. . | Row 6 (Testing): . First call: The user inputs the workout, “John Doe, 1/27/2023, 2, A” (valid data) into the form and clicks submit conditions being tested: checks if data is valid and if it can be added to the database | result: data will appear in the table below with the corresponding data | . | Second call: user enters the invalid data “B” into the field: “name” Conditions being tested: checks if the data inputted is valid (more than 2 characters) to be put in the database | result: the program will alert the user “Name is missing, or is less than 2 characters, please refresh and enter a valid name” | . | . | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/project/CPTwriteup",
            "relUrl": "/project/CPTwriteup",
            "date": " • Feb 28, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Technical Achievements for my CPT Project",
            "content": "Technical Achievements and Difficulties in my Project . My feature’s database file My feature’s API file . Diffifulties and how we Overcame Them! . Starting off with little knowlege on databases, this project was definitely difficult. By using the resources Mr. Mortensen gave us and a lot of troubleshooting/debugging, we were able to accomplish this project! . having multiple classes within one database: we originally didn’t understand that we needed different database files, we started off with one that had 4 different classes. It had worked and showed up correctly in our SQLite table, however, it made it very difficult to create and connect an API to it. Once we had seperate files, it was much easier to keep track of our work and add other elements. | defining vars and notes schema for our projects (determining what type of input each var was going to be) | SYNTAX! Trying to debug syntax was definitely a challenge. It took looking at errors, changing one thing at a time, and testing over and over again. Things like a capital letter or an underbar before a var made all the difference. | Garbage Data: I spent lots of time trying to determine how I could make the API the most efficient in eliminating garbage data. However, with the input of others, I realized that one of the most effective ways to do this is to not allow the user to input incorrect values in the first place. So, I changed the HTML 5 input type on frontend to only allow the user to input certain options. | Setter/Getter Functions: These still confuse me a little. I understand that these funtions are necessary to create a var and to retrieve their data. However, editing them was difficult. I needed to take it much slower than I normally do, since it requires more attention to detail. Many elements needed to be added/changed between vars, and I made lots of little mistakes. These mistakes made it tedious to test and debugg my code. | . Our Main Strategies: . Teamwork! If one member had an issue, we all tried to help and solve it. | Sharing our mistakes and solutions: Many times if there was an issue in our code that was not a typo/misunderstanding, we all had the same issue. So, when we troubleshooted and debugged to form a solution, we shared that fix with the group. | Comparing code: This strategy helped us greatly in this project. If one member’s code was working as intended but another’s had errors, we compared the code side by side to see if we could identify an error. We caught many mistakes/typos this way. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/project/technicalachievements",
            "relUrl": "/project/technicalachievements",
            "date": " • Feb 25, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "N@TM Blog",
            "content": "Our Project Experience . This trimester’s Night at the Museum went so much better than last trimester. | My entire group arrived early, and we were set up by 6 PM | Our project is called Fitness 4 Baddies, and is a tool to all Baddies who want to keep track of/stay motivated with their fitness | We have features that allow users to input their workouts, grades, inspirations, or exercise ideas | Our full stack worked well, using a database and get/create/post methods for frontend -&gt; backend -&gt; frontend | however, our AWS was not deployed so we were using localhost to localhost | . Learning From Others . Fitness Page: . has an exercise tracker | one feautre is a visual calender of workouts | can input/track goals | has a forum where users can talk about good exercise habits | can track your fitness stats | . Arcade Page: . has four games: pong | snake | more | . | has a login | is very interactive | counts your scores from the games | . Cars page . is a place to buy cars | has a car finder (with categories) | has a feature finder (search for cars with your ideal feature) | user can add to a car wishlist | . My Learning: . I learned a lot by looking at others projects. Seeing another fitness site was inspiring since there were so many other features that we don’t have that contribute to our same topic/idea. I also loved seeing the cool UI and UX from the other projects. My favorite was the cars page. Seeing everyone’s creativity was amazing. | . Other Arts (not CS) . Ceramics: . | Photograpgy . my image for photography!: | . | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/reflection/N@TM",
            "relUrl": "/reflection/N@TM",
            "date": " • Feb 22, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "5.5 and 5.6 (Legal and Ethical Concerns/Safe Computing) Notes/Reflection",
            "content": "5.5 Legal and Ethical Concerns . License Communities, License Types closed source (capitalism, make $): pay to use | open source (ex: GPL/MIT License): can go grab (concerns: can use but can’t sell) | . | Digital Rights terms and conditions | music | . | Patents can pantent phrases like “app store” | . | . Summary: . Every company needs to make a living. With capitalism, one of the best ways to do that is with closed source licenses. However, open sourced licenses allow for the code to be more community based. There are more contributions and the code is more useful. However, if you use open sourced code, you cannot sell your product. Similarly, there are digital rights. Every time you accept terms and conditions on your phone/comupter, you are accepting digital rights. Another example of digital rights is licensing to music on your phone. If I pirate music from Beyonce, I am not following her digital rights and she gets less money. . Flask/Backend License: . | Frontend License: . | Team Fastpage license: . | Personal Fastpage license: . | My team and I chose the open source MIT license for all our projects and for our personals. However, our frontend repository already had the “Apache” license so we left that one in place. The MIT license allows anyone to edit, ditribute, or use it personally or commercially, as long as they give us credit. We believe this is the best option for us since we are not working on anything top secret, and we would love community input and support. . | . 5.6 Safe Computing . never ride skateboard and compute at the same time! | concerns with computing: malware | phishing attacks | identity theft | stolen information (passwords, credit cards, bank accounts) | Personal Identifiable Information (PII) can be beneficial or harmful | . | encription: two-factor authentication (2FA) | ^ ex: sending email with code/link | . | . Hacks . Describe PII you have seen on project in CompSci Principles. In APCSP, I have seen PII. I think the most common are our names, github usernames, and information that we put in our projects (such as tester data that is our actual information). | . | . . What are your feelings about PII and your personal exposure? I always feel a little nervous about having my information out. But, I do put myself out there with things like social media so my name and some basic info (such as DNHS, class of 2024, my cheerleading organization/team) are open to the world to see. I realize that is probably a little more risky, however, it allows others to connect with me (like if a cheerleader from the same organization found my account). Also, my common email happens to be my first, middle, and last name all in one. I have been told that it is dumb to be giving out that information, but I have yet to stop using that email. | . | . . Describe good and bad passwords? What is another step that is used to assist in authentication. a good password is one that has many characters, both letters and numbers, and symbols. It is more difficult to guess and come up with. Bad passwords are either very common and not intricate, or contain personal information. For example, if I made my password alexac, it would be very bad since my name is very accessible (PII). | . | . . Try to describe Symmetric and Asymmetric encryption. Symmetric encryption only uses one key to encrypt/decrypt. It is a form of security, but isn’t as strong as Asymmetric encryption. Asymmetric encryption uses two different keys, a public and secret key, to encrypt and decrypt. | . | . . Provide an example of encryption we used in AWS deployment. When creating and deploying our projects in AWS, we used Asymmetric encryption. We had to generate the public and secret keys and then add them to our repositories. | . | . . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. There have been many phising schemes on instagram lately. The hackers try to sound personal and like your friend. There was one I fell for a long time ago where one of my “friends” on insta direct messaged me a link that they claimed had a “bad photo” of me. Theyt made it sound urgent and I was curious. In order to “view the photos” you had to sign into your instagram account. I tried to multiple times, but lucklily forgot my password. Ava then pointed out to me that it was clearly a scheme, and that I should avoid clicking on anything suspicious on instagram dms. | . | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/chapterfive3",
            "relUrl": "/collegeboard/chapterfive3",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "5.3 and 5.4 (computing bias) Notes/Reflection",
            "content": "5.3 . Intentional or Purposeful bias . Facebook vs Tiktok . Facebook Age: 25+ (older community) | Tiktok Age: 10-25 (younger community) | originally exclusion wasn’t purposeful (was popular long ago and continued with that crowd) but now they target the different age groups | we generally don’t see the exlusion as harmful, however, it may create different biases between the two generations | people may feel more inclined to post/share to others similar to them | can target ads towards certain groups (good for business!) | . Virtual Assistant Female Voice: . purposeful | softer, less startling/demanding, more comfortable | may be subconcscious bias based on old gender roles | harmful since it associates personal assistants as a woman’s job (contibrutes to sexism) | we think the default female voice is good for business, especially since it may be more “trustworthy” in our subconcsciousness | can correct this: change voice to a male | . Algorithm that influences your decisisions . apps share “cookies” that dictates what ads/news you see | Amazon targets ads towards certain groups to get them to buy more/specific items | Netflix targets certain groups to watch shows (ex: teen may want to watch action and an adult may want to watch a documentery) | Apple may target groups of people (such as runners or sports players) to buy their fitness watches/other products | Google targets ads/certain searches/results towards what you are intrested in based off of what you have searched/read in the past | . Are HP Computers Racist? . Does the owner of the computer think this was intentional? I think the owner of the computer believes this is intententional. He seemed very passionate about the fact that the computers are racist, and that the software doesn’t work on his darker skin. | . | How do you think this happened? I think that this was a testing error. The lack of diversity in the programming and testing led this mistake to be released into the world. However, I don’t believe they originally set out to be racist. | . | Is this harmful? Was it intended to be harmful or exclude? Yes, I think this is harmful, but was not intended to be. Groups may feel excluded and “not normal”, contributing to the issue of racism and lack of self worth. | . | Should it be corrected? Yes, I think that HP should (maybe already did) correct this issue right away. | . | What would you or should you do to produce a better outcome? They need to test all groups (diverse people working on the project) to ensure it is equal over all groups | . | . Conclusion . There are biases everywere. In technology, in developing, in testing, and there are even biases in our subconcsiousness. They are hard to avoid, however, we can attempt to counteract them by considering how we can incoorporate all (or as many as we can) groups and perspectives. Also, using diversity and our differences for good can be a great thing. It can increase business, make our experiences with technology better, and allow us to be more unique. . 5.4 . Obtaining Data via Crowdsourcing . pro: includes many different perspevtives | con: may have incorrect data | We have used APIs about Covid data and other facts | these APIs may have biased or outdated facts | however, there are lots of APIs available from numerous groups/companies | Github allows us to to have many recources and to look into people’s backgrounds | The biggest discovery I have found in Github was that you can see the repositories and commits that every user has worked on. It is very personal and can show many details | . Hacks . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? A crowdsource idea that may be successful in our APCSP enviornment is a group notepad. I take personal notes during lectures with helpful things like vocab and code that we commonly use (like html or markdown syntax). Maybe we could create a notepad that the entire class can access/edit. | . | What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? Crowdsourcing at Del Norte for our project is a great idea. Since our project is about fitness, we can get data and feedback from lots of different student at DNHS. That way, we can test the project and get more diverse data. (ex: more sports options for the sports workouts page) | . | What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. At N@TM, I could go around asking everyone what sport they play/activities they do to help their fitness. If they did a workout recently, they could log it on our site. Also, they could use our “sports workout” page to input what they do to workout. That way, we have more options for other users to choose from when trying to decide how to workout. | . | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/chapterfive2",
            "relUrl": "/collegeboard/chapterfive2",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "5.1 and 5.2 (beneficial/harmful effects of tech) Notes/Reflection",
            "content": "Lesson Notes . Google vs ChatGPT . Google = multiple POV, cite sources | ChatGPT = real time suggestions, one POV, cannot cite sources, computer bias, banned in some schools | . computer bias: . are we inserting our own bias into the answers? (intentional or unitnentional) | one opinion or not testing for everyone (ex: face scanner not working on people with darker skin) | . Are games/social media bad for our health? . Avantages: stay connected with friends and family who live further away | more oportunity/connections | can talk from far away | help other students with hw | . | Disadvantages: body image/self confidence | comparing lives &lt;- become ungrateful and unhappy | less time outside/sleeping | less face to face conversation | may develop social anxiety | . | . The Digital Divide: . some countries/areas in the US have little to no access to technology | factors to divide: socioeceonomic, geogrphic, demographic (ethnicity, education, religion, etc) | . Technology in Education . technology has been a very helpful tool in education | however, opens up doors for inappropraite activity | many schools block websites/tools | ^ can limit opportunity and learning | . Blog Post Reflections . 5.1 . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing Benefits: faster design/creation process, less error, accessable from many computers | Harmful Effects: less creative, less room for improvement/understanding, many dont have access to technology (digital divide) | . | Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? I think social media has had a huge impact on the world. Many teenagers end up unhappy and ungreatful with their lives since they are comparing theirs to those on social media. However, influencers only post the good and exciting parts of their lives, leading to a false sense of sadness and jealousy from others. I have felt this before. However, social media also allows me to connect more with my peers. it is easier to communicate, stay in touch, and grow closer to my friends/family. Overall, I don’t think society could decide on if social media is “bad” or “good”. | . | 5.2 . How does someone empower themself in a digital world? Someone could empower themself by educating themselves as much as possible. If one knows how the digital world works, they can use it to their advantage. | . | How does someone that is empowered help someone that is not empowered. Describe something you could do at Del Norte HS. I could help to empower someone at DNHS by teaching them some of what I’ve learned about technology. That way, they could get help with homework, have more recources, and stay connected to peers and teachers | . | Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? Yes, Poweay Unified School District blocks many sites and tools that are digital. It has already limited us in this classroom, when trying to deploy pur sites for our class. This shows how these barriers can negatively effect our learning. Barriers anywhere can limit opportunities. I understand they are trying to keep students safe. However, they will just use a hotspot or VPN and access the site anyway. | . | Canvas Blog Questions: . three beneficial effects of my project: can help keep users healthy and fit | gives motivation to workout and stay healthy | can help keep track of Independent PE (ISPE) | . | potential harmful effect of my project: can be hard to maintain/form body image obessesion | . | What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? Pros: can protect students from harmful information, keep the internet safe from inappropriate sites, keep students focused on education only | Cons: limits oppourtunities and information, can be a hassle to get around (ex: hotspot to deploy sites in APCSP), students can get around it anyway | . | What concerns do you have personally about the digital divide? For yourself or for others. Personally, I have been very fortunate to have access to technology and learn how to use it. I am concerned for those that don;t have access, or recently aquired access to technology. They won’t be as “tech savvy” and efficient. If a lot of students are trying to learn a subject with the use of thechnology. a student with newly aquired technology may spend more time trying to pull up or learn to take notes then actually learning the subject. | . |",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/chapterfive",
            "relUrl": "/collegeboard/chapterfive",
            "date": " • Jan 27, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "My Role in the Team Baddies Project",
            "content": "Pre-view of materials required for College Board . Row 1 (Program Purpose and Function): the purpose of my program is to aid ISPE students to stay organized and ensure they get credit for their class | my program works (functionality) by allowing users to log their workouts and then recieve a corresponding grade | the user inputs a workout by typing “First Name”, “Last Name”, “Date of Completion”, “Number of Hours Completed” and click submit | the output of the program is that the data appears in a table below along with a corresponding grade | . | Row 2 (Data Abstraction): name of collection type will be (class): ISPE | data in this class is the data (workouts) that the user inputed | . | Row 3 (Managing Complexity): without the use of the class in the database, the inputed data would be very unorganized and would only be stored locally. However, I could store the data in a list and use a rest API. | . | Row 4 (Procedural Abstraction): Show a procedure in creating the API or database? | the API and database are critical to this project since they allow data to be stored (not just locally) and connect the inputs from the frontend to the backend (data a user inputs will show up in table and stay there even when page is refreshed) | . | Row 5 (Algorithm Implentation): we haven’t finished our code yet | describe process of input getting posted to the backend, getting stored in the database, and then sent back to the frontend (table) in JSON format using the API | . | Row 6 (Testing): First call: user inputs a workout into the form and clicks submit conditions being tested: checks if data is valid and if it can be added to the database | result: data will appear in the table below with the corresponding grade | . | Second call: user enters invalid (garbage) data into the field: “number of hours completed” Conditions being tested: checks if the data inputted is valid (numerical number) to be put in the database | result: the program will return the message “please enter a valid number” | . | . | . My Portion of Create Performance Task Project . . . . My portion of the CPT Project is our Independent Sport Physical Education (ISPE) page. . This page has a feature that allows a student participating in ISPE (getting a PE credit outside of school) to log their sports/workouts and recieve grades for them. | This page is intended to help ISPE students to stay organized and on top of their workouts to ensure they get the credits for the class | I have a form where the student inputs: First Name | Last Name | Date of Completion | Number of Hours Completed | . | When they submit, their workout will appear in the table below, along with a corresponding grade. | this page incorporates CRUD since it will have options for the user to add, edit, and delete their data | . Code Plan . Frontend: . the form in which the user inputs the four fields of data is HTML 5 inputs | Javascript and HTML retreives data from the backend with the api (JSON format) and autogenerates the data into the table | CSS/HTML/markdown is used to style the page | . Backend . file “users.py” creates the database (including the classes for users and each table &lt;- ISPE class for my feature) | file “user.py” creates the api that is the “connector” between frontend and backend | . Video Plan . In the video, I will demonstrate multiple things: . input: user inputs a workout by typing these fields into a form and hits submit First Name | Last Name | Date of Completion | Number of Hours Completed) | . | output: the data appears in a table below along with a corresponding grade | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/project/myrole",
            "relUrl": "/project/myrole",
            "date": " • Jan 26, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "CollegeBoard MCQ 2 Reflection",
            "content": ". Taking the Quiz . I feel that this quiz was much easier than the final last trimester. I have improved so much with both performance and being mentally prepared (more confidence). I have learned a lot this trimester and have become so much more familiar with the code in these MCQ questions. | . Improvements from Last Time! . test taking strategies | more familar with code | can take code step by step (not freak out when I see it all) | more familiar with many of the functions/code that are in the MCQ from this trimester | I was able to take this test much more quickly and with less stress/uncertainty as the final from last trimester :) | . Corrections . My Score: 46/50 . . Question 13: This question stumped me a little. To me, all three options seem like they would work and are reasonable. However, I think in order for the expressions to evaluate to false, there needs to be a “NOT” included. That would be why option 1 doesn’t fit the critera. | . | . . Question 22: I believe that I read this question incorrectly and needed to read it slower so that I could get every detail. On algorithm A, I read “student adds his or her height to the value on the card” and thought it meant that they only write their height on the card (rather than adding their height to the previous height). I can now see why both of these algorithms would calculate the correct average. | . | . . Question 24: This question definitely worked my brain. I thought that since the innermost block was repeated y times, and that was repeated 3 times, that the answer would be y^3. However, after reading their explanation it makes much more sense now. Since the | “The value of the variable result is initially set to 0. The outer REPEAT block is executed three times, and the inner REPEAT block is executed y times. Any block inside both of these blocks will be executed 3y (3 multiplied by y) times. Since the innermost block increases the value of the variable result by 1, the final value of the variable result is 3y.” | . | . . Question 30: This question definitely confused me. I think I am starting to understand it though. It gives coordinates of a point on a circle, as well as its radius. It then calls the function “drawCircle(x, y, r)” before subtraction from y and r. Or, it adds to y and r and then calls the function “drawCircle(x, y, r)”. I was confused about when the function should be called. It should be called before subtraction, but after addition. | . | . Improve for Next Time: . The next time I take an MCQ test, I need to take the questions slightly slower and make sure I understand every detail and what the question is asking. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/MCQ2",
            "relUrl": "/collegeboard/MCQ2",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "View and Frontend Coding",
            "content": "GitHub Pages Organization and Design . HTML, JavaScript, and a JavaScript fetch are all things you can do in a GitHub Pages View. Additionally, every GitHub page inherits from Theme, minimizing need to define a lot of CSS. Some key elements... . Style, the visual design. SASS files in assets/css/style.scss, review GitHub pages theme for instructions | . | Head and Body. The HTML tags used to structure every page. Layout files in _layouts/default.html, structure is provided by GitHub pages theme | Supplement layout with files in _includes, for instance _layouts/home.html is used to add menu selections to pages by including it in _layouts/default.html. | . | Page. Markdown or HTML is defined and constructed into page using Jekyll Build, refer to content reference in _layouts/default.html. Observe how files are built by looking at generated html files under _site. | . View/CRUD Concepts . In a database project, the key idea is to build a system for capturing key information. For instance, student information on students and allowing *blogging to a Teacher would have Frontend View elements that correspond to a Backend Database. . Backend Database CRUD operations are as follows... . Create new student records | Read a list of students | Update student data | Delete records | . Frontend Visual concepts of the Idea . HTML to Obtain Input is a key step (aka Create/Input Step) . HTML5 table is a way to organize input . th labels | td input types | onclick action | . /* &lt;table&gt; &lt;tr&gt; &lt;th&gt;&lt;label for=&quot;name&quot;&gt;Name&lt;/label&gt;&lt;/th&gt; &lt;th&gt;&lt;label for=&quot;email&quot;&gt;Email&lt;/label&gt;&lt;/th&gt; &lt;th&gt;&lt;label for=&quot;password&quot;&gt;Password&lt;/label&gt;&lt;/th&gt; &lt;th&gt;&lt;label for=&quot;phone&quot;&gt;Phone&lt;/label&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; required&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;email&quot; name=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;abc@xyz.org&quot; required&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;tel&quot; name=&quot;phone_num&quot; id=&quot;phone_num&quot; pattern=&quot;[0-9]{3}-[0-9]{3}-[0-9]{4}&quot; placeholder=&quot;999-999-9999&quot;&gt;&lt;/td&gt; &lt;td &gt;&lt;button onclick=&quot;create_User()&quot;&gt;Create&lt;/button&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; */ . Table . Name Email Password Phone . | | | | Create | . HTML5 form is another way to organize input . form action vs onclick | p labels and input, in real implementation combine with CSS | . /* &lt;form action=&quot;create_User()&quot;&gt; &lt;p&gt;&lt;label&gt; Name: &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; required&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; User ID: &lt;input type=&quot;text&quot; name=&quot;uid&quot; id=&quot;uid&quot; required&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; Password: &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt; Verify Password: &lt;input type=&quot;password&quot; name=&quot;passwordV&quot; id=&quot;passwordV&quot; required&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; Phone: &lt;input type=&quot;tel&quot; name=&quot;phone_num&quot; id=&quot;phone_num&quot; pattern=&quot;[0-9]{3}-[0-9]{3}-[0-9]{4}&quot; placeholder=&quot;999-999-9999&quot;&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; Birthday: &lt;input type=&quot;date&quot; name=&quot;dob&quot; id=&quot;dob&quot;&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt; &lt;button&gt;Create&lt;/button&gt; &lt;/p&gt; &lt;/form&gt; */ . Form . Name: . User ID: . Password: Verify Password: . Phone: . Birthday: . Create . JavaScript Fetch and Response (aka Post Step) . After Input call action | Extract data from DOM | Build url | Fetch | Add response to end of table | . function create_User(){ // extract data from inputs const name = document.getElementById(&quot;name&quot;).value; const email = document.getElementById(&quot;email&quot;).value; const password = document.getElementById(&quot;password&quot;).value; const phone = document.getElementById(&quot;phone&quot;).value; const requestOptions = { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Authorization&#39;: &#39;Bearer my-token&#39;, }, }; //url for Create API const url=&#39;/crud_api/create/&#39; + name + &#39;/&#39; + email+ &#39;/&#39; + password + &#39;/&#39; + phone; //Async fetch API call to the database to create a new user fetch(url, requestOptions).then(response =&gt; { // prepare HTML search result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // trap error response from Web API if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); // Email must be unique, no duplicates allowed document.getElementById(&quot;pswError&quot;).innerHTML = &quot;Email already exists in the table&quot;; return; } // response contains valid result response.json().then(data =&gt; { console.log(data); //add a table row for the new/created userId const tr = document.createElement(&quot;tr&quot;); for (let key in data) { if (key !== &#39;query&#39;) { //create a DOM element for the data(cells) in table rows const td = document.createElement(&quot;td&quot;); console.log(data[key]); //truncate the displayed password to length 20 if (key === &#39;password&#39;){ td.innerHTML = data[key].substring(0,17)+&quot;...&quot;; } else{ td.innerHTML = data[key];} //add the DOM data element to the row tr.appendChild(td); } } //append the DOM row to the table table.appendChild(tr); }) }) } . HTML and JavaScript Display Table . JavaScript below shows elements needed to construct the rows of data in the table. . JSON is required, it is hardcoded in this example. Typically JSON will come from a JavaScript fetch. | JSON object is required, it is created from JSON string. This allows access to to elements in JSON using JavaScript dot notation (user._name) | DOM editing is a huge part of the remainder of this example. DOM elements often nest inside of other DOM elements. For instance each td is nested in tr. Find examples of DOM create and append in the code below. | Notice the definition of table and build you own map or visual of how these things are put together. | . /* &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Actions&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;table&quot;&gt; &lt;!-- javascript generated data --&gt; &lt;/tbody&gt; &lt;/table&gt; */ // Static json, this can be used to test data prior to API and Model being ready const json = &#39;[{&quot;_name&quot;: &quot;Thomas Edison&quot;, &quot;_uid&quot;: &quot;toby&quot;}, {&quot;_name&quot;: &quot;Nicholas Tesla&quot;, &quot;_uid&quot;: &quot;nick&quot;}, {&quot;_name&quot;: &quot;John Mortensen&quot;, &quot;_uid&quot;: &quot;jm1021&quot;}, {&quot;_name&quot;: &quot;Eli Whitney&quot;, &quot;_uid&quot;: &quot;eli&quot;}, {&quot;_name&quot;: &quot;Hedy Lemarr&quot;, &quot;_uid&quot;: &quot;hedy&quot;}]&#39;; // Convert JSON string to JSON object const data = JSON.parse(json); // prepare HTML result container for new output const table = document.getElementById(&quot;table&quot;); data.forEach(user =&gt; { // build a row for each user const tr = document.createElement(&quot;tr&quot;); // td&#39;s to build out each column of data const name = document.createElement(&quot;td&quot;); const id = document.createElement(&quot;td&quot;); const action = document.createElement(&quot;td&quot;); // add content from user data name.innerHTML = user._name; id.innerHTML = user._uid; // add action for update button var updateBtn = document.createElement(&#39;input&#39;); updateBtn.type = &quot;button&quot;; updateBtn.className = &quot;button&quot;; updateBtn.value = &quot;Update&quot;; updateBtn.style = &quot;margin-right:16px&quot;; updateBtn.onclick = function () { alert(&quot;Update: &quot; + user._uid); }; action.appendChild(updateBtn); // add action for delete button var deleteBtn = document.createElement(&#39;input&#39;); deleteBtn.type = &quot;button&quot;; deleteBtn.className = &quot;button&quot;; deleteBtn.value = &quot;Delete&quot;; deleteBtn.style = &quot;margin-right:16px&quot; deleteBtn.onclick = function () { alert(&quot;Delete: &quot; + user._uid); }; action.appendChild(deleteBtn); // add data to row tr.appendChild(name); tr.appendChild(id); tr.appendChild(action); // add row to table table.appendChild(tr); }); . Failed to start the Kernel. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . View/Blog Concepts . A notes/blog would be created to add Notes between students and teacher, part of original concept. Notes could be used for many types of applications. Details on creating notes will be part of another blog, but for now we want you to think about design. . In this design, most recent messages are on top | Messages are intended to support markdown and inclusion of images | Think about technique to format images in conjunction with Text | . Hacks . Build and correlate a technical design between frontend view and backend model. This blog is focussing on frontend view., and visual concepts on how CRUD operations are presented to user of system. This particular Jupyter Notebook and code within it are used to help establish technical ideas. Start a design for your project... . Each project must have a View (as pictured) and Model (json data is fetched into the View). Describe your project. | Describe your View. Use Markdown, HTML, UML, other visuals, tables are used to characterize a project. This shows the Teacher and Graders understanding of planning Model and View. | Transition from pure design and start inserting code elements, like inputs. Also, try build a table with json data versus fetching data. | Issues should discuss problems/challenges, in Teacher/Student data here are a couple ... This design will have many JavaScript actions, at least one for each CRUD operation. In this design, developer needs think of JavaScript functions to replace placeholder alerts in example code above. | There can be different roles for CRUD operations. For instance, student will only interact with their own account. Teacher may interact with many accounts. | Given these CRUD operations what kind of APIs are needed? They should map closely button/on click actions, as each action will fetch or manipulate data differently. | . | . Extra Credit. Student(s) could assist in rework of my Flask project from last year into a Frontend / Backend solution. Additionally, if Frontend is done correctly it could easily be modified to work with both Spring and Flask backends. . References . Here are some working samples . Fetching table data | Obtaining input | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/frontend/css/javascript/html/forms/2023/01/12/PBL-view.html",
            "relUrl": "/frontend/css/javascript/html/forms/2023/01/12/PBL-view.html",
            "date": " • Jan 12, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Model and Object-Oriented Programming Hack",
            "content": "Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . # this may be useful for our project from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, gradCLASS): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._gradCLASS = gradCLASS @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def gradCLASS(self): return self._gradCLASS # a setter function, allows name to be updated after initial object creation @gradCLASS.setter def gradCLASS(self, gradCLASS): self._gradCLASS = gradCLASS # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;class&quot; : self.gradCLASS } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Alexa Carlson&#39;, uid=&#39;Alexa&#39;, password=&#39;123lex&#39;, dob=date(2006, 5, 16), gradCLASS=&#39;2024&#39;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Alexa Carlson&#34;, &#34;uid&#34;: &#34;Alexa&#34;, &#34;dob&#34;: &#34;05-16-2006&#34;, &#34;age&#34;: 16, &#34;class&#34;: &#34;2024&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Alexa Carlson&#39;, &#39;_uid&#39;: &#39;Alexa&#39;, &#39;_password&#39;: &#39;sha256$i3nt7xnDShgB7u0k$79d6f53a2c632be582905ee6b063e552040518d0f99eed993e553d373924ddf5&#39;, &#39;_dob&#39;: datetime.date(2006, 5, 16), &#39;_gradCLASS&#39;: &#39;2024&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_gradCLASS&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;gradCLASS&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/oop/mob/classes/objects/attributes/2023/01/11/OOPhack.html",
            "relUrl": "/oop/mob/classes/objects/attributes/2023/01/11/OOPhack.html",
            "date": " • Jan 11, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$P4N...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$2Tl...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$fYQ...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$2RN...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$oAc...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$P4N...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$2Tl...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$VOr...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$2RN...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$oAc...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$P4N37QKgVxijCnVS$ab82d2c1af6cadb5b6eb53bfe1e307171ad6b664cf85281b9eb3b8967543f184&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$2TlZ2QCPq26BIj4m$3aeaf24d16bfdcb4bca9cc26592ae0544c48e0b438e6f25a894caf23791597b2&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$VOrnsHPYsTpOoYcj$22adca4d560046070e06bb9a11193aa72e5578298c0c4fc4a9fea59dfd29b294&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$2RNXN6a5cmQEIJFE$b0352b4b2dff4db68481775c012029b4dea1fb985c06fcb896b412ce8b7324eb&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$oAc9qXICp5yogHi5$c0cdfea442d88ee7cdd95a3f8359e2bde722a73eeb577d05e4f6c0ed419eb307&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$P4N37QKgVxijCnVS$ab82d2c1af6cadb5b6eb53bfe1e307171ad6b664cf85281b9eb3b8967543f184&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$2TlZ2QCPq26BIj4m$3aeaf24d16bfdcb4bca9cc26592ae0544c48e0b438e6f25a894caf23791597b2&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$VOrnsHPYsTpOoYcj$22adca4d560046070e06bb9a11193aa72e5578298c0c4fc4a9fea59dfd29b294&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$2RNXN6a5cmQEIJFE$b0352b4b2dff4db68481775c012029b4dea1fb985c06fcb896b412ce8b7324eb&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$oAc9qXICp5yogHi5$c0cdfea442d88ee7cdd95a3f8359e2bde722a73eeb577d05e4f6c0ed419eb307&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(&quot;Age:&quot;, age) . Age: 18 . # def __init__(self, gradyear): #self._gradyear = gradyear #@property #def gradyear(self): # return self._gradyear #@gradyear.setter #def gradyear(self, gradyear): # self._gradyear = gradyear #student = classOf(gradyear=2024) #print(&quot;Graduation Year:&quot;, student.gradyear) . Graduation Year: 2024 . #def calculate_age(born): # today = date.today() # return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) #def classOF(age): # today = date.today() # tillgrad = 18 - age # gradyear = today.year + tillgrad # return gradyear #dob = date(2006, 5, 16) #age = calculate_age(dob) #graduationyear = classOf(age) #print(&quot;age:&quot;, age, &quot;graduation year:&quot;, graduationyear) . age: 16 graduation year: &lt;__main__.classOf object at 0x7fe59ccbcdf0&gt; . #import json #class Student: # constructor of a User object, initializes the instance variables within object (self) # def __init__(self, name, dob, gradyear, age): # self._name = name # variables with self prefix become part of the object, # self._dob = dob # self._gradyear = gradyear # self._age = age # a name getter method, extracts name from object #@property #def name(self): # return self._name # a setter function, allows name to be updated after initial object creation #@name.setter #def name(self, name): # self._name = name # a name getter method, extracts birthday from object #@property #def dob(self): # return self._dob # a setter function, allows dob to be updated after initial object creation #@dob.setter #def dob(self, name): # self._dob = dob # def calculate_age(born): # today = date.today() # return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) # a name getter method, extracts graduation year from object #@property #def gradyear(self): # return self._gradyear # a setter function, allows grad year to be updated after initial object creation #@gradyear.setter #def gradyear(self, name): # self._gradyear = gradyear #@property #def age(self): # return self._age # dob = date(2004, 12, 31) # age = calculate_age(dob) # print(age) # place tester code inside of special if! This allows include without tester running #if __name__ == &quot;__main__&quot;: # define user objects # s1 = Student(name=&#39;Ava Carlson&#39;, dob=&#39;2006, 05, 16&#39;, gradyear=&#39;2024&#39;, age=&#39;16&#39;) # s2 = Student(name=&#39;Alexa Carlson&#39;, dob=&#39;2006, 05, 16&#39;, gradyear=&#39;2024&#39;, age=&#39;16&#39;) # s3 = Student(name=&#39;Dylan Carlson&#39;, dob=&#39;2001, 08, 15&#39;, gradyear=&#39;2020&#39;, age=&#39;21&#39;) # s4 = Student(name=&#39;Grant Carlson&#39;, dob=&#39;2004, 03, 23&#39;, gradyear=&#39;2022&#39;, age=&#39;18&#39;) # put user objects in list for convenience #students = [s1, s2, s3, s4] # Find user #print(&quot;Test 1, find user 3&quot;) #s = tester(students, s3.gradyear, &quot;2024&quot;) # Change user #print(&quot;Test 2, change user 3&quot;) #s.name = &quot;Brian Carlson&quot; #s.gradyear = &quot;1995&quot; #s = tester(users, s.gradyear, &quot;2000&quot;) # Make dictionary #&#39;&#39;&#39; #The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. #Every object in Python has an attribute that is denoted by __dict__. #Use the json.dumps() method to convert the list of Users to a JSON string. #&#39;&#39;&#39; #print(&quot;Test 3, make a dictionary&quot;) #json_string = json.dumps([student.__dict__ for student in students]) #print(json_string) #print(&quot;Test 4, make a dictionary&quot;) #json_string = json.dumps([vars(student) for student in students]) #print(json_string) . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password, gradCLASS, dob, age): self._name = name # variables with self prefix become part of the object, self._uid = uid self._gradCLASS = gradCLASS self._dob = dob self._age = age self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # a name getter method, extracts name from object @property def gradCLASS(self): return self._gradCLASS # a setter function, allows name to be updated after initial object creation @name.setter def gradCLASS(self, gradCLASS): self._gradCLASS = gradCLASS # a name getter method, extracts name from object @property def age(self): return self._age # a setter function, allows name to be updated after initial object creation @name.setter def age(self, age): self._age = age # a name getter method, extracts name from object @property def dob(self): return self._dob # a setter function, allows name to be updated after initial object creation @name.setter def dob(self, dob): self._dob = dob @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) # tester method to print users def tester(users, uid, psw, gradCLASS, dob, age): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Dylan Carlson&#39;, uid=&#39;dylan&#39;, password=&#39;123dylan&#39;, gradCLASS=&#39;2020&#39;, dob=(2001, 8, 15), age=calculate_age(date(2001, 8, 15))) u2 = User(name=&#39;Grant Carlson&#39;, uid=&#39;grant&#39;, password=&#39;123grant&#39;, gradCLASS=&#39;2022&#39;, dob=(2004, 3, 24), age=calculate_age(date(2004, 3, 24))) u3 = User(name=&#39;Neil Carlson&#39;, uid=&#39;neil&#39;, password=&#39;123neil&#39;, gradCLASS=&#39;1988&#39;, dob=(1970, 7, 3), age=calculate_age(date(1970, 7, 3))) u4 = User(name=&#39;Leslie Carlson&#39;, uid=&#39;les&#39;, password=&#39;123les&#39;, gradCLASS=&#39;1988&#39;, dob=(1970, 9, 7), age=calculate_age(date(1970, 9, 7))) u5 = User(name=&#39;Ava Carlson&#39;, uid=&#39;ava&#39;, password=&#39;123ava&#39;, gradCLASS=&#39;2024&#39;, dob=(2006, 5, 16), age=calculate_age(date(2006, 5, 16))) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123neil&quot;, u3.gradCLASS, u3.dob, u3.age) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u.gradCLASS = &#39;2024&#39; dob = &#39;11-2-16&#39; u = tester(users, u.uid, &quot;123qwerty&quot;, u.gradCLASS, u.dob, u.age) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Dylan Carlson&#34;, id: &#34;dylan&#34;, psw: &#34;sha256$FM5...&#34; name: &#34;Grant Carlson&#34;, id: &#34;grant&#34;, psw: &#34;sha256$3ed...&#34; * name: &#34;Neil Carlson&#34;, id: &#34;neil&#34;, psw: &#34;sha256$nlC...&#34; name: &#34;Leslie Carlson&#34;, id: &#34;les&#34;, psw: &#34;sha256$AWx...&#34; name: &#34;Ava Carlson&#34;, id: &#34;ava&#34;, psw: &#34;sha256$DAD...&#34; Test 2, change user 3 name: &#34;Dylan Carlson&#34;, id: &#34;dylan&#34;, psw: &#34;sha256$FM5...&#34; name: &#34;Grant Carlson&#34;, id: &#34;grant&#34;, psw: &#34;sha256$3ed...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$zO5...&#34; name: &#34;Leslie Carlson&#34;, id: &#34;les&#34;, psw: &#34;sha256$AWx...&#34; name: &#34;Ava Carlson&#34;, id: &#34;ava&#34;, psw: &#34;sha256$DAD...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Dylan Carlson&#34;, &#34;_uid&#34;: &#34;dylan&#34;, &#34;_gradCLASS&#34;: &#34;2020&#34;, &#34;_dob&#34;: [2001, 8, 15], &#34;_age&#34;: 21, &#34;_password&#34;: &#34;sha256$FM5IxSB9Rsh1DW5J$9ff634aeccd1fb127904c57996a67d4b1d4a930b70474098eaa5e43d0086043b&#34;}, {&#34;_name&#34;: &#34;Grant Carlson&#34;, &#34;_uid&#34;: &#34;grant&#34;, &#34;_gradCLASS&#34;: &#34;2022&#34;, &#34;_dob&#34;: [2004, 3, 24], &#34;_age&#34;: 18, &#34;_password&#34;: &#34;sha256$3edmwyuMFhDHKQx3$77b8387dc56982f981ac0dfcdc4e1a0a72d9243e2ce0413cd0808b74baaa6c1e&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_gradCLASS&#34;: &#34;1988&#34;, &#34;_dob&#34;: [1970, 7, 3], &#34;_age&#34;: 52, &#34;_password&#34;: &#34;sha256$zO5AqmrRc6Kagw1g$762e6dc9e23f7dcbd151a46008d418471b7828db8303194d0ada1f3a8644bb5c&#34;, &#34;gradyear&#34;: &#34;2024&#34;}, {&#34;_name&#34;: &#34;Leslie Carlson&#34;, &#34;_uid&#34;: &#34;les&#34;, &#34;_gradCLASS&#34;: &#34;1988&#34;, &#34;_dob&#34;: [1970, 9, 7], &#34;_age&#34;: 52, &#34;_password&#34;: &#34;sha256$AWxoiDH2TTP3rinF$e5ccc7f4a0213304e272e9507de9f993bd05c2ce116b3ef7e5d07ca9ab757419&#34;}, {&#34;_name&#34;: &#34;Ava Carlson&#34;, &#34;_uid&#34;: &#34;ava&#34;, &#34;_gradCLASS&#34;: &#34;2024&#34;, &#34;_dob&#34;: [2006, 5, 16], &#34;_age&#34;: 16, &#34;_password&#34;: &#34;sha256$DADoGWrNl3SvknCL$208197ae11241a75da4580513e43ea3fcba2e64cbc1d6dae4cf8ae625f584e96&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Dylan Carlson&#34;, &#34;_uid&#34;: &#34;dylan&#34;, &#34;_gradCLASS&#34;: &#34;2020&#34;, &#34;_dob&#34;: [2001, 8, 15], &#34;_age&#34;: 21, &#34;_password&#34;: &#34;sha256$FM5IxSB9Rsh1DW5J$9ff634aeccd1fb127904c57996a67d4b1d4a930b70474098eaa5e43d0086043b&#34;}, {&#34;_name&#34;: &#34;Grant Carlson&#34;, &#34;_uid&#34;: &#34;grant&#34;, &#34;_gradCLASS&#34;: &#34;2022&#34;, &#34;_dob&#34;: [2004, 3, 24], &#34;_age&#34;: 18, &#34;_password&#34;: &#34;sha256$3edmwyuMFhDHKQx3$77b8387dc56982f981ac0dfcdc4e1a0a72d9243e2ce0413cd0808b74baaa6c1e&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_gradCLASS&#34;: &#34;1988&#34;, &#34;_dob&#34;: [1970, 7, 3], &#34;_age&#34;: 52, &#34;_password&#34;: &#34;sha256$zO5AqmrRc6Kagw1g$762e6dc9e23f7dcbd151a46008d418471b7828db8303194d0ada1f3a8644bb5c&#34;, &#34;gradyear&#34;: &#34;2024&#34;}, {&#34;_name&#34;: &#34;Leslie Carlson&#34;, &#34;_uid&#34;: &#34;les&#34;, &#34;_gradCLASS&#34;: &#34;1988&#34;, &#34;_dob&#34;: [1970, 9, 7], &#34;_age&#34;: 52, &#34;_password&#34;: &#34;sha256$AWxoiDH2TTP3rinF$e5ccc7f4a0213304e272e9507de9f993bd05c2ce116b3ef7e5d07ca9ab757419&#34;}, {&#34;_name&#34;: &#34;Ava Carlson&#34;, &#34;_uid&#34;: &#34;ava&#34;, &#34;_gradCLASS&#34;: &#34;2024&#34;, &#34;_dob&#34;: [2006, 5, 16], &#34;_age&#34;: 16, &#34;_password&#34;: &#34;sha256$DADoGWrNl3SvknCL$208197ae11241a75da4580513e43ea3fcba2e64cbc1d6dae4cf8ae625f584e96&#34;}] . # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password, gradCLASS, dob, age): self._name = name # variables with self prefix become part of the object, self._uid = uid self._gradCLASS = gradCLASS self._dob = dob self._age = age self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # a name getter method, extracts name from object @property def gradCLASS(self): return self._gradCLASS # a setter function, allows name to be updated after initial object creation @name.setter def gradCLASS(self, gradCLASS): self._gradCLASS = gradCLASS # a name getter method, extracts name from object @property def age(self): return self._age # a setter function, allows name to be updated after initial object creation @name.setter def age(self, age): self._age = age # a name getter method, extracts name from object @property def dob(self): return self._dob # a setter function, allows name to be updated after initial object creation @name.setter def dob(self, dob): self._dob = dob @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) # tester method to print users def tester(users, uid, psw, gradCLASS, dob, age): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Dylan Carlson&#39;, uid=&#39;dylan&#39;, password=&#39;123dylan&#39;, gradCLASS=&#39;2020&#39;, dob=(2001, 8, 15), age=calculate_age(date(2001, 8, 15))) u2 = User(name=&#39;Grant Carlson&#39;, uid=&#39;grant&#39;, password=&#39;123grant&#39;, gradCLASS=&#39;2022&#39;, dob=(2004, 3, 24), age=calculate_age(date(2004, 3, 24))) u3 = User(name=&#39;Neil Carlson&#39;, uid=&#39;neil&#39;, password=&#39;123neil&#39;, gradCLASS=&#39;1989&#39;, dob=(1970, 7, 3), age=calculate_age(date(1970, 7, 3))) u4 = User(name=&#39;Leslie Carlson&#39;, uid=&#39;les&#39;, password=&#39;123les&#39;, gradCLASS=&#39;1989&#39;, dob=(1970, 9, 7), age=calculate_age(date(1970, 9, 7))) u5 = User(name=&#39;Ava Carlson&#39;, uid=&#39;ava&#39;, password=&#39;123ava&#39;, gradCLASS=&#39;2024&#39;, dob=(2006, 5, 16), age=calculate_age(date(2006, 5, 16))) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123neil&quot;, u3.gradCLASS, u3.dob, u3.age) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u.gradCLASS = &#39;2024&#39; dob = &#39;11-2-16&#39; u = tester(users, u.uid, &quot;123qwerty&quot;, u.gradCLASS, u.dob, u.age) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . # this may be useful for our project from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, gradCLASS): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._gradCLASS = gradCLASS @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def gradCLASS(self): return self._gradCLASS # a setter function, allows name to be updated after initial object creation @gradCLASS.setter def gradCLASS(self, gradCLASS): self._gradCLASS = gradCLASS # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;class&quot; : self.gradCLASS } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), gradCLASS=&#39;1868&#39;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;class&#34;: &#34;1868&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$GcBNimEV42wPOg90$5fe94d9021882b08726cd3f42225238a3a6ab0b7fa4524d2229d14e638cab406&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_gradCLASS&#39;: &#39;1868&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_gradCLASS&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;gradCLASS&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Scoring Previous Collegeboard Submissions",
            "content": "Performance Task Scoring 1 . Submission #1 . My Score: 6/6 . Link to my rubric . Collegeboard Score: 4/6 . Link to their rubric . Reflection . I was surprised to see the score that collegeboard gave this student. Looking through the written response, I believed that the project fit all the critera. | Row 1 (Program Purpose and Function): The student didn’t get the point for row 1 since they fit 5 of the 6 critera. Collegeboard believes that the student didn’t describe the function’s purpose (rather explained its functionality) this was eye-opening, especially since the student response seemed alright to me, and like something I would possibly write. Now I realize that I need to be much more careful and detail oriented to ensure I am going to hit all 6 critera | . | Row 3 (Managing Complexity): The student also didn’t get the point for row 3 since he met none of the critera. This score was shocking to me. This entire class I have seen lists as easier and usually always helpful. When I looked at this project, I believed that the list was very smart and effective. However, apparently it doesn’t contribute to managing complexity. This was also a good warning to me that I need to make sure that my list is actually helping to manage complexity (not all lists are useful) | . | . . Submission #2 . My Score: 5/6 . Link to my rubric . Collegeboard Score: 6/6 . Link to their rubric . Reflection . Row 5 (Algorithm Implentation): I scored differently than college board on one the the critera here. I thought that the student didn’t describe the code enough that one would be able to re-create it. However, that probably just reflects my current abilities in coding (especically compared to an expert working for collegeboard.) | I believe that this student did a wonderful job. I really love how they put text boxes within the images of code to describe it as they went. It made it much more organized and easier to follow. | The student was also very thorough with all their explanations. It’s good to keep in mind that quality really matters here (have more than you need) | . . Performance Task Scoring 2 . Submission #1 . My Score: 3/6 . Link to my rubric . Collegeboard Score: 1/6 . Link to their rubric . Reflection . Row 1 (Program Purpose and Function): Both Collogeboard and I gave a 0 for this section. The student incorrectly identifies the input and output, and descrived the functionality as the purpose. Thier given purpose was incorrect. | . | Row 2 (Data Abstraction): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. They did have images of lists and identified a name, however, the name did not correleate to the images provided. | When I do my project, I need to make sure I spend careful attention to details, and make sure every description matches my images. | . | Row 3 (Managing Complexity): Both Collogeboard and I gave a 0 for this section. The images did not show a list being used, and the code was not complex. | the sudent did not explain how the list manages complexity | I need to make sure that my project will have a list that actually manges complexity and is useful | . | Row 4 (Procedural Abstraction): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. the response does not describe how this procedure contributes to the overall functionality | . | Row 5 (Algorithm Implentation): Both Collogeboard and I gave a 0 for this section. the description of the program was brief and doesn’t allow for someone to recreate it | . | What I’ve learned with this project and scoring is that I will need to follow the directions completely when I do my project. | . . Submission #2 . My Score: 6/6 . Link to my rubric . Collegeboard Score: 6/6 . Link to their rubric . Reflection . This submission got a perfect score from both me and Collegeboard | All the descriptions were well thought-out and detailed, with correct corresponding images. | It is a great example to use as reference in the future for my project. | . . Submission #3 . My Score: 6/6 . Link to my rubric . Collegeboard Score: 5/6 . Link to their rubric . Reflection . Row 1 (Program Purpose and Function): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. The student described the function of the program but not its purpose | This one surprised me because when I read the purpose, it satisfied what I thought was the critera. However , it must not actually define a purpose | . | other than the purpose, this is another good example to go back to and use as reference for my project | . . Submission #4 . My Score: 6/6 . Link to my rubric . Collegeboard Score: 3/6 . Link to their rubric . Reflection . Row 2 (Data Abstraction): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. data stored in the list is not being used in the second image | once again this shows how specific my images must be in order to recieve credit | . | Row 3 (Managing Complexity): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. the list is not used to manage complexity (acts as a counter, so it can be replaced with a single counter variable) | like other examples, I need to make sure that my list is actually managing complexity and is useful | . | Row 6 (Testing): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. The response gives the conditions being tested rather than two different arguments that cause a different segment of code to execute. Arguments should be specific values used in the call to the procedure. | this is the first time I’ve seen this score for section 6. I need to make sure to follow Collegeboard’s critera for what an argument is (and not just test conditions) | . | . . Performance Task Scoring 3 . Submission #1 . My Score: 5/6 . Link to my rubric . Collegeboard Score: 3/6 . Link to their rubric . Reflection . Row 2 (Data Abstraction): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. data stored in the list is mot being used in the second image | this seems to be a common mistake to make, so I need to make sure I am careful to follow the directions exactly | . | Row 3 (Managing Complexity): Both Collogeboard and I gave a 0 for this section. the student does use a list, but it doesn’t really manage any complexity. | they wrote about how the use of randomly generated numbers could work as well (just as simple) | this also seems to be common among projects that don’t get great scores: I need to make sure that my list will actually simplify my program | . | Row 4 (Procedural Abstraction): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. the response does not describe how this procedure contributes to the overall functionality | this statement is too brief: “allows for the program to execute smoothly.” | it is better to have detail with Collegeboard | . | . . Submission #2 . My Score: 6/6 . Link to my rubric . Collegeboard Score: 6/6 . Link to their rubric . Reflection . this student recieved a perfect 6/6 from both Collegeboard and I | this project is a great example of a project to refrence in the future | the student was very thorough and made sure to answer every question with detail | . . Submission #3 . My Score: 4/6 . Link to my rubric . Collegeboard Score: 1/6 . Link to their rubric . Reflection . Row 2 (Data Abstraction): Both Collogeboard and I gave a 0 for this section. the first image does not show the provided list, only the second image | the description of what the list stores is inaccurate | . | Row 3 (Managing Complexity): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. the list does manage complexity, but the student didn’t explain how it could be written withot it | the description is very breif and needs to be more detailed | . | Row 4 (Procedural Abstraction): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. the image of code provided does not contain a parameter and is also never called in the second image | the student also inaccurately described the functionality of the code | . | Row 5 (Algorithm Implentation): Both Collogeboard and I gave a 0 for this section. this program includes sequencing and selection, but does not use iteration | the student forgot to mention a key part of the program when describing how it works | . | Row 6 (Testing): The student recieved a 0 on this section from Collegeboard, but I gave it a 1. the two calls are not specific, and are from the procedure (not to the procedure) | the conditions provided aren’t actully being tested, but instead are operations done by the user | student didn’t provide what the acutal results would be with the calls, only what would appear on the screen | . | I have learned a lot from this example. I need to b e very specific ith my descriptions, but I also have to be careful that they are correct. I need to understand my code completely to ensure that I am answering every question thoroughly and correctly. | . . Submission #4 . My Score: 5/6 . Link to my rubric . Collegeboard Score: 5/6 . Link to their rubric . Reflection . Collegeboard and I both gave this student a 5/6. | Row 6 (Testing): Both Collegeboard and I gave scored this section a 0 the student was not specific in the arguments that are passed through the parameters | the conditions the student provided don’t match the parameters in the program | described the code rather than the result | . | this student did a great job on their project. Beside not understanding the testing section (make sure to understand exactly what they are asking for), this is a good example to reference in the future. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/submissions",
            "relUrl": "/collegeboard/submissions",
            "date": " • Jan 6, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Check Number 3 Vocabulary",
            "content": "Vocabulary and Examples . Binary Numbers: a numbering scheme in which there are only two possible values for each digit – 0 or 1 – and is the basis for all binary code used in computing systems | Hexadecimal: a numbering system with base 16 | . . Bits: the smallest unit of data that a computer can process and store ex: 1 or 0 (one number in binary is a bit) | . | Bytes: a unit of data that is eight binary digits long ex: 10010110 | . | Nibble: four consecutive binary digits or half of an 8-bit byte ex: 0101 | . | . . Unsigned Integer: integers but have the property that they don’t have a + or - sign associated with them ex: 2, 3, 6, 1000 | . | Signed Integer: integers that have a + or - sign associated with them ex: -2, +3,000, -1 | . | Floating Point: a positive or negative whole number with a decimal point ex: 3.25, 5.1, 67.627 | . | Binary Data Abstractions: | Boolean: a logical data type that can have only the values true or false | . . ASCII: (American Standard Code for Information Interchange) a standard code for characters stored in a computer or to be transmitted between computers | Unicode: a universal character encoding standard | RGB: a system for representing the colors to be used on a computer display | . . Data Compression: a reduction in the number of bits needed to represent data Lossy: data encoding and compression technique that deliberately discards some data in the compression process | Lossless: restores and rebuilds file data in its original form after the file is decompressed | . | . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week3/vocab",
            "relUrl": "/week3/vocab",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "3.17 and 3.18 Student Lesson (group 9)",
            "content": "Hack 1: Collatz and printing Hailstone Numbers . sequence = [] def combinedcollatz(i): while i &gt; 1: if (i % 2): # i is odd sequence.append(i) i = 3*i + 1 else: # i is even sequence.append(i) i = i//2 if i == 1: sequence.append(1) else: print(i, &quot;is invalid, please try again&quot;) #this will print if the number is invalid i = int(input(&#39;Enter i: &#39;)) combinedcollatz(i) print(&quot;Hailstone numbers: &quot;, sequence, &quot; nNumber of iterations: &quot;, len(sequence)-1) . Hailstone numbers: [34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1] Number of iterations: 13 . Hack 2: Write 2 algorithms (efficent/innefficent) . i = 0 # efficient code while i &lt; 10: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i &gt;= 10: print(&quot;Great job! You&#39;ve studied enough&quot;) break . mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend Great job! You&#39;ve studied enough . i = 0 # Inefficient code if i == 0: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 1: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 2: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 3: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 4: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 5: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 6: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 7: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 8: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i == 9: print(&quot;mmmm mmmm not enought studying my friend&quot;) i += 1 if i &gt;= 10: print(&quot;Great job! You&#39;ve studied enough&quot;) i += 1 . mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend mmmm mmmm not enought studying my friend Great job! You&#39;ve studied enough . The difference in efficiency . The inefficient piece of code uses an if statement for every single hour of studying. It has a lot of repetition like the print(&quot;mmmm mmmm not enought studying my friend&quot;), as well as the i += 1 for every single hour. | The efficient code uses a while loop. The small piece of code iterates through the hours, and compares them to the conditions. It doesn&#39;t have repetition (modularity), allowing it to be faster and easier to change/read with the same result. | . Hack 3 Algorithm efficiency: . Algorithm efficiency is the amount of &quot;effort&quot;, or steps, that an algorithm must go through to complete it&#39;s purpose. An efficent algorithm is fast and goes through fewer proccesses. | . Hack 4 Daily Tasks . tasks = [&quot;brush teeth&quot;, &quot;skin care&quot;, &quot;pack water/lunch&quot;, &quot;go to school&quot;, &quot;homework&quot;] finished = [] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here print(&quot;Doing now: &quot;, task) finished.append(task) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) print(&quot;Done: &quot;, finished) . Doing now: brush teeth Doing now: skin care Doing now: pack water/lunch Doing now: go to school Doing now: homework Done: [&#39;brush teeth&#39;, &#39;skin care&#39;, &#39;pack water/lunch&#39;, &#39;go to school&#39;, &#39;homework&#39;] . This code takes the item in the tasks list and prints them as they go. Then, it appends the item into a &quot;finished&quot; list. It is also an efficient algorithm since it utilizes a for loop and calls the item within the definition of the function. . Extra Credit . class_schedule = [] i = 0 while i &lt; 5: period = input(&quot;What is a class in your schedule?&quot;) class_schedule.append(period) i += 1 if i == 5: break print(&quot;Your schedule: &quot;, class_schedule) print(&quot;Period 1: &quot;, class_schedule[0], &quot; Time: 8:35 AM-9:44 AM&quot;) print(&quot;Period 2: &quot;, class_schedule[1], &quot;Time: 9:49 AM-10:58 AM&quot;) print(&quot;Break: 10:58 AM-11:08 AM&quot;) print(&quot;Period 3: &quot;, class_schedule[2], &quot;Time: 11:13 AM-12:22 PM&quot;) print(&quot;Lunch: 12:22 PM-12:52 PM&quot;) print(&quot;Period 4: &quot;, class_schedule[3], &quot;Time: 12:57 PM-2:06 PM&quot;) print(&quot;Office Hours: 2:06 PM-2:31 PM&quot;) print(&quot;Period 5: &quot;, class_schedule[4], &quot;Time: 2:36 PM-3:45 PM&quot;) . Your schedule: [&#39;Offroll&#39;, &#39;AP Calculus AB&#39;, &#39;ASB&#39;, &#39;APCSP&#39;, &#39;Photography&#39;] Period 1: Offroll Time: 8:35 AM-9:44 AM Period 2: AP Calculus AB Time: 9:49 AM-10:58 AM Break: 10:58 AM-11:08 AM Period 3: ASB Time: 11:13 AM-12:22 PM Lunch: 12:22 PM-12:52 PM Period 4: APCSP Time: 12:57 PM-2:06 PM Office Hours: 2:06 PM-2:31 PM Period 5: Photography Time: 2:36 PM-3:45 PM .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupnine",
            "relUrl": "/students/groupnine",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Computer Science Panel",
            "content": "Schooling Paths . Kathyleen Beveridge: undergrad for Finance at Santa Clara | NBA at USC (not traditional timing since she waited to get her NBA) | studied abroad in Spain (loved it!) | . | Kris Porter: UCLA for Electrical Engineering | masters degree from Cal State LA Didn’t do well at first in computer science! He didn’t take intrest in the topic until 8 years later (never give up becuase you never know what you will find intrest in) | . | . | . Careers . Kathyleen Beveridge: . first job = investment banker with Wells Fargo (wasn’t her thing) | switched to high tech industry with job at HP | took 6 months off | worked at Qualcomm | now works at Thermo Fisher Scientific as senior director of marketing and sales ^ she works in a similar scrum process with sprints and positions (Scrum Master, Dev Ops, etc) | uses databases and data science to predict sales, weather (wine harvest), etc. Non-technical roles = recommending clients to buy certain things/do things | . | . Kris Porter: . main job: Software engineer (SRE, DevOps, Infrastructure) | first job = fixed computers/other tech | job at start up (GPM) and worked email marketing automation (similar to DevOps) | job at NBC Universal (streaming media infrastructure) | job at Qualcomm (Dev ops job, automation) | job at Twitter (worked on API which requested from client and retrieve info from all users and resurface important stuff back to client) Twitter Projects= New DataCenter Deployment &amp; Migrating HomeTimeline to GraphQL | . | . Important Tips/Skills: . career paths won’t always be a striaght line | Be adaptive | it’s okay if you’re not sure what your intrests are yet | Best technicians: listen and solve technical requirements (can explain in non-technical terms) | continuous learning | “Learn how to learn” = always be ready to learn more | learn multiple programming languages | don’t be super concerned about things you read on the news (resiliance) | the only risk is not learning | set good balance between work/hobbies and necessities | . My Reflection: . I know I enjoy STEM classes, especially math. I also love APCSP when I can figure the problem/code out. However, sometimes I feel dicouraged to pursue opportunities or careers in computer science/tech because I find it difficult. However, after listening to Kris and Kathleen, I feel like I still am able to go into this industry. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/computerscience/panel",
            "relUrl": "/computerscience/panel",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "subtracting javascript button",
            "content": "Subtracting 2 Numbers . Subtract . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;Subtract&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a - b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/students/groupsix/subtractionbutton",
            "relUrl": "/collegeboard/students/groupsix/subtractionbutton",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "multiplying javascript button",
            "content": "Multiplying 2 Numbers . Multiply . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;Multiply&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a * b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/students/groupsix/multiplicationbutton",
            "relUrl": "/collegeboard/students/groupsix/multiplicationbutton",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "3.14 and 3.15 Student Lesson (group 7)",
            "content": "Hack #1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code: this code below uses the pre-exisiting library &quot;random&quot; to generate a random number | it uses the keyword &quot;input&quot; to include it in the code | the random number is then used to see if you &quot;win&quot; the game or not | . | . import random number = random.randint(0,100) print(&quot;you&#39;re random number is&quot;,number) if number == 21: print(&quot;you win!&quot;) else: print(&quot;better luck next time :(&quot;) . you&#39;re random number is 89 better luck next time :( . Hack 2 . Define what an import random function do: . an import random function would import the contents of the pre-existing random library so that you could use it in your code | . | List a few other things that we can import other than random: . you can import more than just random. For example, you can import flask, math, or Numpy (a mathematical library). | . | . import math number = input(&quot;what number do you want to find the square root of?&quot;) square_root = math.sqrt(int(number)) print(&quot;The square root of&quot;,number,&quot;is&quot;,square_root) . The square root of 36 is 6.0 . Hack 3 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded?: . any number greater than or equal to 12 and less than or equal to 20 can be printed. (12,13,14,15,16,17,18,19,20) | . | . import random landed_on = random.randint(1,8) if landed_on &lt;= 3: color = &quot;green&quot; elif 4&lt;= landed_on &lt;= 5: color = &quot;blue&quot; elif landed_on == 6: color = &quot;purple&quot; elif landed_on == 7: color = &quot;red&quot; elif landed_on == 8: color = &quot;orange&quot; print(&quot;your color is&quot;, color) . your color is blue .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupseven",
            "relUrl": "/students/groupseven",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "dividing javascript button",
            "content": "Dividing 2 Numbers . Divide . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;Divide&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a / b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/students/groupsix/divisionbutton",
            "relUrl": "/collegeboard/students/groupsix/divisionbutton",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "adding javascript button",
            "content": "Adding 2 Numbers . Add . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;Add&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/students/groupsix/additionbutton",
            "relUrl": "/collegeboard/students/groupsix/additionbutton",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Week 3 Student Lessons",
            "content": "3.12 and 3.13 Calling and Developing Procedures . A procedure = a named set of instructions that can take in parameters and return values May be called &quot;method&quot; or &quot;function&quot; in different programming languages | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values | Procedures can be classified as sequencing, selection, and iteration | . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there (can be empty) | . x = 5 # input calues can be changed when using parameters y = 3 def multiply(x, y): # x and y are the parameters product = x * y return product answer = multiply(x, y) # this is calling the procedure print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Determining the Result of a Procedure . To determine the result of a procedure or any code: follow code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . return values: write &quot;return&quot; followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . def divide(num1,num2): x = num1/num2 return x # x = return value . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . # This code simulates the scoring at a cheerleading competition &lt;- the overall score for the comp is 25% of your first performance (day 1) and 75% of your second performance (day 2) scores_given = [&quot;Code 5&quot;, &quot;Coed&quot;] team_name = input(&quot;What is the name of your team?&quot;) def combined_score(score1, score2): #defining this function makes it much simpiler when trying to score hundreds of teams # instead of writing all of this code again for each team, it is used repeatedly combined_score = ((0.25*score1)+(0.75*score2)) print(team_name,&quot;&#39;s overall score for the competition is &quot;, combined_score) scores_given.append(team_name) combined_score(score1 = int(input(&quot;what was your day 1 score?&quot;)), score2 = int(input(&quot;what was you day 2 score?&quot;))) print(&quot;Scores have been given to &quot;, scores_given) . TGLC &#39;s overall score for the competition is 97.25 Scores have been given to [&#39;Code 5&#39;, &#39;Coed&#39;, &#39;TGLC&#39;] . 3.14-3.15 Libraries and Random Values . College Board Essential Knowledge . A software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. | . Defining a Library . A library is a collection of code from an external source that can be used to add functionality to a program. | Libraries are very useful, as they can be used to save time and effort in the development process | Libraries are usually included in a program using a special keyword called &quot;import&quot; This keyword tells the program to look for the library and use its code | . What is randomization? . Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3 | . import random # &quot;import&quot; and then the name of the library #imported library allows me to use their random number generator number = random.randint(0,100) print(&quot;you&#39;re random number is&quot;,number) if number == 21: print(&quot;you win!&quot;) else: print(&quot;better luck next time :(&quot;) . you&#39;re random number is 1 better luck next time :( . # another example of import random import random landed_on = random.randint(1,8) if landed_on &lt;= 3: color = &quot;green&quot; elif 4&lt;= landed_on &lt;= 5: color = &quot;blue&quot; elif landed_on == 6: color = &quot;purple&quot; elif landed_on == 7: color = &quot;red&quot; elif landed_on == 8: color = &quot;orange&quot; print(&quot;your color is&quot;, color) . your color is orange . There are many different methods within the random library . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . 3.16 Simulations . Link to my group&#39;s lesson . 3.17-3.18 Algorithm Efficiency and Undecidable Problems . Vocabulary . Collatz: The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . | Hailstone numbers: The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples: Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No. . | Iteration: The action or a process of iterating or repeating: such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . | Undecidable problems: An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . | Unsolvable problems: An unsolvable problem is one for which no algorithm can ever be written to find the solution. . | Algorithmic efficiency: an aspect of algorithmic programming that measures the number of steps needed to solve a problem . inefficient and efficent algorithms have the same objective but one runs more efficiently than the other | . | heuristic approach: a technique designed for solving a problem more quickly when classic methods are too slow . | . sequence = [] def combinedcollatz(i): while i &gt; 1: if (i % 2): # i is odd sequence.append(i) i = 3*i + 1 else: # i is even sequence.append(i) i = i//2 if i == 1: sequence.append(1) else: print(i, &quot;is invalid, please try again&quot;) #this will print if the number is invalid i = int(input(&#39;Enter i: &#39;)) combinedcollatz(i) print(&quot;Hailstone numbers: &quot;, sequence, &quot; nNumber of iterations: &quot;, len(sequence)-1) . Hailstone numbers: [34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1] Number of iterations: 13 . Link to my vocabulary .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/studentlessons/weekthree",
            "relUrl": "/studentlessons/weekthree",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "Section 3.14.1 - Libraries (Ethan Tran) . Learning Objective . To be able to select appropriate libraries and/or existing code to use in the creation of new programs. . College Board Essential Knowledge . A software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. | . Defining a Library . A library is a collection of code from an external source that can be used to add functionality to a program. | Libraries are very useful, as they can be used to save time and effort in the development process. | Libraries are usually included in a program using a special keyword called &quot;import&quot; This keyword tells the program to look for the library and use its code. | . Example . import math math.sqrt(64) . Review Questions (Answer for candy!) . . 1) In your own words, what is a library? . 2) Why are libraries useful when writing a program? . 3) What keyword is used to add a pre-made library? . Hacks . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . . . Lesson 3.15.1 . What is randomization? . 1) Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3, either one of those. . 2) Now if we look into our day to day life we can see that randomization is all around us. . Now for a piece of candy does anyone want to tell us an example of randomization during our day to day life. . 3) In order to use the random function we have to first import random at the very beggining. . Now lets look at the code below right here. . import random answer1 = random.randint(0,3) answer2 = random.randint(1,8) answer3 = answer1 + answer2 print(answer3) . 1) The lowest number that will be generated is 0 for answer 1 and for answer2, the lowest that will be generated is 1 so the lowest number that can be generated for answer 3 would be 1. . 2) The highest number that will be generated to answer1 is 3 and the highest number that will be generated for answer 2 is 8 so the highest number for answer 3 would be 11. . 3) The range of numbers that answer 3 could print out would be from 1 to 11. . So a normal dice contains six sides with 1-6 on the individual sides. Which of the following code would simulate the result of rolling the dice three times and adds together all the obtained values together? . A. . import random sum = random.randint(1,6) + random.randint(1,6) + random.randint(1,6) print(sum) . B. . import random sum = random.randint(1,18) print(sum) . C. . import random sum = 3*random.randint(1,6) print(sum) . 1) Its not B because B is saying that it is going to choose one number between the range of 1 and 18 and not the sum of 3 diff numbers. . 2) C is not correct also because C is saying that the computer is choosing one random between 1 and 6 and multiplying that 3 times but we want the sum of three different numbers between 1 and 6. . 3) So the answer is A. . . For the last example: . import random i = 1 while i &lt; 4: choose = random.randint(1,10) print(choose) i += 1 . Which answers could not be possible for the code above? . A. 4 7 6 . B. 9 1 8 . C. 2 11 5 . D. 5 10 2 . Random can also have different methods, in the above examples we only used one example, randint which returns a random number between the given range. Down below I have created a table of all the methods with the description of what it is used for with the random function. . Method | Description . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . Lesson Recap: 1) random function generates a random number from a to b (range of two numbers) . 2) You need to import random in order to use the random function . 3) Every result from an import function is equally likely to occur . Hacks for lesson 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . . . 3.15.2 Lesson . Some Essential Knowledge that you need to know | RANDOM (a,b) will provide you with a random integer between the numbers a-b | Ex. RANDOM (7,18) can provide you with the number 13. | Using a random generator means each result can come out as different. | . Lets Try an Example Scenario . Try and formulate a way to write a segment of code that can simulate the flipping of a coin. | You have to use a random generator and assign the output of &quot;Heads&quot; or &quot;Tails&quot; to a specified result. | . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) # Try this code for yourself! . This is a pretty simple code to understand. | First we use the randomization here between the 1 and 2 to determine which side of the coin we get. | If we get 1 then we get heads. If we get 2 or anything else than 2, then we get Tails. | . Now let&#39;s answer questions using your knowledge. . If you want yes to show up 50% of the time, which of the code segments can you use? . | A) random(1,100) &lt;= 50 . | B) random(1,100) == 50 | C) random(1,10) &lt;= 5 | D) random(1,10) &gt;= 5 . | The answer is A,C, and D! . | . Why isn&#39;t the answer B? . This because when you are saying equal to 50, you are saying only when this one number shows up the output will be yes. | You want it to come up 50 percent of the time not just when that one number shows up. | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | . Hacks Summary . Hacks 3.14.1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . Hacks 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded?: . any number greater than or equal to 12 and less than or equal to 20 can be printed. (12,13,14,15,16,17,18,19,20) | . | . import random landed_on = random.randint(1,8) if landed_on &lt;= 3: color = &quot;green&quot; elif 4&lt;= landed_on &lt;= 5: color = &quot;blue&quot; elif landed_on == 6: color = &quot;purple&quot; elif landed_on == 7: color = &quot;red&quot; elif landed_on == 8: color = &quot;orange&quot; print(&quot;your color is&quot;, color) .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2016/2022/12/11/group7lesson.html",
            "relUrl": "/week%2016/2022/12/11/group7lesson.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "3.12 and 3.13 Student Lesson (group 6)",
            "content": "Hack 1 . Procedure: a procedure is like a function (it carries out an action) | Parameter: a parameter is a variable that holds data from previously in the function | Return Values: return values are what is returned after the &quot;return&quot; statement &lt;- they allow for the data to be refrenced later in the code (ex: print) | Output Parameters: the parameters that refrence the output of a previous function | . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: c Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: d Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: b Correct :) Score: 3 / 3 . import math number = input(&quot;What number would you like to take the square root of?&quot;) def square_root_function(number): square_root = math.sqrt(int(number)) return square_root print(&quot;The square root of &quot; + number + &quot; is &quot; + str(square_root_function(number))) . The square root of 4 is 2.0 . Hack 2 . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective: abstracting away your program logic into seperate functions is effective since it allows for you to be more time efficicent, and make fewer errors. If you need to identify/change an error, you have less to work with and change. Also, it is easier to follow, and can reference pre-existing functions (making the coding simpler) | . | # This code simulates the scoring at a cheerleading competition &lt;- the overall score for the comp is 25% of your first performance (day 1) and 75% of your second performance (day 2) scores_given = [&quot;Code 5&quot;, &quot;Coed&quot;] team_name = input(&quot;What is the name of your team?&quot;) def combined_score(score1, score2): #defining this function makes it much simpiler when trying to score hundreds of teams # instead of writing all of this code again for each team, it is used repeatedly combined_score = ((0.25*score1)+(0.75*score2)) print(team_name,&quot;&#39;s overall score for the competition is &quot;, combined_score) scores_given.append(team_name) combined_score(score1 = int(input(&quot;what was your day 1 score?&quot;)), score2 = int(input(&quot;what was you day 2 score?&quot;))) print(&quot;Scores have been given to &quot;, scores_given) . TGLC &#39;s overall score for the competition is 97.25 Scores have been given to [&#39;Code 5&#39;, &#39;Coed&#39;, &#39;TGLC&#39;] . # this function takes a string as input and returns a list of words, where each word # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # this function takes a string as input and returns the number of words that start with any inputted letter def count_words_starting_with_l_letter(s): l = input(&quot;What letter would you like to check?&quot;) words = split_string(s) count = count_words_starting_with_letter(words, l) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; l_count = count_words_starting_with_l_letter(s) a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with your letter:&quot;, l_count) . Words starting with your letter: 1 . Hack 3 . procedure names: the name of the function in which you are calling | arguments: values that are sent to a function when called for | . Adding 2 Numbers Button . Subtracting 2 Numbers Button . Multiplying 2 Numbers Button . Dividing 2 Numbers Button .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupsix",
            "relUrl": "/students/groupsix",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "3.9 and 3.11 Student Lesson (group 5)",
            "content": "Hacks 1 . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . Why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? This knowledge is important since it will cause people to look at and compare code more carefully. We can catch mistakes, make code more efficient, and overall learn from others. Mistakes are learning too! | . | . isalexatired = True havehw = True if isalexatired == True and havehw == False: print(&quot;Stay home and sleep!&quot;) else: if havehw == True: print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep!&quot;) # Boolean conversion gotoschool = not(isalexatired) or isalexatired and havehw if gotoschool == True: print(&quot;Go do you work at school!&quot;) if gotoschool == False: print(&quot;Stay home and sleep queen&quot;) . Go to school Go do you work at school! . Hacks 2 . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Natural Language for Netflix Code . Input what show user is looking for | check if show is in showdictionary | If it is in dictionary, move onto step 4. If not, print &quot;show is not available on Netflix&quot; | check if the show has a rating of 3 or higher | If it does, print &quot;show is recommended&quot;; if it doesn&#39;t print &quot;how is not recommended&quot; | Flow chart is in review ticket . showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is recommended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is recommended . Hacks 3 . Fix the number guessing game . Make a flow chart for the algorithm number guessing game &lt;- flow chart is in review ticket | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = -1 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(0,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 0 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): guessednum = input(&quot;Choose a number!&quot;) return guessednum #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;You guessed too low&quot;) lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;You guessed too high&quot;) upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 0 and 100. You guessed 72. You guessed too high Guess a number between 0 and 72. You guessed 34. You guessed too low Guess a number between 34 and 72. You guessed 45. You guessed too low Guess a number between 45 and 72. You guessed 56. You guessed too high Guess a number between 45 and 56. You guessed 48. You guessed too low Guess a number between 48 and 56. You guessed 49. You guessed too low Guess a number between 49 and 56. You guessed 52. You guessed the number in 7 guesses! . Hacks 4 . calculate the middle index and create a binary tree for each of these lists Binary Trees in review ticket 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number?: In the first set of numbers, the second number looked at in a binary search if it is more than the middle number would be 80. | In the second set of numbers, the second number looked at in a binary search if it is more than the middle number would be 74. | In the third set of numbers, the second number looked at in a binary search if it is more than the middle number would be 96. | . | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . Answer = C . | index = [12, 14, 43, 57, 79, 80, 99] index.sort() mid = int(len(index) / 2) print(mid) print(&quot;middle is&quot;,index[mid]) . 3 middle is 57 . index =[1, 12, 30, 43, 66, 74, 92] index.sort() mid = int(len(index) / 2) print(mid) print(&quot;middle is&quot;,index[mid]) . 3 middle is 43 . index = [7, 13, 33, 60, 84, 96, 111] index.sort() mid = int(len(index) / 2) print(mid) print(&quot;middle is&quot;,index[mid]) . 3 middle is 60 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupfive",
            "relUrl": "/students/groupfive",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Week 2 Student Lessons",
            "content": "3.5-3.7 Student Lesson (group 3) . What is a boolean? . boolean = a denoting a system of algebraic notation used to represent logical propositions, especially in computing and electronics. | simple terms: determines if something is true or false | used in binary (0 = false and 1 = true) | . score = 3 i = score if i == 3: print(&quot;True&quot;) # either is true or false else: print(&quot;False&quot;) . True . Hack 1: 3.5 . [x] Explain in your own words what each logical operator does [x] Code your own scenario that makes sense for each logical operator . NOT: The NOT logical operator returns the opposite condtion of the data | AND: The AND logical operator determines if 2 conditions are met | OR: The OR logical operator determines if 1 of the conditions are met | . ispassing = False isstudentpassing = not(ispassing) print(isstudentpassing) . temp = input(&quot;what is the temperature today?&quot;) if int(temp) &gt;= 40 and int(temp) &lt;= 70: print(&quot;Bring a hoodie!&quot;) if int(temp) &lt; 40: print(&quot;bring snow gear!&quot;) if int(temp) &gt; 70: print(&quot;No jacket today!&quot;) . Bring a hoodie! . APscore = 4 Finalscore = 68 if APscore &gt;= 3 or Finalscore &gt;= 75: print(&quot;student passed this class&quot;) else: print(&quot;student did not pass this class&quot;) . student passed this class . Notes . Selection: specific block of code that will execute (depending on algorithm condition returning true or false) | Algorithm: finite set of instructions that accomplish a specific task | Conditional Statement / If-Statement: statement that affects the sequence of control by executing certain statements depending on the value of a boolean (true or false) | Conditionals allow for the expression of algorithms that utilize selection without a programming language &quot;In which the code in block of statements is executed if the Boolean expression condition evaluates to true; no action is taken if condition evaluates to false&quot; | . | . Conditionals are ues in many languages . here is an example of one in Javascript: | . if (30 == 7) { console.log(&quot;The condition is true&quot;) } else if (30 != 7) { console.log(&quot;The condition is false&quot;) } . Hack 2: 3.6 . [x] Level I: Vowel Count Return the number (count) of vowels in the given string. We will consider a, e, i, o, u as vowels for this challenge (but not y). The input string will only consist of lower case letters and/or spaces. . Hint: If you use a lot of if-statements and there are more than one outcome, that is to be expected. If not, don&#39;t panic, just keep trying. . [x] Level III: Mutliples of 3 or 5 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. . Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Additionally, if the number is negative, return 0 (for languages that do have them). . Note: If the number is a multiple of both 3 and 5, only count it once. . Hint: What do you know about for loops? Since your code incorporates a list of numbers from 1 to the max number, can you use for loops along with conditionals? . [x] binary conditional logic [x] define key terms . Defining Key Terms: . Boolean: a boolean is an operator that determines if a condition is true or false | Selection: When an algorithm must make a decision (if a condition is met) | AND: AND is a logical operator that determines of 2 conditions are both met | OR: OR is a logical operator that determines if 1 of 2 conditions is met | NOT: NOT is a logical operator that displays the oposition condition of the data | . gpa = 4.0 extracirriculars = &quot;present&quot; if gpa &gt;= 4.0 and extracirriculars == &quot;present&quot;: major = input(&quot;What is your major&quot;) if major == &quot;math&quot; or major == &quot;science&quot;: print(&quot;You have been accepted into our STEM program!&quot;) elif major == &quot;english&quot; or major == &quot;history&quot;: print(&quot;You have been accepted into our arts program!&quot;) else: print(&quot;You have been accepted into our &quot; + major + &quot; program!&quot;) else: print(&quot;I&#39;m sorry, you are not accepted to this program&quot;) . You have been accepted into our STEM program! . # my first attempt at the Level 1 Challenge &lt; better to not use the contians function # also needs to iterate through to check every character (what if there are multiple of each vowel?) word=input(&quot;Input a word to check how many vowels it has. &quot;) i == 0 #number of vowels if word.__contains__(&quot;a&quot;): i =+ 1 if word.__contains__(&quot;e&quot;): i =+ 1 if word.__contains__(&quot;i&quot;): i =+ 1 if word.__contains__(&quot;o&quot;): i =+ 1 if word.__contains__(&quot;u&quot;): i =+ 1 if i == 0: print(&quot;this word has no vowels&quot;) else: print(i) . input_string = input(&quot;Input a string to check how many vowels it has. &quot;) vowelcount = 0 for character in input_string: #iterates through the string character by character if character == &quot;a&quot;: vowelcount += 1 elif character == &quot;e&quot;: vowelcount += 1 elif character == &quot;i&quot;: vowelcount += 1 elif character == &quot;o&quot;: vowelcount += 1 elif character == &quot;u&quot;: vowelcount += 1 print(vowelcount) . 4 . numberstring = input(&quot;Input a number to find the sum of all the multiples of 3 or 5 below it. &quot;) numbertocheck = int(numberstring) totalmultiples = 0 if numbertocheck &gt;= 0: # if the number is negative it will display the sum as 0 for n in range(numbertocheck+1): if n/3 == int(n/3): #checks for multiples of 3 print(str(n) + &quot; is a multiple of 3&quot;) totalmultiples += n #elif prevents duplicates of numbers with both multiples of 3 and 5 elif n/5 == int(n/5): # checks for multiples of 5 print(str(n) + &quot; is a multiple of 5&quot;) totalmultiples += n print(totalmultiples) . 0 is a multiple of 3 3 is a multiple of 3 5 is a multiple of 5 6 is a multiple of 3 9 is a multiple of 3 10 is a multiple of 5 12 is a multiple of 3 15 is a multiple of 3 60 . Hack 3 . [x] For the first hack, pretend you are a school&#39;s test grader. Create an array with integers, each integer representing one score from a student&#39;s taken tests. If the average of the student&#39;s test scores are at least 75 percent, then display that the student is elligible for credit, and if not, display that the student must retake the tests over break. [x] The second hack is more number-oriented. Create an algorithm that calculates the sum of two numbers, then determines whether the sum is greater than or less than 100. [x] The hacks above was heavily derived from CollegeBoard. As a computer science student, you should be able to create an algorithm utilizing conditionals. Try something number-oriented if you get stuck. Creativity gets points. . def average(lst): return sum(lst)/len(lst) gradelist = [92, 83, 90, 74, 86, 97] averagegrade = average(gradelist) print(str(averagegrade) + &quot; is the student&#39;s grade average&quot;) if averagegrade &gt;= 75: print(&quot;student is eligible for credit&quot;) else: print(&quot;student needs to retake tests during break&quot;) . 87.0 is the student&#39;s grade average student is eligible for credit . num1 = input(&quot;What is your first number?&quot;) num2 = input(&quot;What is your second number?&quot;) sumofnumbers = int(num1) + int(num2) if sumofnumbers &gt;= 100: print(str(sumofnumbers) + &quot; is greater than or equal to 100&quot;) else: print(str(sumofnumbers) + &quot; is less than than 100&quot;) . 7 is less than than 100 . # to test if a show is included in Netflix, and if it is recommended showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is recommended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is recommended . Nested Conditions . conditional statements within conditional statements | called &quot;nested&quot; within another | else if inside of another ese if | . Hack 4 . [x] Create 3 differnt flow charts representing nested statements and transfer them into code. [x] Create a piece of code that displays four statements instead of three. Try to do more if you can. [x] Make piece of code that gives three different recommandations for possible classes to take at a school based on two different condtions. These conditions could be if the student likes STEM or not. . STEM = input(&quot;Are you intrested in STEM? Y or N&quot;) if STEM == &quot;Y&quot;: subject = input(&quot;Do you like math or science better?&quot;) if subject == &quot;math&quot;: print(&quot;Class recommendations: Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics&quot;) if subject == &quot;science&quot;: print(&quot;Class recommendations: Chemistry, Physics, AP Enviornmental Science, AP Physics, AP Chemistry&quot;) else: language = input(&quot;Are you intrested in language? Y or N&quot;) if language == &quot;Y&quot;: lansubject = input(&quot;Do you prefer a foreign language or English?&quot;) if lansubject == &quot;foreign language&quot;: print(&quot;Class recommendations: Spanish, Mandarin, AP Spanish, AP Mandarin&quot;) if lansubject == &quot;English&quot;: print(&quot;Class recommendations: American Literature, AP English Literature&quot;) if language == &quot;N&quot;: print(&quot;See class list for more options!&quot;) . Class recommendations: Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics . Flowchart #1: Is it cold? . temp = input(&quot;what is the temperature today?&quot;) if int(temp) &lt;= 73: print(&quot;It is cold!&quot;) if int(temp) &lt;= 40: print(&quot;Bring a snow jacket!&quot;) else: print(&quot;Bring a hoodie!&quot;) else: print(&quot;It&#39;s warm today! Don&#39;t bring a jacket :)&quot;) . It is cold! Bring a snow jacket! . Flowchart #2: Is the class difficult? . passingrate = 72 testaverage = 82 if passingrate &gt; 70 and passingrate &lt;= 100: if testaverage &gt;= 80: print(&quot;This class is not difficult&quot;) else: print(&quot;this class is difficult&quot;) else: print(&quot;this class is difficult&quot;) . This class is not difficult . Flowchart #3: Should Alexa work at school during first period off roll? . feeling = input(&quot;Are you tired today?&quot;) if feeling == &quot;yes&quot;: print(&quot;Stay home and sleep&quot;) if feeling == &quot;no&quot;: homework = input(&quot;Do you have homework to do?&quot;) if homework == &quot;yes&quot;: print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep&quot;) . Stay home and sleep . drinkable = &quot;potable&quot; temperature = &quot;warm&quot; if drinkable == &quot;potable&quot;: print(&quot;water is potable&quot;) if temperature == &quot;cold&quot;: print(&quot;water is &quot; + str(temperature)) print(&quot;water is in ideal condition&quot;) print(&quot;drink up!&quot;) else: print(&quot;water is &quot; + str(temperature)) print(&quot;water is not in ideal condition&quot;) print(&quot;chill with ice&quot;) else: print(&quot;do not drink, water is not potable&quot;) . water is potable water is warm water is not in ideal condition chill with ice . 3.8-3.10 Student Lesson (group 4) . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met | Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop | . while loops = similar outpytut with variation in input | similar to for loop (requires a variable which is the starting value) | . Hacks Unit 3 Section 3.8.1 . Define an Iteration | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | Iteration: loop that continues repeating until condition is met | Example of iteration with stopping condition: I am doing an easter egg hunt and trying to frind the golden egg. I have split the searching area into sections | . I walk to a section | I look aroung to try and find the golden egg | If it is not there, I add one to the section number (move onto next section) | I repeat steps 1 through 4 | Once I find the egg, I stop searching to go brag to the kids | | . hourshomework = 0 while hourshomework &lt; 8: print(&quot;Too easy&quot;) hourshomework += 1 if hourshomework == 6: break . Too easy Too easy Too easy Too easy Too easy Too easy . Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | Iteration statement: a condition that must be met in a loop or it will continue repeating | . Lists Commands . append() - adding element to the end of the list | insert() - adding an element in a specific position | remove() - remove an item from the list | len() - returns the number of items in a list | sort() - changes order of list permanently | sorted() - returns a copy of the list which leaves the original copy unchanged | range() - use to work with number efficiently | min() - find the least value in list | max() - find the highest value in list | sum() - sum of all in list | . numlist = [50] for i in numlist: i -= 1 numlist.append(i) # using append to add to the end of a list if i == 0: break print(numlist) . [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . i = 3 print(i) while i &lt;= 68: i += 13 print(i) . 3 16 29 42 55 68 81 . Find the lowest value in a list . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min = 20 for n in nums: if int(n) &lt; int(min): min = n print(min) . 10 . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows an element at index i to be deleted from a list? remove() Correct! What allows a value to be added at the end of a list? append() Correct! What returns the number of elements currently in a specific list? length() Correct! What allows a value to be inserted into a list at index i? index() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! . monthly_earnings = [] a = 0 while a == 0: money = input(&quot;How much money did you make this month?&quot;) if money == &quot;&quot;: break monthly_earnings.append(int(money)) # uses append() sort = input(&quot;Do you want to sort your earnings?&quot;) if sort == &quot;yes&quot;: print(&quot;sorted:&quot;) print(sorted(monthly_earnings)) # uses sorted() which returns a copy of list else: print(&quot;unsorted:&quot;) print(monthly_earnings) print(&quot;Your highest monthly earning is $&quot; + str(max(monthly_earnings))) #uses max() print(&quot;You have been working for &quot; + str(len(monthly_earnings)) + &quot; months&quot;) . sorted: [2, 42, 3256, 5000] Your highest monthly earning is $5000 You have been working for 4 months . 3.9 and 3.11 Student Lesson (group 5) . 3 components to an algorithm: . selection | sequence | iteration | . Algorithms can be written is different ways but work the same way! | Why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? This knowledge is important since it will cause people to look at and compare code more carefully. We can catch mistakes, make code more efficient, and overall learn from others. Mistakes are learning too! | . | . # code #1 print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? Wow! Good job! . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . What Grade Did You Get? Wow! Good job! . Nested Conditionals . isalexatired = True havehw = True if isalexatired == True and havehw == False: print(&quot;Stay home and sleep!&quot;) else: if havehw == True: print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep!&quot;) # Boolean conversion gotoschool = not(isalexatired) or isalexatired and havehw if gotoschool == True: print(&quot;Go do you work at school!&quot;) if gotoschool == False: print(&quot;Stay home and sleep queen&quot;) . Go to school Go do you work at school! . Developing Algorithms . good to outline process before coding | make sure everything is sequenced correctly! (goes through in intended order) | should make a flow chart or use natural language | . Natural Language for Netflix Code . Input what show user is looking for | check if show is in showdictionary | If it is in dictionary, move onto step 4. If not, print &quot;show is not available on Netflix&quot; | check if the show has a rating of 3 or higher | If it does, print &quot;show is recommended&quot;; if it doesn&#39;t print &quot;how is not recommended&quot; | showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is recommended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is recommended . Pre-Existing Algorithms . can be helpful to use pre-exsiting functions | common and simple ones include: determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | . import random #sets variables for the game num_guesses = 0 user_guess = -1 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(0,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 0 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): guessednum = input(&quot;Choose a number!&quot;) return guessednum #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;You guessed too low&quot;) lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;You guessed too high&quot;) upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 0 and 100. You guessed 78. You guessed too high Guess a number between 0 and 78. You guessed 34. You guessed too low Guess a number between 34 and 78. You guessed 45. You guessed too high Guess a number between 34 and 45. You guessed 56. You guessed too high Guess a number between 34 and 56. You guessed 38. You guessed too low Guess a number between 38 and 56. You guessed 42. You guessed too low Guess a number between 42 and 56. You guessed 43. You guessed the number in 7 guesses! . Binary Search . what is it?: repeatedly dividing a search interval in half | . put the numbers in order ascending | descending | . | find the middle number first . this is found by taking the highest index number plus the lowest index number and divide by 2 | . | the numbers on the right will be greater and the numbers on the left will be smaller . this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . index = [12, 14, 43, 57, 79, 80, 99] index.sort() mid = int(len(index) / 2) print(mid) print(&quot;middle is&quot;,index[mid]) . 3 middle is 57 . Unit 3 Vocabulary . variables: &quot;containers&quot; or used to store information to be referenced and manipulated in a computer program | data types: a classification that specifies which type of value a variable has and what type of mathematical, relational or logical operations can be applied to it | assignment operators: the operator used to assign a new value to a variable | lists: an abstract data type that represents a finite number of ordered values | dictionaries: an abstract data type that defines an unordered collection of data as a set of key-value pairs | class: a template definition of a method and variable in a particular kind of object | algorithm: a procedure used for solving a problem or performing a computation | sequence: the order of how to do something to achieve a result | selection: allows an algorithm to make a decision based on if a condition is met | iteration: iteration: a loop and doing something again until a condition is met | expressions: a concept in which a number of variables or constants, and operators and functions, are put together in a single statement that is acted on by a particular programming language | comparison operators: compare the values within an expression, such as to check if the value held by a variable matches the value held by another variable | boolean expression: a logical statement that is either TRUE or FALSE | truth tables: a breakdown of all the possible truth values returned by a logical expression (usually 1/0, true/false) | characters: a display unit of information equivalent to one alphabetic letter or symbol | strings: an array data structure of bytes (or words) that stores a sequence of elements | length: length() function returns the number of items in an object | concatenation: the operation of joining two strings together | python if: a conditional statement tha decides if a certian condition is true/decides whether certain statements need to be executed or not | python elif: elif = else if and checks for multiple expressions (if the condition for if is False, it checks the condition of the next elif block) | python else conditionals: else catches anything which isn&#39;t caught by the previous conditions (like and if statement) | nested selection statements: when more than one decision must be made before carrying out a task | Python for loop: a control flow statement that is used to repeatedly execute a group of statements as long as the condition is satisfied | Python while loop with range and with list: sets aside a block of code that is to be executed repeatedly until a condition is falsified | Combining loops with conditionals to Break, Continue: | Procedural Abstraction: when we create code sections which are generalised by having variable parameters (more simple) | Python Def procedures: | paramerters: a special kind of variable used in a function to refer to one of the pieces of data provided as input to the function | return values: a value that a function returns to the calling function when it completes its task | . Below are examples of some of the vocabulary: . variables, data types, assignment operators, dictionaries, algorithm, sequence, selection, expressions, comparision operators, boolena expressions, strings, python if, else, for loop, list, iteration, procedural abstraction, combining loops with conditional to break | . # to test if a show is included in Netflix, and if it is recommended &lt; this is anm example of an algorithm showdictionary = { #this is a dictionary &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } # this is an example of sequencing (order matters) and selection (of and else statements) show = input(&quot;What show are you looking for?&quot;) # this is an example of a variable, the &quot;=&quot; is the assignment operator # this variable has the data type of a string if show in showdictionary.keys(): # this is an if statement in python print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: # this is a nested selection statement print(&quot;show/movie is recommended&quot;) else: # this is an example of an else statement in python, it will only apply if the previous if condition isn&#39;t met print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . isalexatired = True #these are variables with the assignment operator &quot;=&quot; havehw = True if isalexatired == True and havehw == False: # these are Booleans and comparison operators print(&quot;Stay home and sleep!&quot;) else: if havehw == True: # more examples of nested conditionals print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep!&quot;) . input_string = input(&quot;Input a string to check how many vowels it has. &quot;) # another variable with the data type of string vowelcount = 0 # assigning a number data type to a variable for character in input_string: #iterates through the string character by character if character == &quot;a&quot;: vowelcount += 1 elif character == &quot;e&quot;: # an example of an elif statement vowelcount += 1 elif character == &quot;i&quot;: vowelcount += 1 elif character == &quot;o&quot;: vowelcount += 1 elif character == &quot;u&quot;: vowelcount += 1 print(vowelcount) . numlist = [50] for i in numlist: i -= 1 numlist.append(i) # .append is an example of procedural abstraction if i == 0: break # conditional to break the loop print(numlist) . [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/studentlessons/weektwo",
            "relUrl": "/studentlessons/weektwo",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "3.8-3.10 Student Lesson (group 4)",
            "content": "Hacks Unit 3 Section 3.8.1 . Define an Iteration | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | Iteration: loop that continues repeating until condition is met | Example of iteration with stopping condition: I am doing an easter egg hunt and trying to frind the golden egg. I have split the searching area into sections | . I walk to a section | I look aroung to try and find the golden egg | If it is not there, I add one to the section number (move onto next section) | I repeat steps 1 through 4 | Once I find the egg, I stop searching to go brag to the kids | | . hourshomework = 0 while hourshomework &lt; 8: print(&quot;Too easy&quot;) hourshomework += 1 if hourshomework == 6: break . Too easy Too easy Too easy Too easy Too easy Too easy . Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | Iteration statement: a condition that must be met in a loop or it will continue repeating | . numlist = [50] for i in numlist: i -= 1 numlist.append(i) if i == 0: break print(numlist) . [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . i = 3 print(i) while i &lt;= 68: i += 13 print(i) . 3 16 29 42 55 68 81 . Find the lowest value in a list . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min = 20 for n in nums: if int(n) &lt; int(min): min = n print(min) . 10 . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be added at the end of a list? append() Correct! What allows a value to be inserted into a list at index i? index() Correct! What allows an element at index i to be deleted from a list? remove() Correct! What returns the number of elements currently in a specific list? length() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! . monthly_earnings = [] a = 0 while a == 0: money = input(&quot;How much money did you make this month?&quot;) if money == &quot;&quot;: break monthly_earnings.append(int(money)) sort = input(&quot;Do you want to sort your earnings?&quot;) if sort == &quot;yes&quot;: print(&quot;sorted:&quot;) print(sorted(monthly_earnings)) else: print(&quot;unsorted:&quot;) print(monthly_earnings) print(&quot;Your highest monthly earning is $&quot; + str(max(monthly_earnings))) print(&quot;You have been working for &quot; + str(len(monthly_earnings)) + &quot; months&quot;) . sorted: [2, 36, 345, 578, 9000] Your highest monthly earning is $9000 You have been working for 5 months .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupfour",
            "relUrl": "/students/groupfour",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Lesson 3.12 & 3.13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): # math(any number) would call the the procedure op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: c Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: d Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: b Correct :) Score: 3 / 3 . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) return result cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: 0b11011 Cube: 0b1000000 . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 ########DO THIS FOR EC############# . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Monday, December 12 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2015/2022/12/04/group6lesson.html",
            "relUrl": "/week%2015/2022/12/04/group6lesson.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "3.5-3.7 Student Lesson (group 3)",
            "content": "Hack 1: 3.5 . [x] Explain in your own words what each logical operator does [x] Code your own scenario that makes sense for each logical operator . Hack 1 . NOT: The NOT logical operator returns the opposite condtion of the data | AND: The AND logical operator determines if 2 conditions are met | OR: The OR logical operator determines if 1 of the conditions are met | . ispassing = False isstudentpassing = not(ispassing) print(isstudentpassing) . True . temp = input(&quot;what is the temperature today?&quot;) if int(temp) &gt;= 40 and int(temp) &lt;= 70: print(&quot;Bring a hoodie!&quot;) if int(temp) &lt; 40: print(&quot;bring snow gear!&quot;) if int(temp) &gt; 70: print(&quot;No jacket today!&quot;) . Bring a hoodie! . APscore = 4 Finalscore = 68 if APscore &gt;= 3 or Finalscore &gt;= 75: print(&quot;student passed this class&quot;) else: print(&quot;student did not pass this class&quot;) . student passed this class . Hack 2: 3.6 . [x] Level I: Vowel Count Return the number (count) of vowels in the given string. We will consider a, e, i, o, u as vowels for this challenge (but not y). The input string will only consist of lower case letters and/or spaces. . Hint: If you use a lot of if-statements and there are more than one outcome, that is to be expected. If not, don&#39;t panic, just keep trying. . [x] Level III: Mutliples of 3 or 5 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. . Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Additionally, if the number is negative, return 0 (for languages that do have them). . Note: If the number is a multiple of both 3 and 5, only count it once. . Hint: What do you know about for loops? Since your code incorporates a list of numbers from 1 to the max number, can you use for loops along with conditionals? . [x] binary conditional logic [x] define key terms . Defining Key Terms: . Boolean: a boolean is an operator that determines if a condition is true or false | Selection: When an algorithm must make a decision (if a condition is met) | AND: AND is a logical operator that determines of 2 conditions are both met | OR: OR is a logical operator that determines if 1 of 2 conditions is met | NOT: NOT is a logical operator that displays the oposition condition of the data | . gpa = 4.0 extracirriculars = &quot;present&quot; if gpa &gt;= 4.0 and extracirriculars == &quot;present&quot;: major = input(&quot;What is your major&quot;) if major == &quot;math&quot; or major == &quot;science&quot;: print(&quot;You have been accepted into our STEM program!&quot;) elif major == &quot;english&quot; or major == &quot;history&quot;: print(&quot;You have been accepted into our arts program!&quot;) else: print(&quot;You have been accepted into our &quot; + major + &quot; program!&quot;) else: print(&quot;I&#39;m sorry, you are not accepted to this program&quot;) . You have been accepted into our STEM program! . input_string = input(&quot;Input a string to check how many vowels it has. &quot;) vowelcount = 0 for character in input_string: #iterates through the string character by character if character == &quot;a&quot;: vowelcount += 1 elif character == &quot;e&quot;: vowelcount += 1 elif character == &quot;i&quot;: vowelcount += 1 elif character == &quot;o&quot;: vowelcount += 1 elif character == &quot;u&quot;: vowelcount += 1 print(vowelcount) . 7 . numberstring = input(&quot;Input a number to find the sum of all the multiples of 3 or 5 below it. &quot;) numbertocheck = int(numberstring) totalmultiples = 0 if numbertocheck &gt;= 0: # if the number is negative it will display the sum as 0 for n in range(numbertocheck+1): if n/3 == int(n/3): #checks for multiples of 3 print(str(n) + &quot; is a multiple of 3&quot;) totalmultiples += n #elif prevents duplicates of numbers with both multiples of 3 and 5 elif n/5 == int(n/5): # checks for multiples of 5 print(str(n) + &quot; is a multiple of 5&quot;) totalmultiples += n print(totalmultiples) . 0 is a multiple of 3 3 is a multiple of 3 5 is a multiple of 5 6 is a multiple of 3 9 is a multiple of 3 10 is a multiple of 5 12 is a multiple of 3 15 is a multiple of 3 18 is a multiple of 3 20 is a multiple of 5 21 is a multiple of 3 24 is a multiple of 3 143 . Hack 3 . [x] For the first hack, pretend you are a school&#39;s test grader. Create an array with integers, each integer representing one score from a student&#39;s taken tests. If the average of the student&#39;s test scores are at least 75 percent, then display that the student is elligible for credit, and if not, display that the student must retake the tests over break. [x] The second hack is more number-oriented. Create an algorithm that calculates the sum of two numbers, then determines whether the sum is greater than or less than 100. [x] The hacks above was heavily derived from CollegeBoard. As a computer science student, you should be able to create an algorithm utilizing conditionals. Try something number-oriented if you get stuck. Creativity gets points. . def average(lst): return sum(lst)/len(lst) gradelist = [92, 83, 90, 74, 86, 97] averagegrade = average(gradelist) print(str(averagegrade) + &quot; is the student&#39;s grade average&quot;) if averagegrade &gt;= 75: print(&quot;student is eligible for credit&quot;) else: print(&quot;student needs to retake tests during break&quot;) . 87.0 is the student&#39;s grade average student is eligible for credit . num1 = input(&quot;What is your first number?&quot;) num2 = input(&quot;What is your second number?&quot;) sumofnumbers = int(num1) + int(num2) if sumofnumbers &gt;= 100: print(str(sumofnumbers) + &quot; is greater than or equal to 100&quot;) else: print(str(sumofnumbers) + &quot; is less than than 100&quot;) . 202 is greater than or equal to 100 . # to test if a show is included in Netflix, and if it is recommended showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is recommended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is recommended . Hack 4 . [x] Create 3 differnt flow charts representing nested statements and transfer them into code. [] Create a piece of code that displays four statements instead of three. Try to do more if you can. [x] Make piece of code that gives three different recommandations for possible classes to take at a school based on two different condtions. These conditions could be if the student likes STEM or not. . STEM = input(&quot;Are you intrested in STEM? Y or N&quot;) if STEM == &quot;Y&quot;: subject = input(&quot;Do you like math or science better?&quot;) if subject == &quot;math&quot;: print(&quot;Class recommendations: Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics&quot;) if subject == &quot;science&quot;: print(&quot;Class recommendations: Chemistry, Physics, AP Enviornmental Science, AP Physics, AP Chemistry&quot;) else: language = input(&quot;Are you intrested in language? Y or N&quot;) if language == &quot;Y&quot;: lansubject = input(&quot;Do you prefer a foreign language or English?&quot;) if lansubject == &quot;foreign language&quot;: print(&quot;Class recommendations: Spanish, Mandarin, AP Spanish, AP Mandarin&quot;) if lansubject == &quot;English&quot;: print(&quot;Class recommendations: American Literature, AP English Literature&quot;) if language == &quot;N&quot;: print(&quot;See class list for more options!&quot;) . Class recommendations: Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics . Flowchart #1: Is it cold? . &lt;!-- &lt;img src=&quot;_images/ColdFlowChart.png&quot; alt=&quot;flowchart1&quot;&gt; . temp = input(&quot;what is the temperature today?&quot;) if int(temp) &lt;= 73: print(&quot;It is cold!&quot;) if int(temp) &lt;= 40: print(&quot;Bring a snow jacket!&quot;) else: print(&quot;Bring a hoodie!&quot;) else: print(&quot;It&#39;s warm today! Don&#39;t bring a jacket :)&quot;) . It is cold! Bring a hoodie! . Flowchart #2: Is the class difficult? . &lt;!-- &lt;img src=&quot;_images/Istheclassdifficult.png&quot; alt=&quot;flowchart2&quot;&gt; . passingrate = 72 testaverage = 82 if passingrate &gt; 70 and passingrate &lt;= 100: if testaverage &gt;= 80: print(&quot;This class is not difficult&quot;) else: print(&quot;this class is difficult&quot;) else: print(&quot;this class is difficult&quot;) . This class is not difficult . Flowchart #3: Should Alexa work at school during first period off roll? . &lt;!-- &lt;img src=&quot;_images/Offrollflowchart.png&quot; alt=&quot;flowchart3&quot;&gt; --&gt; . feeling = input(&quot;Are you tired today?&quot;) if feeling == &quot;yes&quot;: print(&quot;Stay home and sleep&quot;) if feeling == &quot;no&quot;: homework = input(&quot;Do you have homework to do?&quot;) if homework == &quot;yes&quot;: print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep&quot;) . Go to school . drinkable = &quot;potable&quot; temperature = &quot;warm&quot; if drinkable == &quot;potable&quot;: print(&quot;water is potable&quot;) if temperature == &quot;cold&quot;: print(&quot;water is &quot; + str(temperature)) print(&quot;water is in ideal condition&quot;) print(&quot;drink up!&quot;) else: print(&quot;water is &quot; + str(temperature)) print(&quot;water is not in ideal condition&quot;) print(&quot;chill with ice&quot;) else: print(&quot;do not drink, water is not potable&quot;) . water is potable water is warm water is not in ideal condition chill with ice . Kahoot quiz: The Kahoot is not playble .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupthree",
            "relUrl": "/students/groupthree",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Unit 3.9 & 3.11",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . selection | sequence | iteration | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? Wow! Good job! . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . What Grade Did You Get? Wow! Good job! . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . go to school! . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . go to school! . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . isalexatired = True havehw = True if isalexatired == True and havehw == False: print(&quot;Stay home and sleep!&quot;) else: if havehw == True: print(&quot;Go to school&quot;) else: print(&quot;Stay home and sleep!&quot;) gotoschool = not(isalexatired) or isalexatired and havehw if gotoschool == True: print(&quot;Go do you work at school!&quot;) if gotoschool == False: print(&quot;Stay home and sleep queen&quot;) . Go to school Go do you work at school! . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . 5 4 3 2 1 0 All done! . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . The parking rate is as follows: Less than one hour: Free 1-2 hours: $5 2-3 hours: $8 3-4 hours: $10 4+ hours: $12 How many hours have you parked at this garage? 3.0 hours costs: $10 Have a good day! . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): guess = input(&quot;What is your guess? (between 1 and 100)&quot;) return guess #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; number: print(&quot;you guessed too low&quot;) #change this lower_bound = guess elif int(guess) &gt; number: print(&quot;you guessed too high&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 88. you guessed too high Guess a number between 0 and 88. You guessed 33. you guessed too high Guess a number between 0 and 33. You guessed 22. you guessed too high Guess a number between 0 and 22. You guessed 12. Guess a number between 0 and 22. You guessed 14. you guessed too high Guess a number between 0 and 14. You guessed 8. you guessed too low Guess a number between 8 and 14. You guessed 10. you guessed too low Guess a number between 10 and 14. You guessed 11. you guessed too low Guess a number between 11 and 14. You guessed 12. Guess a number between 11 and 14. You guessed 12. Guess a number between 11 and 14. You guessed . . ValueError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb Cell 22 in &lt;cell line: 34&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=35&#39;&gt;36&lt;/a&gt; num_guesses += 1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=36&#39;&gt;37&lt;/a&gt; print(f&#34;You guessed {user_guess}.&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; lower_bound, upper_bound = search(number, user_guess) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; print(f&#34;Guess a number between {lower_bound} and {upper_bound}.&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=39&#39;&gt;40&lt;/a&gt; if user_guess == number: /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb Cell 22 in search(number, guess) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; def search(number, guess): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; global lower_bound, upper_bound &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; if int(guess) &lt; number: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=24&#39;&gt;25&lt;/a&gt; print(&#34;you guessed too low&#34;) #change this &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-12-02-group5lesson.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; lower_bound = guess ValueError: invalid literal for int() with base 10: &#39;&#39; . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first . this is found by taking the highest index number plus the lowest index number and divide by 2 . | the numbers on the right will be greater and the numbers on the left will be smaller . | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers . lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89: 19 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22: 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2015/2022/12/02/group5lesson.html",
            "relUrl": "/week%2015/2022/12/02/group5lesson.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "LESSON PLAN",
            "content": "Lesson 3.5 Finn/Jake . What is a Boolean . The defention of a Boolean is a denoting a system of algebraic notation used to represent logical propositions, especially in computing and electronics. | A boolean expresions are either true or false. | Testing if two numbers or variables are equal is a common example. | For example: The sky is blue = True | What do we use to represent them? (Hint think of how domain/range of graph is answered) &lt;- variables | How is binary related to this? &lt;- 0=false and 1=true | How could this be used when asked a question? | . Examples (Not part of homework) . Type the code down below for these two example . Try to make a statement that determines if a variable &quot;score&quot; is equal to the number 3 | Try to make this score variable have an output if it equals 3 | . # The code for ex:1 score = 3 i = score if i == 3: print(&quot;True&quot;) else: print(&quot;False&quot;) # The code for ex:2 . True . Relational Operators . The mathmatical relationship between two variables | Determines an output on whether or not the statement is true | a=b, a&gt;b, etc. | . Examples (Not part of homework) . Type the code down below for these two example . You have to be the age of 16 or older to drive | Each rollercoaster cart holds 4 for people per cart | . # Put the code for ex:1 i = &quot;age&quot; if i &gt;= str(16): print(&quot;can drive&quot;) else: print(&quot;cannot drive&quot;) # Put the code for ex:2 i = &quot;number of people&quot; numcarts = i/4 cannotride = 16 % i . Logical Operators . NOT . NOT, it displays the opposite of whatever the data is. Mainly used for true/false, and does not effect the variable. | . isRaining = False result = not(isRaining) print(result) . True . AND . AND, used to evaulte two conditions together and determine if both condintions are met | . grade = 95 if grade &gt; 70 and grade &lt;= 100: print(&quot;You passed the quiz&quot;) . You passed the quiz . OR . OR, when using or the function only looks to see if one of the conditions is met then will | . lives = 1 score = 21 if lives &lt;= 0 or score &gt; 20: print(&quot;end game&quot;) . end game . Hacks . Explain in your own words what each logical operator does | Code your own scenario that makes sense for each logical operator | . Lesson 3.6 Paaras/Shruthi . Learning Objectives (Some Things You Might Want to Keep Note Of) . Conditionals allow for the expression of algorithms that utilize selection without a programming language. | Writing conditional statements is key to computer science. | Determine the result of conditional statements | . Key Terms . Selection: The specific block of code that will execute depending on the algorithm condition returning true or false. | Algorithm: &quot;A finite set of instructions that accomplish a specific task.&quot; | Conditional Statement / If-Statement: A statement that affects the sequence of control by executing certain statements depending on the value of a boolean. | . function isEven(parameter) { if (parameter % 2 == 0) { console.log(&quot;The number is even.&quot;); } else if (parameter % 2 != 0) { console.log(&quot;The number is odd.&quot;) } } isEven(4) . A computer science student such as yourself will see conditional statements in JavaScript a lot. Below is an example of one in action: . if (30 == 7) { console.log(&quot;The condition is true&quot;) } . That is one conditional statement, but this algorithm is too simple to have anything done with it. Below is an algorithm building on the previous algorithm: . if (30 == 7) { console.log(&quot;The condition is true&quot;) } else if (30 != 7) { console.log(&quot;The condition is false&quot;) } . Input In [6] if (30 == 7) { ^ SyntaxError: invalid syntax . Conditional statements can be used for many a purpose. The algorithm above was quite simple, but conditionals can be found in more complex algorithms. . Essential Knowledge . Conditional statements (&quot;if&quot; statements) affect the sequential flow of control by executing different statements based on the value of a Boolean expression. The exam reference sheet provides: . In which the code in block of statements is executed if the Boolean expression condition evaluates to true; no action is taken if condition evaluates to false . # also needs to iterate through to check every character (what if there are multiple of each vowel?) word=input(&quot;Input a word to check how many vowels it has. &quot;) i == 0 #number of vowels if word.__contains__(&quot;a&quot;): i =+ 1 if word.__contains__(&quot;e&quot;): i =+ 1 if word.__contains__(&quot;i&quot;): i =+ 1 if word.__contains__(&quot;o&quot;): i =+ 1 if word.__contains__(&quot;u&quot;): i =+ 1 if i == 0: print(&quot;this word has no vowels&quot;) else: print(i) . NameError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 24 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # my first attempt at the Level 1 Challenge &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; word=input(&#34;Input a word to check how many vowels it has. &#34;) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; i == 0 #number of vowels &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; if word.__contains__(&#34;a&#34;): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; i =+ 1 NameError: name &#39;i&#39; is not defined . input_string = input(&quot;Input a string to check how many vowels it has. &quot;) vowelcount = 0 for character in input_string: #iterates through the string character by character if character == &quot;a&quot;: vowelcount += 1 elif character == &quot;e&quot;: vowelcount += 1 elif character == &quot;i&quot;: vowelcount += 1 elif character == &quot;o&quot;: vowelcount += 1 elif character == &quot;u&quot;: vowelcount += 1 print(vowelcount) . 4 . numberstring = input(&quot;Input a number to find the sum of all the multiples of 3 or 5 below it. &quot;) numbertocheck = int(numberstring) totalmultiples = 0 if numbertocheck &gt;= 0: # if the number is negative it will display the sum as 0 for n in range(numbertocheck+1): if n/3 == int(n/3): #checks for multiples of 3 print(str(n) + &quot; is a multiple of 3&quot;) totalmultiples += n #elif prevents duplicates of numbers with both multiples of 3 and 5 elif n/5 == int(n/5): # checks for multiples of 5 print(str(n) + &quot; is a multiple of 5&quot;) totalmultiples += n print(totalmultiples) . 0 is a multiple of 3 3 is a multiple of 3 5 is a multiple of 5 6 is a multiple of 3 9 is a multiple of 3 10 is a multiple of 5 12 is a multiple of 3 15 is a multiple of 3 60 . def average(lst): return sum(lst)/len(lst) gradelist = [92, 83, 90, 74, 86, 97] averagegrade = average(gradelist) print(str(averagegrade) + &quot; is the student&#39;s grade average&quot;) if averagegrade &gt;= 75: print(&quot;student is eligible for credit&quot;) else: print(&quot;student needs to retake tests during break&quot;) . 87.0 is the student&#39;s grade average student is eligible for credit . num1 = input(&quot;What is your first number?&quot;) num2 = input(&quot;What is your second number?&quot;) sumofnumbers = int(num1) + int(num2) if sumofnumbers &gt;= 100: print(str(sumofnumbers) + &quot; is greater than or equal to 100&quot;) else: print(str(sumofnumbers) + &quot; is less than than 100&quot;) . 202 is greater than or equal to 100 . # to test if a show is included in Netflix, and if it is recommended showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is reccomended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is reccomended . STEM = input(&quot;Are you intrested in STEM? Y or N&quot;) if STEM == &quot;Y&quot;: subject = input(&quot;Do you like math or science better?&quot;) if subject == &quot;math&quot;: print(&quot;Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics&quot;) if subject == &quot;science&quot;: print(&quot;Class recommendations: Chemistry, Physics, AP Enviornmental Science, AP Physics, AP Chemistry&quot;) else: language = input(&quot;Are you intrested in language? Y or N&quot;) if language == &quot;Y&quot;: lansubject = input(&quot;Do you prefer a foreign language or English?&quot;) if lansubject == &quot;foreign language&quot;: print(&quot;Class recommendations: Spanish, Mandarin, AP Spanish, AP Mandarin&quot;) if lansubject == &quot;English&quot;: print(&quot;Class recommendations: American Literature, AP English Literature&quot;) if language == &quot;N&quot;: print(&quot;See class list for more options!&quot;) . Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics . Hacks . For the first hack, pretend you are a school&#39;s test grader. Create an array with integers, each integer representing one score from a student&#39;s taken tests. If the average of the student&#39;s test scores are at least 75 percent, then display that the student is elligible for credit, and if not, display that the student must retake the tests over break. | The second hack is more number-oriented. Create an algorithm that calculates the sum of two numbers, then determines whether the sum is greater than or less than 100. | The hacks above was heavily derived from CollegeBoard. As a computer science student, you should be able to create an algorithm utilizing conditionals. Try something number-oriented if you get stuck. Creativity gets points. | . Lesson 3.7 James . Nested Conditionals . Nested conditional statements consist of conditional statements within conditional statements | they&#39;re nested one inside the other | An else if inside of another else if | Can be used for a varying amount of &quot;else if statements.&quot; The first if statement can represent if two coditions are true. The first else if can represent if only one or the other is true. The last else if represents if neither of the conditions are true. | . Take aways . Learn how to determine the result of nested condtional statements | Nested conditional statements consist of conditional statements within conditional statements | One condition leads to check in a second condition | . Writing Nested Conditional Statements . Can be planned and writen out first | Flow chart is a possibility. Ask a question. If the statement is false end the flowchart with one result. If it is true then repeat the process once more. | If (condition 1) | { first block of statements | . | } | else | { IF (condition 2) | { second block of statements | . | } | . | } | . this statement is false make a new result. Finally if the statement is true make a final result . Question 1 . Look at the following code . what happens when x is 5 and y becomes 4? Is the output same or change? | . x = 2 y = 3 if x == y: print(&quot;x and y are equal&quot;) else: if x &gt; y: print(&quot;x is bigger than y&quot;) elif x &lt; y: print(&quot;x is smaller than y&quot;) . Question 2 . How much it will be cost when the height will be 60, age is 17, and photo taken? | when this person came after 1 year how much it will be cost? | . height = int(input(&quot;Welcom to the rollercoaster! nWhat is your height in Inch? &quot;)) age = int(input(&quot;What is your age?&quot;)) if height &lt; 48 : print(&quot;Can&#39;t ride&quot;) elif age &lt; 12 : photo = input(&quot;Adult tickets are $5 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $8.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $5.&quot;) elif age &lt; 18: photo = input(&quot;Adult tickets are $7 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $10.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $7.&quot;) else : photo = input(&quot;Adult tickets are $12 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $15.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $12.&quot;) . The total bill is $10. . Let&#39;s look at Examples . import random global i game = [&quot;rock&quot;, &quot;scissor&quot;, &quot;paper&quot;] winning = [&quot;paper&quot;, &quot;rock&quot;, &quot;scissor&quot;] i = 0 def gameStart(): randomNumber = random.randrange(0,2) randomOne = game[randomNumber] gamer = str(input(&quot;what will you do&quot;)) print(gamer) print(randomOne) while True: if winning[i] == gamer: break else: i += 1 if randomNumber == i: print(&quot;You win&quot;) else: if randomNumber == (i+1)%3: print(&quot;Lose&quot;) elif randomNumber == (i+2)%3: print(&quot;Draw&quot;) pre = input(&quot;Do you want a game?[yes/no]&quot;) if pre == &quot;yes&quot;: gameStart() randomNumber = random.randrange(0,2) else: print(&quot;Goodbye&quot;) gameStart() . rock scissor . UnboundLocalError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 33 in &lt;cell line: 30&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; print(&#34;Goodbye&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; gameStart() /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 33 in gameStart() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; print(randomOne) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; while True: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; if winning[i] == gamer: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; break &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; else: UnboundLocalError: local variable &#39;i&#39; referenced before assignment . . Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . | | | | | | | | . | | | | | | | | . | | | | | | | | . Hacks . Create 3 differnt flow charts representing nested statements and transfer them into code. | Create a piece of code that displays four statements instead of three. Try to do more if you can. | Make piece of code that gives three different recommandations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. | . Kahoot quiz . kahoot . After finishing this quiz, please take a screenshot of how much you got correct | . Rubric for hacks: . Each section is worth .33 and you will get + 0.01 if all are completed to have full points. | . How to get a .33 . All hacks are done for the section, fully completed. | . How to get a .30 . Not all hacks are done in the section | . Below a .30 . Sections are missing/incomplete | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/lesson/group3",
            "relUrl": "/lesson/group3",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Simulations- Unit 3 Section 16 Lesson",
            "content": "3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . leads into real life game example: . . . A Real Life Example: Four Corners - Lydia &amp; Ava . an example of a simulation and experiment = the game of 4 corners | games are simulations! | We are going to play a round of 4 corners here in class. This game is a real life version of our simulation. | Mr. Mortensen will be the person in the middle choosing corners. | Everyone will choose a corner, and if your corner is chosen, you are out! | . | . The rules of the game: . a person stands in the center of a room and the 4 coners are labeled 1-4 | Every player chooses a corner while the person in the middle closes their eyes | person in the middle chooses/calls out a number when instructed | every player in the chosen corner is now out | contine until there is a winner! | Let&#39;s play! . Below is the simulation of the four corners game! . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . You chose corner number 2 and are still in! You chose corner number 3 and are still in! You chose corner number 4 and you&#39;re OUT . Comparing Experiment to Simulation Code: . Mr. Mortensen (person in the middle) = random.randint | if statement = if player is out | else = safe/continue | while loop = repeats process until there is a winner of the game | . DEBRIEF QUESTIONS: . Why is it better to code simulations than experiement in real life? | What makes this game a simulation? | What are its advantages and disadvantages? | Would an experiment be better in this situation? (raise hands for each team) | . . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (collegeboard based questions) . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . . . Rolling a Dice Example - Sri . Below is a simulation of rolling dice! Examine the code and think about how this simulation works and its purpose! . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 1, 2] . . . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . . Remix of Game of Life . start step . . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . . . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "LESSON PLAN",
            "content": "Lesson 3.5 Finn/Jake . What is a Boolean . The defention of a Boolean is a denoting a system of algebraic notation used to represent logical propositions, especially in computing and electronics. | A boolean expresions are either true or false. | Testing if two numbers or variables are equal is a common example. | For example: The sky is blue = True | What do we use to represent them? (Hint think of how domain/range of graph is answered) &lt;- variables | How is binary related to this? &lt;- 0=false and 1=true | How could this be used when asked a question? | . Examples (Not part of homework) . Type the code down below for these two example . Try to make a statement that determines if a variable &quot;score&quot; is equal to the number 3 | Try to make this score variable have an output if it equals 3 | . # The code for ex:1 i = score if i = 3: print(&quot;True&quot;)_ else: print(False&quot;) # The code for ex:2 . Relational Operators . The mathmatical relationship between two variables | Determines an output on whether or not the statement is true | a=b, a&gt;b, etc. | . Examples (Not part of homework) . Type the code down below for these two example . You have to be the age of 16 or older to drive | Each rollercoaster cart holds 4 for people per cart | . # Put the code for ex:1 i = &quot;age&quot; if i &gt;= 16: print(&quot;can drive&quot;) else: print(&quot;cannot drive&quot;) # Put the code for ex:2 i = &quot;numer of people&quot; numcarts = i/4 cannotride = 16 % i . Logical Operators . NOT . NOT, it displays the opposite of whatever the data is. Mainly used for true/false, and does not effect the variable. | . isRaining = False result = not(isRaining) print(result) . True . AND . AND, used to evaulte two conditions together and determine if both condintions are met | . grade = 95 if grade &gt; 70 and grade &lt;= 100: print(&quot;You passed the quiz&quot;) . You passed the quiz . OR . OR, when using or the function only looks to see if one of the conditions is met then will | . lives = 1 score = 21 if lives &lt;= 0 or score &gt; 20: print(&quot;end game&quot;) . end game . Hacks . Explain in your own words what each logical operator does | Code your own scenario that makes sense for each logical operator | . Lesson 3.6 Paaras/Shruthi . Learning Objectives (Some Things You Might Want to Keep Note Of) . Conditionals allow for the expression of algorithms that utilize selection without a programming language. | Writing conditional statements is key to computer science. | Determine the result of conditional statements | . Key Terms . Selection: The specific block of code that will execute depending on the algorithm condition returning true or false. | Algorithm: &quot;A finite set of instructions that accomplish a specific task.&quot; | Conditional Statement / If-Statement: A statement that affects the sequence of control by executing certain statements depending on the value of a boolean. | . function isEven(parameter) { if (parameter % 2 == 0) { console.log(&quot;The number is even.&quot;); } else if (parameter % 2 != 0) { console.log(&quot;The number is odd.&quot;) } } isEven(4) . Input In [5] function isEven(parameter) { ^ SyntaxError: invalid syntax . A computer science student such as yourself will see conditional statements in JavaScript a lot. Below is an example of one in action: . if (30 == 7) { console.log(&quot;The condition is true&quot;) } . That is one conditional statement, but this algorithm is too simple to have anything done with it. Below is an algorithm building on the previous algorithm: . if (30 == 7) { console.log(&quot;The condition is true&quot;) } else if (30 != 7) { console.log(&quot;The condition is false&quot;) } . Input In [6] if (30 == 7) { ^ SyntaxError: invalid syntax . Conditional statements can be used for many a purpose. The algorithm above was quite simple, but conditionals can be found in more complex algorithms. . Essential Knowledge . Conditional statements (&quot;if&quot; statements) affect the sequential flow of control by executing different statements based on the value of a Boolean expression. The exam reference sheet provides: . In which the code in block of statements is executed if the Boolean expression condition evaluates to true; no action is taken if condition evaluates to false . # also needs to iterate through to check every character (what if there are multiple of each vowel?) word=input(&quot;Input a word to check how many vowels it has. &quot;) i == 0 #number of vowels if word.__contains__(&quot;a&quot;): i =+ 1 if word.__contains__(&quot;e&quot;): i =+ 1 if word.__contains__(&quot;i&quot;): i =+ 1 if word.__contains__(&quot;o&quot;): i =+ 1 if word.__contains__(&quot;u&quot;): i =+ 1 if i == 0: print(&quot;this word has no vowels&quot;) else: print(i) . NameError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 24 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # my first attempt at the Level 1 Challenge &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; word=input(&#34;Input a word to check how many vowels it has. &#34;) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; i == 0 #number of vowels &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; if word.__contains__(&#34;a&#34;): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X32sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; i =+ 1 NameError: name &#39;i&#39; is not defined . input_string = input(&quot;Input a string to check how many vowels it has. &quot;) vowelcount = 0 for character in input_string: #iterates through the string character by character if character == &quot;a&quot;: vowelcount += 1 elif character == &quot;e&quot;: vowelcount += 1 elif character == &quot;i&quot;: vowelcount += 1 elif character == &quot;o&quot;: vowelcount += 1 elif character == &quot;u&quot;: vowelcount += 1 print(vowelcount) . 4 . numberstring = input(&quot;Input a number to find the sum of all the multiples of 3 or 5 below it. &quot;) numbertocheck = int(numberstring) totalmultiples = 0 if numbertocheck &gt;= 0: # if the number is negative it will display the sum as 0 for n in range(numbertocheck+1): if n/3 == int(n/3): #checks for multiples of 3 print(str(n) + &quot; is a multiple of 3&quot;) totalmultiples += n #elif prevents duplicates of numbers with both multiples of 3 and 5 elif n/5 == int(n/5): # checks for multiples of 5 print(str(n) + &quot; is a multiple of 5&quot;) totalmultiples += n print(totalmultiples) . 0 is a multiple of 3 3 is a multiple of 3 5 is a multiple of 5 6 is a multiple of 3 9 is a multiple of 3 10 is a multiple of 5 12 is a multiple of 3 15 is a multiple of 3 60 . def average(lst): return sum(lst)/len(lst) gradelist = [92, 83, 90, 74, 86, 97] averagegrade = average(gradelist) print(str(averagegrade) + &quot; is the student&#39;s grade average&quot;) if averagegrade &gt;= 75: print(&quot;student is eligible for credit&quot;) else: print(&quot;student needs to retake tests during break&quot;) . 87.0 is the student&#39;s grade average student is eligible for credit . num1 = input(&quot;What is your first number?&quot;) num2 = input(&quot;What is your second number?&quot;) sumofnumbers = int(num1) + int(num2) if sumofnumbers &gt;= 100: print(str(sumofnumbers) + &quot; is greater than or equal to 100&quot;) else: print(str(sumofnumbers) + &quot; is less than than 100&quot;) . 202 is greater than or equal to 100 . # to test if a show is included in Netflix, and if it is recommended showdictionary = { &#39;Wednesday&#39;:5, # key=title name and value=rating out of 5 stars &#39;You&#39;:3, &#39;Knight Before Christmas&#39;:4, &#39;Red Notice&#39;:5, &#39;Truth or Dare&#39;:1 } show = input(&quot;What show are you looking for?&quot;) if show in showdictionary.keys(): print(show + &quot; is available on Netflix&quot;) if showdictionary[show] &gt;= 3: print(&quot;show/movie is reccomended&quot;) else: print(&quot;show is not recommended&quot;) else: print(show + &quot; is not available on Netflix&quot;) . You is available on Netflix show/movie is reccomended . STEM = input(&quot;Are you intrested in STEM? Y or N&quot;) if STEM == &quot;Y&quot;: subject = input(&quot;Do you like math or science better?&quot;) if subject == &quot;math&quot;: print(&quot;Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics&quot;) if subject == &quot;science&quot;: print(&quot;Class recommendations: Chemistry, Physics, AP Enviornmental Science, AP Physics, AP Chemistry&quot;) else: language = input(&quot;Are you intrested in language? Y or N&quot;) if language == &quot;Y&quot;: lansubject = input(&quot;Do you prefer a foreign language or English?&quot;) if lansubject == &quot;foreign language&quot;: print(&quot;Class recommendations: Spanish, Mandarin, AP Spanish, AP Mandarin&quot;) if lansubject == &quot;English&quot;: print(&quot;Class recommendations: American Literature, AP English Literature&quot;) if language == &quot;N&quot;: print(&quot;See class list for more options!&quot;) . Advanced Function Analysis, AP Calculus AB, AP Calculus BC, AP Statistics . Hacks . For the first hack, pretend you are a school&#39;s test grader. Create an array with integers, each integer representing one score from a student&#39;s taken tests. If the average of the student&#39;s test scores are at least 75 percent, then display that the student is elligible for credit, and if not, display that the student must retake the tests over break. | The second hack is more number-oriented. Create an algorithm that calculates the sum of two numbers, then determines whether the sum is greater than or less than 100. | The hacks above was heavily derived from CollegeBoard. As a computer science student, you should be able to create an algorithm utilizing conditionals. Try something number-oriented if you get stuck. Creativity gets points. | . Lesson 3.7 James . Nested Conditionals . Nested conditional statements consist of conditional statements within conditional statements | they&#39;re nested one inside the other | An else if inside of another else if | Can be used for a varying amount of &quot;else if statements.&quot; The first if statement can represent if two coditions are true. The first else if can represent if only one or the other is true. The last else if represents if neither of the conditions are true. | . Take aways . Learn how to determine the result of nested condtional statements | Nested conditional statements consist of conditional statements within conditional statements | One condition leads to check in a second condition | . Writing Nested Conditional Statements . Can be planned and writen out first | Flow chart is a possibility. Ask a question. If the statement is false end the flowchart with one result. If it is true then repeat the process once more. | If (condition 1) | { first block of statements | . | } | else | { IF (condition 2) | { second block of statements | . | } | . | } | . this statement is false make a new result. Finally if the statement is true make a final result . Question 1 . Look at the following code . what happens when x is 5 and y becomes 4? Is the output same or change? | . x = 2 y = 3 if x == y: print(&quot;x and y are equal&quot;) else: if x &gt; y: print(&quot;x is bigger than y&quot;) elif x &lt; y: print(&quot;x is smaller than y&quot;) . Question 2 . How much it will be cost when the height will be 60, age is 17, and photo taken? | when this person came after 1 year how much it will be cost? | . height = int(input(&quot;Welcom to the rollercoaster! nWhat is your height in Inch? &quot;)) age = int(input(&quot;What is your age?&quot;)) if height &lt; 48 : print(&quot;Can&#39;t ride&quot;) elif age &lt; 12 : photo = input(&quot;Adult tickets are $5 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $8.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $5.&quot;) elif age &lt; 18: photo = input(&quot;Adult tickets are $7 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $10.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $7.&quot;) else : photo = input(&quot;Adult tickets are $12 nDo you want a photo taken? Y or N. &quot;) if photo==&quot;Y&quot;: print(&quot;The total bill is $15.&quot;) if photo==&quot;N&quot;: print(&quot;The total bill is $12.&quot;) . The total bill is $10. . Let&#39;s look at Examples . import random global i game = [&quot;rock&quot;, &quot;scissor&quot;, &quot;paper&quot;] winning = [&quot;paper&quot;, &quot;rock&quot;, &quot;scissor&quot;] i = 0 def gameStart(): randomNumber = random.randrange(0,2) randomOne = game[randomNumber] gamer = str(input(&quot;what will you do&quot;)) print(gamer) print(randomOne) while True: if winning[i] == gamer: break else: i += 1 if randomNumber == i: print(&quot;You win&quot;) else: if randomNumber == (i+1)%3: print(&quot;Lose&quot;) elif randomNumber == (i+2)%3: print(&quot;Draw&quot;) pre = input(&quot;Do you want a game?[yes/no]&quot;) if pre == &quot;yes&quot;: gameStart() randomNumber = random.randrange(0,2) else: print(&quot;Goodbye&quot;) gameStart() . rock scissor . UnboundLocalError Traceback (most recent call last) /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 33 in &lt;cell line: 30&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; print(&#34;Goodbye&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; gameStart() /home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb Cell 33 in gameStart() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; print(randomOne) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; while True: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; if winning[i] == gamer: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; break &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/alexac54767/vscode/Alexa-Fastpage/_notebooks/2022-11-30-LESSONPLAN.ipynb#X44sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; else: UnboundLocalError: local variable &#39;i&#39; referenced before assignment . . Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . +1 | 00000000 | 0 | 0 | 0 | -1 | . | | | | | | | | . | | | | | | | | . | | | | | | | | . Hacks . Create 3 differnt flow charts representing nested statements and transfer them into code. | Create a piece of code that displays four statements instead of three. Try to do more if you can. | Make piece of code that gives three different recommandations for possible classes to take at a scholl based on two different condtions. These conditions could be if the student likes STEM or not. | . Kahoot quiz . kahoot . After finishing this quiz, please take a screenshot of how much you got correct | . Rubric for hacks: . Each section is worth .33 and you will get + 0.01 if all are completed to have full points. | . How to get a .33 . All hacks are done for the section, fully completed. | . How to get a .30 . Not all hacks are done in the section | . Below a .30 . Sections are missing/incomplete | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/lesson/group3",
            "relUrl": "/lesson/group3",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Week 1 Student Lessons",
            "content": "3.1-3.2 . 3.1.1 Data Types and Variables . variable: abstraction inside a program that holds a value (each variable has associated data storage that represents a single value at a time) | typically have meaningful names that helps with the overall organization/understanding of the code | different programming languages provide a variety of methods to represent data (variables, Booleans, numbers, lists, strings) | one form of a value is better suited for representation than antoher | Data Types integer (numbers) | string (or text/letters) | boolean (True/False statements) | . | . age = &quot;25&quot; name = &quot;Timmy&quot; print(name + &quot; is &quot; + age) . Timmy is 25 . car = &quot;Tesla&quot; #example of a string yearmake = &quot;2020&quot; ownerage = 16 #example of an integer haslicense = True #example of a Boolean print(&quot;My car is a &quot; + car + &quot; made in &quot; + yearmake) print(&quot;age: &quot; + str(ownerage)) if haslicense == True: print(&quot;can drive&quot;) else: print(&quot;cannot drive&quot;) . My car is a Tesla made in 2020 age: 16 can drive . 3.1.2 Variables . An assignment operator asigns the value on the right of it (in this case =) to the variable on the left. | Collegeboard pseudocode uses the arrow, &lt;--, to assign values to variables. | Python uses the = as an assignment operator | to assign a variable you need 3 parts: variable name | assignment operator | variable value | | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, the command would display 22, since it has been updated and assigned the new value. | . 3.2.1 List and Strings Using Variables . string: a series of characters (numbers, letters, etc) | list: sequences of elements with each element being a variable website with some other cool methods you can do with lists | . | An element a smaller part in a bigger system, such as an item in a list. | An easy way to reference the elements in a list/string is to index it (the 3rd element, 2nd element, etc). | example of a string: &quot;cookie monster&quot; | . todolist = [&quot;finish hacks&quot;, &quot;math hw&quot;, &quot;chores&quot;] print(todolist[2]) # indexing from begining print(todolist[-3]) # indexing from the end . chores finish hacks . 3.2.2 Data Abstraction with Lists . Lists bundle together multiple elements and/or variables under one name are not defined with specified lengths. | The variables that are stored in a list do not have to be limited to one kind of variable. | The user does not need to know how the list stores data (this gives way for data abstraction). | . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # Here I defined numlist so that it could be used in the abstraction later # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . [2, 3, 4] . 3.2.3 Managing Complexity with lists . assinging values to one variable: use square brackets &quot;[]&quot; to store the values of a certain variable, then you can print the variable to output your desired list (more efficient and less complex) | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, alexac54767 running /bin/python3 You will be asked 4 questions. Question: Are you ready to take a test? Question: The purpose of lists and dictionaries are to manage the ____ of a program complexity is correct! Question: Lists are a form of data ______ abstraction is correct! Question: Which brackets are used to assign values to a variable to make a list? [] is correct! alexac54767 you scored 3/4 . food1 = &quot;pizza&quot; food2 = &quot;hot dog&quot; food3 = &quot;sushi&quot; food4 = &quot;strawberry&quot; food5 = &quot;sandwich&quot; print(food1, food2, food3, food4, food5) food = [food1, food2, food3, food4, food5] #this is simplifying it (making food a list and then only need one word to print it) print(food) . pizza hot dog sushi strawberry sandwich [&#39;pizza&#39;, &#39;hot dog&#39;, &#39;sushi&#39;, &#39;strawberry&#39;, &#39;sandwich&#39;] . name1 = &quot;Alexa&quot; name2 = &quot;Ava&quot; name3 = &quot;Lydia&quot; name4 = &quot;Sri&quot; print(name1, name1, name3, name4) # managing complexity names = [name1, name2, name3, name4] print(names) . Alexa Alexa Lydia Sri [&#39;Alexa&#39;, &#39;Ava&#39;, &#39;Lydia&#39;, &#39;Sri&#39;] . 3.3-3.4 . 3.3.1 algorithm that uses sequencing without using programming language . algorithms: a finite set of instruction that accomplish a task (it can be expressed by natural language, diagrams, + more) | 3 parts to an algorithm: sequencing, selection, and iteration. | every algorithm can be created by a mixture of sequencing, selection, and iteration . sequence: the order of how to do something to achieve a result | selection: allows an algorithm to make a decision based on if a condition is met | iteration: a loop and doing something again until a condition is met | . | . Describe the given algorithm . sequencing: The sequencing in this algorithm provided is how it has the steps (1-5) that must be performed in order. To go onto step 2, you miust do step 1 first. | . | Selection: Selection is used in this algorithm when it decides what to do when it evaluates if the numer equals the item. If it does, it must decide to display &quot;item foud&quot;. However, if it doesn&#39;t, then the algorithm decides to display &quot;item not found&quot;. | . | Iteration: Iteration is used in this algorithm when it must cycle through the list, checking if the condition is met. Once it has gone through all of the number, it returns to step 2 to repeat. | . | . 3.3.2 Mathematical Expressions . Question: How do we represent a step-by-step algorithmic process using sequential code statements? . | Sequential statements are used in processes to specify how signals are assigned . | the process is executed in order as a whole | after all the sequential statements in the process are executed the signals are assigned new values. | execute in the order in which they appear in the process (sequencing) | numerical values can be within variables | variable values can be inside other variables | . 3.3.3 Evaluate expression using arithmetic operator . arithmetic operator: language that use addition, subtraction, multiplication, division, and modulus operators | order of arithmetic operation = same with mathematic operation(PEMDAS but Subtraction first) addition: a+b | subtraction: a-b | multiplication: a*b | division: a/b | modulus: a MOD b syntax of MOD is % | divides given numerator by denominator and result = remainder for the division | ex: 10 % 3 = 1 | . | website that goes over different operations and syntax | . | . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . 3.0 . crossword puzzle hack . 1 down - Iteration (creates a loop in the algorithm) | 2 down - Selection (allows an algorithm to create a decision) | 3 across - Sequence (an order of events) | . 3.4 Evaluate expression that manipulates strings . string concatenation: joins two or more strings end-to-end to make a new string | substring: part of an existing string substring (str1, str2, length): returns a substring of consecutive character from str1, starting the character at position &#39;start&#39; and containing &#39;length&#39; character | ^ Website that explains this | . | strings: ordered sequences of characters substring (str1, str2, length): returns a substring of consecutive character from str1, starting the character at position &#39;start&#39; and containing &#39;length&#39; character | . | . len(&quot;Hi Mr. Mortensen&quot;) . 16 . string1 = &quot;Hi &quot; string2 = &quot;Mr.Mortensen&quot; print(string1 + string2) . Hi Mr.Mortensen . string = &quot;Hi Mr. Mortensen&quot; print(string[3:5]) . Mr . string1 = &quot;degree&quot; string2 = &quot; passenger&quot; FinalString = string1 + string2 print(FinalString[2:9]) print(len(FinalString)) print(len(FinalString[2:9])) . gree pa 16 7 . How this helps me . These topics are very common in everyday code and in collegeboard. They wil appear on the AP test, either for me to interpret for for me to correct or write. This lesson has helped me to: . recognize when a variable is assigned | recognize when other data types (such as a boolean, integer, string) are present | understand what each data type does and which is best for a situation &lt; showed up on the collegebaord MC | how to assign a variable | how to create/interpret a list . | Data Abstraction . I rememebr first seeing data abstraciton on the college board requirements and not understanding what it meant. I feel that this lesson has helped me to understand and hopefully implement Data Abstraction in my future projects (including AP test.) | . | Managing Complexity . I used to approach code the very inefficient way, where you type everything out multiple times and take forever to accomplish something. Now, I recognize ways to shorten the preocess, and make it easier to keep track of the algorithm. This lesson has helped me to recognize those opportunities. | . | Sequencing, Selection, and Iteration . To be completely honest, I had no idea how to approach algorithms and try to describe them with these words before this lesson. That was pretty bad, especially since I need to create a project that implements all of these aspects for the AP test. Now, I can more confidently describe each of these words and how an algorithm uses them, which will be extremely helpful for the AP test. | . | Mathematical Expressions . I remember struggling with the mathematical expressions on our collegebaord MC. I had to research what MOD did. Despite understanding enough to answer the questions, I still didn&#39;t have a solid understanding. After this lesson, I feel more more confident in the operator and what it does. I think I will remember it much better now as well, which will really come in handy when it shows up on the AP test third trimester. | . | Evaluating Expression that Minipulates Strings . One thing that definintely confused me on the collegeboard MC was manipulating strings. There was a specific question asking how you could result in a certian string, by using these munipulations on two previous strings. After researching, I understood what concat did, and how I could use it. However, my skills and understanding were still very shaky. Now, I feel more confident in my ability to both recognize when these manipulations are used, and to be able to write them. Once again, this will be extremely helpful on the AP exam. | . | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/studentlessons/weekone",
            "relUrl": "/studentlessons/weekone",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "3.3 and 3.4 Student Lesson (group 2)",
            "content": "Hack 1 . sequencing: The sequencing in this algorithm provided is how it has the steps (1-5) that must be performed in order. To go onto step 2, you miust do step 1 first. | . | Selection: Selection is used in this algorithm when it decides what to do when it evaluates if the numer equals the item. If it does, it must decide to display “item foud”. However, if it doesn’t, then the algorithm decides to display “item not found”. | . | Iteration: Iteration is used in this algorithm when it must cycle through the list, checking if the condition is met. Once it has gone through all of the number, it returns to step 2 to repeat. | . | . Hack 2 . . 1 down - Iteration | 2 down - Selection | 3 across - Sequence | . Hack 3 . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/grouptwo",
            "relUrl": "/students/grouptwo",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "3.1 and 3.2 Student Lesson (group 1)",
            "content": "Hacks . . Answer these: . In your own words, briefly explain by writing down what an assignment operator is An assignment operator asigns the value on the right of it (in this case =) to the variable on the left. | . | In Collegeboard pseudocode, what symbol is used to assign values to variables? Collegeboard pseudocode uses the arrow, &lt;–, to assign values to variables. | . | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? The command would display 22, since it has been updated and assigned the new value. | . | . . What is a list? A list is finite series of ordered values. | . | What is an element An element a smaller part in a bigger system, such as an item in a list. | . | What is an easy way to reference the elements in a list or string? An easy way to reference the elements in a list/string is to index it (the 3rd element, 2nd element, etc). | . | What is an example of a string? example of a string: “cookie monster” | . | . . . . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/groupone",
            "relUrl": "/students/groupone",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Student Lessons",
            "content": "Week Team Lesson Topics My Homework Grade . 14 | 1 | 3.1-3.2 Variables, Assignments, and Data Abstractions | Data Types, Variables, Lists, Strings, Data Abstraction, Managing Complexity | Hacks | 1/1 | . 14 | 2 | 3.3-3.4 Mathematical Expressions and Strings | Algorithims, sequence, selection, iteration, mathmatical expressions, MOD, string concatination | Hacks | 0.9/1 | . 14 | 3 | 3.5-3.7 Boolean Expression, Conditionals, Nested Conditionals | Booleans, relational operators, logical operators, conditionals, truth tables, nested conditionals | Hacks | 1/1 | . 15 | 4 | 3.8 and 3.10 Boolean Iteration and Lists | Lists, appending lists, iteration | Hacks | 0.975/1 | . 15 | 5 | 3.9 and 3.11 Developing Algorithms and Binary Search | Algorithims, booleans, binary trees, flowcharts | Hacks | 0.95/1 | . 15 | 6 | 3.12-3.13 Calling and Developing Procedures | Procedures, parameters, managing complexity, modularity, abstraction, function structure | Hacks | 0.85/1 | . 16 | 7 | 3.14-3.15 Libraries and Random Values | Libraries, import random, pip.install | Hacks | 0.9/1 | . 16 | 8 | 3.16 Simulations | Simulations, experiments | Graded Hacks | My group’s lesson grade: 3.8/4 | . 16 | 9 | 3.17-3.18 Algorithm Efficiency and Undecidable Problems | Collaz, unsolvable problems, undecidable problems, algorithim efficiency | Hacks | 0.96/1 | . Week Overall Page . 14 | Teacher Blog Check 1 (live review) | . 15 | Teacher Blog Check 2 (live review) | . 16 | Teacher Blog Check 3 (silent review) | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/students/lessons",
            "relUrl": "/students/lessons",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 2 1 . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Number of iterations . print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) print(&quot;Hailstone numbers: &quot;, list_) . Please enter a number: Number of iterations: 13 Hailstone numbers: [34, 17.0, 52.0, 26.0, 13.0, 40.0, 20.0, 10.0, 5.0, 16.0, 8.0, 4.0, 2.0, 1.0] . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment . Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) | Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) | use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2016/2022/11/28/group9lesson.html",
            "relUrl": "/week%2016/2022/11/28/group9lesson.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statement | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objectives: . Express an algorithm that uses iteration without using a programming language | Define an iteration | The Basics Of Iteration | Examples | LESSON Vocab: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Before we dive deeper, we need to understand that an iteration is a part of an algorithm. And in that iteration is a set of instructions that need to be followed until a certain desired output is met. . Examples . Here is an example using online shopping: . Lets say you are looking for a lost item inside of your house... What steps would you take? . Suppose there are n rooms to search... number the rooms 1-n . | Start by searching in room number 1 . | Search each room thoroughly for you item. . | Change the room number to the next highest number . | Repeat steps 3 and 4 until you have found your lost item. . | Enjoy the lost item. . | WAIT! There is a flaw in the program. . This is where a stopping condition is useful for when the iteration already meets the desired requirement and gets out of the loop. . Programming Examples . i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! . i = 0 while (i &lt; 5): #Try changing the 5 and see what happens! print(&quot;Hello, World!&quot;) i = i + 1 if (i == 4): #Try Changing the 3 and see what happens! break . Hello, World! Hello, World! Hello, World! Hello, World! . These are just a few examples of what you can do with iteration. . Summary: . An Iteration is a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | We can use stopping conditions to stop an iteration if a condition is already met | . Unit 3 Section 3.8.2 . Unit 3 Section 3.8.2 - Parav Salaniwal . Lesson Objectives . Determine the result or side effect of iteration statements | Learn how to use iterations with for loops and while loops | Creating code to learn how to incrementally list numbers | Learn the range function and using variables in code | . Definition: Iteration Statement - cause statements to be executed zero or more times, subject to some loop-termination criteria . The first function we will learn is the range function, which we will use with for loop. As you may be able to guess, this will give us the sum based on the input provided. We always use a variable, such as i, to represent what the range of numbers the output will show. For example, if I wanted to list the numbers from 1-10 using the range function, it would look like this: . for i in range(11): print(i) . 0 1 2 3 4 5 6 7 8 9 10 . Now the first thing you may notice is my input for the range was 11, and you may wonder why is it not 10? This is because when using the range function, the last number, or the ending value, is not included in the output, therefore we would have to add 1 to receive the correct output. Now if we were looking to include a starting value to have it start from 1 and end at 10, the code would look like this: . for i in range(1,11): print(i) . 1 2 3 4 5 6 7 8 9 10 . When using the range with for loop, the you can list much more than just a increment of one, would anyone like to guess how we could include a change in the incremented value? Try making a change in the python code above to change the incremented value. When using the range function: . for i in range(starting value, ending value, incremented value): print(i) . Now with while loops, we can provide a similar output with a variation in the input. Similar to for loops, it requires a variable which is the starting value. . i=1 while i&lt;=10: print(i) i=i+1 . 1 2 3 4 5 6 7 8 9 10 . Based on your knowledge from for loops, which values in the code above are the starting, incrementing, and ending values? . LESSON . . Unit 3 Section 3.8.3 . Unit 3 Section 3.8.3 - Nikhil . Here is some basic code I have created, let&#39;s first look into this one: I created a list of pets, cat, dog, fish, and snake. Then I created a for loop, &quot;for i in pets&quot; and this looks at every element/value in pets, so &quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot; and &quot;snake&quot;. This next if statmenets checks if the element in the list is &quot;fish&quot; and if it is, it breaks the loop. The statement would just print, cat and dog since the loop breaks at fish. . pets = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;snake&quot;] for i in pets: if i == &quot;fish&quot;: break print(i) . cat dog . This while loop checks if number less than 10 is even and if so, it will print out the even numbers. We set a starting value of number = 0, then while the number is less than 10, the percent sign means modulus so meaning if there is a remaninder when we dvide. So if number divided by 2 has no remainder then it will print number. Then after that it will add 1 to the number and repeat the process untill it reaches 10. So let&#39;s check for 0, while 0 is less than ten, then it moves to next statement, since 0 divded by 2 has a remainder of 0 it will print the value of 0. Now it will add 1 to zero. Then it will see that 1 is less than ten, and then check if 1 divided by 2 has a remainder of 0 which it does not, so it skips the print, and goes straight to addding one, so on so forth. . number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . 0 2 4 6 8 . The purpose of this code is to find the sum of all the even numbers between and any number of your choosing. The integer input asks for the minimum and maximum value. The next statement puts a starting sum value set to 0. The for i in range (minimum,maximum+1) looks at every number between those two values, in this case 1 and 100. Then the if i modulus 2 checks if any numbers that are divisible by 2 and the remainder comes to 0. If there is a number that has a remainder of 0 when divided by 2, it adds that number to the sum. Then the last print statement, prints out the final sum of all even numbers between the two numbers of your choosing. . minimum = int(input(&quot;please enter a minimum number you want your range to be&quot;)) maximum = int(input(&quot;please enter a number that you want to be the maximum value&quot;)) sum = 0 for i in range(minimum,maximum+1): if i % 2 == 0: sum += i print(&quot;The sum of all the even numbers between&quot;, minimum, &quot;and&quot;, maximum, &quot;:&quot;, sum) . The sum of all the even numbers between 1 and 3 : 2 . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 3.8.1 . Define an Iteration: loop that continues repeating until condition is met | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | hourshomework = 0 while hourshomework &lt; 8: print(&quot;Too easy&quot;) hourshomework += 1 if hourshomework == 6: break . Too easy Too easy Too easy Too easy Too easy Too easy . Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section 10 - Lists . Lists Recap . append() - adding element to the end of the list . names = [&#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # add element to the end of the list names.append(&#39;luna&#39;) # start with empty list names = [] names.append(&#39;taiyo&#39;) names.append(&#39;ethan&#39;) names.append(&#39;parav&#39;) names.append(&#39;nikhil&#39;) . insert() - adding an element in a specific position . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # adding in a specific position names.insert(0, &#39;taiyo&#39;) names.insert(3, &#39;ethan&#39;) . remove() - remove an item from the list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # deleting by value names.remove(&#39;parav&#39;) # by position del names[-1] . Unit 3.10.1 (Luna Iwazaki) . len() - returns the number of items in a list . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # find length of list num_names = len(names) print(&quot;There are&quot; + str(num_names) + &quot;names.&quot;) . sort() - changes order of list permanently . sorted() - returns a copy of the list which leaves the original copy unchanged . names = [&#39;luna&#39;, &#39;taiyo&#39;, &#39;ethan&#39;, &#39;parav&#39;, &#39;nikhil&#39;] # sort permanently names.sort() # sort permanently in reverse alphabetical order names.sort(reverse=True) # temp. sort print(sorted(names)) print(sorted(names, reverse=True)) # reversing the order of a list names.reverse() . [&#39;ethan&#39;, &#39;luna&#39;, &#39;nikhil&#39;, &#39;parav&#39;, &#39;taiyo&#39;] [&#39;taiyo&#39;, &#39;parav&#39;, &#39;nikhil&#39;, &#39;luna&#39;, &#39;ethan&#39;] . range() - use to work with number efficiently . for number in range(11): print(number) # making list of numbers 1 to 10 # using the list() value can generate a large list of numbers numbers = list(range(1, 10)) . min() - find the least value in list . nums = [10, 30, 40, 60, 70, 60] least = min(nums) print(min(nums)) . 10 . max() - find the highest value in list . nums = [10, 30, 40, 60, 70, 60] highest = max(nums) print(max(nums)) . 70 . sum() - sum of all in list . nums = [10, 30, 40, 60, 70, 60] total = sum(nums) print(sum(nums)) . 270 . Practice Question . Using the information above fill in the missing code . nums = [] nums.#missing code &#39;15&#39; nums.#missing code &#39;43&#39; nums.#missing code &#39;81&#39; nums.#missing code &#39;25&#39; least = #missing code print(#missing code) . AP Exam Reference Sheet . Since CS is taught in different languages the pseudocode represents fundamental programming concepts. . provides basic operations on lists | provides pseudocode for loops | helps you understand code used in questions | students can use this reference sheet in the AP Exam | . APCSP Testing Reference Sheet . If you looked at the reference sheet and seem to not understand some concepts here is a Khan Academy resource which can help you understand specific topics. . Khan Academy Resource . Practice Question . If the list words contain [&#39;song&#39;, &#39;book&#39;, &#39;video&#39;, &#39;book&#39;] what will be the following code output . Finding Values in Lists (Luna Iwazaki) . Part 1 . use the list below | make a variable to hold the minimum and set it to potential minimum value | loop | check each element to see if it is less than the minimum variable | if the element is less than the minimum variable, update the minimum | after all the elements of the list have been checked, display the minimum value | . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] # add code here . Part 2 . use the list from part 1 | find the sum of even numbers in a list | . Unit 3.10.2 (Ethan Tran) . Traversing a list is the process of visiting each element in a list in a sequential order. It can be used to access, search for, and modify elements in the list. | . Traversing Lists . 1) Complete Traversal: All elements in a list are assessed . 2) Partial Traversal: Only a given portion of elements are assessed . 3) Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. . Quick Lists Reference Sheet . A given element of a list can be evaluated using index, [ ] | . 1) Ex. listName[i] 2) Ex. listName[3] . insert( ) allows a value to be inserted into a list at index i | append( ) allows a value to be added at the end of a list | remove( ) allows an element at index i to be deleted from a list | length( ) returns the number of elements currently in a specific list | . deleted images . A loop such as the example above allows a user to access each item within the list . College Board Example Question . deleted images | . . HACKS Unit 3 Section 10 . Find the lowest value in a list (Luna Iwazaki) . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min = 20 for n in nums: if int(n) &lt; int(min): min = n print(min) . 10 . Lists Quiz (Ethan Tran) . Take a screenshot of your score on put it on your review ticket! . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be inserted into a list at index i? index() Correct! What allows an element at index i to be deleted from a list? remove() Correct! What returns the number of elements currently in a specific list? length() Correct! What allows a value to be added at the end of a list? append() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! . . . College Board Reference Sheets . deleted image | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2015/2022/11/28/group4lesson.html",
            "relUrl": "/week%2015/2022/11/28/group4lesson.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Unit 3.1-3.2 Class Jupyter Notebook Period 4",
            "content": "Unit 3, Section 1.1: Data Types and Variables - Ederick . Essential Knowledge (College Board&#39;s Must Knows): . A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time (However, if the value is a collection type such as a list, then the value can contain multiple values). | Variables typically have meaningful names that helps with the overall organization of the code and understanding of what is being represented by the variables | Some programming languages provide a variety of methods to represent data, which are referenced using variables 9Booleans, numbers, lists, and strings) | One form of a value is better suited for representation than antoher. | . What is a Variable? . A variable is an abstraction made inside a program that holds a value. These variables are used in code to refer to more comples values that the variable contains and makes the program code more organized and smoother to run. . Variables can be seen as &quot;containers&quot; and each container has a name that holds what it is supposed to hold. In the following code, we can see that a variable has the value of &quot;Alex.&quot; How can we make the variable appear more organized in the code? . x = &quot;alex&quot; print(x) . Choosing Variables . When choosing variables, it is important to assign the variables name to something that correlates with what the function of the variable is supposed to do. For example, we do not want a variable that is supposed to hold a name be named &quot;age&quot; becaue it can be confusing and mistakes may be more prevalent. . Example: . age = &quot;25&quot; name = &quot;Timmy&quot; print(name + &quot; is &quot; + age) . car = &quot;Tesla&quot; yearmake = &quot;2020&quot; ownerage = 16 haslicense = True print(&quot;My car is a &quot; + car + &quot; made in &quot; + yearmake) print(&quot;age: &quot; + str(ownerage)) if haslicense == True: print(&quot;can drive&quot;) else: print(&quot;cannot drive&quot;) . Notice how age is going to be seen when printing the code. That can lead to confusion | . Data Types . Variables have different data types that store specific kinds of data depending on what is being represented. Some examples are shown below: . integer (numbers) | string (or text/letters) | Boolean (True/False statements) | . These types of data types can be useful when trying to represent a value. For example, you would not want a variable meant to represent someone&#39;s name with an integer. . Questions (College Board&#39;s Essential Knowledge): . What exactly IS a variable? | What is the best data type to represent someone&#39;s dog&#39;s name? | Why is it important to give variables specific names before containing values? | What is the best way to represent someone&#39;s phone number? | Bonus (Not required but important to know): . How can we update a variable&#39;s value | What function is used to recieve a user&#39;s input? | Variables (3.1.2) - Noor . Learning objective for 3.1.2: . Determine the value of a variable as a result of an assignment . done through looking at how we can use the assignment operator | . Note: . Collegeboard uses &lt;-- as the assignment operator . The assignment operator looks different for different types of coding languages A variable will take the most recent value assigned | . How do you even store a value inside a variable? . Let&#39;s use python for our example: . In python, the assignment operator is the equal sign (=) | In order to store a value inside a variable, we must: Give the variable a name | place the assignment operator | input the variable value | . | . highscore = 100 # How do you store a number like 3.72? money = 3.72 # What about storing your username (string)? username = &quot;name&quot; # What if it is raining outside and you want to store that fact (boolean)? is_raining = True # What about a list of groceries? groceries = [&quot;eggs&quot;, &quot;flour&quot;, &quot;bread&quot;, &quot;milk&quot;] . Lets Look at an Example: . x = 10 y = 20 z = 30 x = y z = x # what do you think z will be? print(z) . Let&#39;s get a little more practical here . Imagine that you are making a calendar and have just finished the html code that is needed: . You now want to be able to switch between the months of the year by using the &quot;next&quot; or &quot;prev&quot; buttons you will need to take the html elements and use them to your advantage but how? | . | . | . &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;calendar&quot;&gt; &lt;div class=&quot;month&quot;&gt; &lt;button class=&quot;prev&quot;&gt;Prev&lt;/button&gt; &lt;button class=&quot;next&quot;&gt;Next&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // to make our lives a little easier, we can store the div next and prev into variables // this way we don&#39;t need to type out as much // Note: You CAN just add the event listener to document.querySelector(.next) or prev and get the same desired outcome nextButton = document.querySelector(.next) prevButton = document.querySelector(.prev) // we can go make the buttons functional by adding an addeventlistner to them nextButton.addEventListener(&quot;click&quot;, changemonth) // added in class-not sure if it&#39;s correct &lt;/script&gt; . Recap: . We learned what is a assignment operator | We learned how to use the assignment operator | We learned how to store a value inside a variable using the assignment operator | We experimented with a few examples | . Hacks: . Answer these: . In your own words, briefly explain by writing down what an assignment operator is | In Collegeboard pseudocode, what symbol is used to assign values to variables? | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | . Hacks: . Copy the all the html code into a markdown file and run your local server. You will then see a decimal to binary converter near the html code. The problem is that it is not converting the decimal to binary. This is because the variables are not defined properly and it is your job to use the information learned today to fix the converter. Don&#39;t change the css . Bonus (optional): . There&#39;s more than one way to define the variable. List two ways to do it. . Rubric . For .15: . Student has followed directions properly and has the converter working | . For .18: . Student has completed some of the bonus material alongside requirement for 2.7 | . For .20: . Student has completed all of the material, answered thoughtfully, and met requirements for 2.7 | . List and Strings Using Variables- Nathan . Strings . Strings is a series of characters (numbers, letters, etc), one example of a string is your name or your id because strings can contain both numbers and letters. . The following are all examples of strings being used in code, in this case, within print functions. . print(&quot;hello world&quot;) print(&#39;hello&#39;) . Lists . Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. . Features of Lists . The elements within the list can be accessed by index. | Can store various elements | The list is in order | . Example of a list . thanksgivingList = [&quot;cranberry pie&quot;, &quot;casserole&quot;, &quot;mashed potatoes&quot;, &quot;turkey&quot;] print(thanksgivingList) . List Index . An index is an element of a string. Indices typically start with 0, but Collegeboard has the index start at 1. . print(thanksgivingList[1]) #In this case, the index starts at 0, but in collegeboard, the index starts at 1 print(thanksgivingList[-3]) #Python can index from the end, in this case, &quot;turkey&quot; would be index -1 and 3. . Hacks . Questions . What is a list? | What is an element | What is an easy way to reference the elements in a list or string? | What is an example of a string? | . Hacks . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . Create an index of your favorite foods . Tips: Index starts at 1, Strings are ordered sequences of characters . Extra work: Try to create an index that lists your favorite food and print the element at index 3. More work: Create a list of your favorite foods and create an index to access them. . marks = [&quot;food1&quot;] . Rubric . Creating a list . Shows great knowledge in creating lists | . Indexing . Is able to index both from the start and from the end | . todolist = [&quot;finish hacks&quot;, &quot;math hw&quot;, &quot;chores&quot;] print(todolist[2]) print(todolist[-3]) . Data Abstraction with Lists - Steven . Data abstraction can be created with lists. . Lists bundle together multiple elements and/or variables under one name are not defined with specified lengths. | The variables that are stored in a list do not have to be limited to one kind of variable. | The user does not need to know how the list stores data (this gives way for data abstraction). | . In the code below, the logic itself works with a list, but the code abstracts it into a sequence of bits in a string (as seen in the input and output). To make this work, the splitbits lists is created and processed. At the end of the code, the result is outputted as a string rather than a list (abstraction). . bits = input(&quot;Input a sequence of bits to invert: &quot;) splitbits = list(bits) for i in range(len(splitbits)): if splitbits[i] == &#39;0&#39;: splitbits[i] = &#39;1&#39; elif splitbits[i] == &#39;1&#39;: splitbits[i] = &#39;0&#39; print(&quot;&quot;.join(splitbits)) . Hacks . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn&#39;t connected to the abstraction. | . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . The following provides a rubric for my hacks (scored out of 0.20) . 0.20 - Fully functioning data abstraction with a list | 0.10 - not functioning, but attempt at making a list | 0.00 - not functioning, no evidence of attempt based upon the guidelines | . Managing Complexity with lists - Liav . Long and slow way . By now, everyone should know the &quot;long and slow way&quot; to print a list of something in python It is easy to just assign a value to a single variable | This method is displayed in this example with test scores: | . | . score1 = 95 score2 = 24 score3 = 87 score4 = 92 print(score1, score2, score3, score4) . As you can see, each score is assigned to its relative variable such as &quot;score1 = 95&quot; and then you just print each variable. | However you can make the code segment faster, easier to read, and more efficient... | . Assinging values to one variable . Use square brackets &quot;[]&quot; to store the values of a certain variable, then you can simply print the variable to output your desired list: | . scores = [95, 24, 87, 92] print(scores) . Now instead of having a difference variable and new line of code for each value, the list is simply displayed by assigning each value to a single value that you can now print. | . How lists manage complexity of a program . Simplification . It is much simpler, faster, and easier to code lists this way | Makes the code segment much easier to read | . | Variables . You do not need as many variables, because you can just assign all corresponding values to a single variable | To change a value you don&#39;t have to edit/add/remove an entire variable | . | . Python Quiz . Now everyone should take this short python quiz and screenshot your score. | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Simplify Foods List . Now simplify this foods list using what you have learned | . food1 = &quot;pizza&quot; food2 = &quot;hot dog&quot; food3 = &quot;sushi&quot; food4 = &quot;strawberry&quot; food5 = &quot;sandwich&quot; print(food1, food2, food3, food4, food5) food = [food1, food2, food3, food4, food5] print(food) . Hacks . On a single markdown file: Insert a screenshot of your score on the python quiz | Insert a screenshot of your simplifying of the food list | Why are using lists better for a program, rather than writing out each line of code? | Make your own list the &quot;long and slow way&quot; then manage the complexity of the list | . | . Rubric . In order to earn a .20/.20 you must On a markdown post: | make an attempt at the python quiz | Successfully simplify the food list | Answer the question in detail | Provide evidence of your own list that you coded | . | . name1 = &quot;Alexa&quot; name2 = &quot;Ava&quot; name3 = &quot;Lydia&quot; name4 = &quot;Sri&quot; print(name1, name1, name3, name4) # managing complexity names = [name1, name2, name3, name4] print(names) .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/jupyter/python/week%2014/2022/11/26/group1lesson.html",
            "relUrl": "/jupyter/python/week%2014/2022/11/26/group1lesson.html",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Unit 3.1-3.2 Class Jupyter Notebook Period 4",
            "content": "Unit 3, Section 1.1: Data Types and Variables - Ederick . Essential Knowledge (College Board&#39;s Must Knows): . A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time (However, if the value is a collection type such as a list, then the value can contain multiple values). | Variables typically have meaningful names that helps with the overall organization of the code and understanding of what is being represented by the variables | Some programming languages provide a variety of methods to represent data, which are referenced using variables 9Booleans, numbers, lists, and strings) | One form of a value is better suited for representation than antoher. | . What is a Variable? . A variable is an abstraction made inside a program that holds a value. These variables are used in code to refer to more comples values that the variable contains and makes the program code more organized and smoother to run. . Variables can be seen as &quot;containers&quot; and each container has a name that holds what it is supposed to hold. In the following code, we can see that a variable has the value of &quot;Alex.&quot; How can we make the variable appear more organized in the code? . x = &quot;alex&quot; print(x) . Choosing Variables . When choosing variables, it is important to assign the variables name to something that correlates with what the function of the variable is supposed to do. For example, we do not want a variable that is supposed to hold a name be named &quot;age&quot; becaue it can be confusing and mistakes may be more prevalent. . Example: . age = &quot;25&quot; name = &quot;Timmy&quot; print(name + &quot; is &quot; + age) . car = &quot;Tesla&quot; yearmake = &quot;2020&quot; ownerage = 16 haslicense = True print(&quot;My car is a &quot; + car + &quot; made in &quot; + yearmake) print(&quot;age: &quot; + str(ownerage)) if haslicense == True: print(&quot;can drive&quot;) else: print(&quot;cannot drive&quot;) . Notice how age is going to be seen when printing the code. That can lead to confusion | . Data Types . Variables have different data types that store specific kinds of data depending on what is being represented. Some examples are shown below: . integer (numbers) | string (or text/letters) | Boolean (True/False statements) | . These types of data types can be useful when trying to represent a value. For example, you would not want a variable meant to represent someone&#39;s name with an integer. . Questions (College Board&#39;s Essential Knowledge): . What exactly IS a variable? | What is the best data type to represent someone&#39;s dog&#39;s name? | Why is it important to give variables specific names before containing values? | What is the best way to represent someone&#39;s phone number? | Bonus (Not required but important to know): . How can we update a variable&#39;s value | What function is used to recieve a user&#39;s input? | Variables (3.1.2) - Noor . Learning objective for 3.1.2: . Determine the value of a variable as a result of an assignment . done through looking at how we can use the assignment operator | . Note: . Collegeboard uses &lt;-- as the assignment operator . The assignment operator looks different for different types of coding languages A variable will take the most recent value assigned | . How do you even store a value inside a variable? . Let&#39;s use python for our example: . In python, the assignment operator is the equal sign (=) | In order to store a value inside a variable, we must: Give the variable a name | place the assignment operator | input the variable value | . | . highscore = 100 # How do you store a number like 3.72? money = 3.72 # What about storing your username (string)? username = &quot;name&quot; # What if it is raining outside and you want to store that fact (boolean)? is_raining = True # What about a list of groceries? groceries = [&quot;eggs&quot;, &quot;flour&quot;, &quot;bread&quot;, &quot;milk&quot;] . Lets Look at an Example: . x = 10 y = 20 z = 30 x = y z = x # what do you think z will be? print(z) . Let&#39;s get a little more practical here . Imagine that you are making a calendar and have just finished the html code that is needed: . You now want to be able to switch between the months of the year by using the &quot;next&quot; or &quot;prev&quot; buttons you will need to take the html elements and use them to your advantage but how? | . | . | . &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;calendar&quot;&gt; &lt;div class=&quot;month&quot;&gt; &lt;button class=&quot;prev&quot;&gt;Prev&lt;/button&gt; &lt;button class=&quot;next&quot;&gt;Next&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // to make our lives a little easier, we can store the div next and prev into variables // this way we don&#39;t need to type out as much // Note: You CAN just add the event listener to document.querySelector(.next) or prev and get the same desired outcome nextButton = document.querySelector(.next) prevButton = document.querySelector(.prev) // we can go make the buttons functional by adding an addeventlistner to them nextButton.addEventListener(&quot;click&quot;, changemonth) // added in class-not sure if it&#39;s correct &lt;/script&gt; . Recap: . We learned what is a assignment operator | We learned how to use the assignment operator | We learned how to store a value inside a variable using the assignment operator | We experimented with a few examples | . Hacks: . Answer these: . In your own words, briefly explain by writing down what an assignment operator is | In Collegeboard pseudocode, what symbol is used to assign values to variables? | A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | . Hacks: . Copy the all the html code into a markdown file and run your local server. You will then see a decimal to binary converter near the html code. The problem is that it is not converting the decimal to binary. This is because the variables are not defined properly and it is your job to use the information learned today to fix the converter. Don&#39;t change the css . Bonus (optional): . There&#39;s more than one way to define the variable. List two ways to do it. . Rubric . For .15: . Student has followed directions properly and has the converter working | . For .18: . Student has completed some of the bonus material alongside requirement for 2.7 | . For .20: . Student has completed all of the material, answered thoughtfully, and met requirements for 2.7 | . List and Strings Using Variables- Nathan . Strings . Strings is a series of characters (numbers, letters, etc), one example of a string is your name or your id because strings can contain both numbers and letters. . The following are all examples of strings being used in code, in this case, within print functions. . print(&quot;hello world&quot;) print(&#39;hello&#39;) . Lists . Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. . Features of Lists . The elements within the list can be accessed by index. | Can store various elements | The list is in order | . Example of a list . thanksgivingList = [&quot;cranberry pie&quot;, &quot;casserole&quot;, &quot;mashed potatoes&quot;, &quot;turkey&quot;] print(thanksgivingList) . List Index . An index is an element of a string. Indices typically start with 0, but Collegeboard has the index start at 1. . print(thanksgivingList[1]) #In this case, the index starts at 0, but in collegeboard, the index starts at 1 print(thanksgivingList[-3]) #Python can index from the end, in this case, &quot;turkey&quot; would be index -1 and 3. . Hacks . Questions . What is a list? | What is an element | What is an easy way to reference the elements in a list or string? | What is an example of a string? | . Hacks . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . Create an index of your favorite foods . Tips: Index starts at 1, Strings are ordered sequences of characters . Extra work: Try to create an index that lists your favorite food and print the element at index 3. More work: Create a list of your favorite foods and create an index to access them. . marks = [&quot;food1&quot;] . Rubric . Creating a list . Shows great knowledge in creating lists | . Indexing . Is able to index both from the start and from the end | . todolist = [&quot;finish hacks&quot;, &quot;math hw&quot;, &quot;chores&quot;] print(todolist[2]) print(todolist[-3]) . Data Abstraction with Lists - Steven . Data abstraction can be created with lists. . Lists bundle together multiple elements and/or variables under one name are not defined with specified lengths. | The variables that are stored in a list do not have to be limited to one kind of variable. | The user does not need to know how the list stores data (this gives way for data abstraction). | . In the code below, the logic itself works with a list, but the code abstracts it into a sequence of bits in a string (as seen in the input and output). To make this work, the splitbits lists is created and processed. At the end of the code, the result is outputted as a string rather than a list (abstraction). . bits = input(&quot;Input a sequence of bits to invert: &quot;) splitbits = list(bits) for i in range(len(splitbits)): if splitbits[i] == &#39;0&#39;: splitbits[i] = &#39;1&#39; elif splitbits[i] == &#39;1&#39;: splitbits[i] = &#39;0&#39; print(&quot;&quot;.join(splitbits)) . Hacks . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn&#39;t connected to the abstraction. | . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . The following provides a rubric for my hacks (scored out of 0.20) . 0.20 - Fully functioning data abstraction with a list | 0.10 - not functioning, but attempt at making a list | 0.00 - not functioning, no evidence of attempt based upon the guidelines | . Managing Complexity with lists - Liav . Long and slow way . By now, everyone should know the &quot;long and slow way&quot; to print a list of something in python It is easy to just assign a value to a single variable | This method is displayed in this example with test scores: | . | . score1 = 95 score2 = 24 score3 = 87 score4 = 92 print(score1, score2, score3, score4) . As you can see, each score is assigned to its relative variable such as &quot;score1 = 95&quot; and then you just print each variable. | However you can make the code segment faster, easier to read, and more efficient... | . Assinging values to one variable . Use square brackets &quot;[]&quot; to store the values of a certain variable, then you can simply print the variable to output your desired list: | . scores = [95, 24, 87, 92] print(scores) . Now instead of having a difference variable and new line of code for each value, the list is simply displayed by assigning each value to a single value that you can now print. | . How lists manage complexity of a program . Simplification . It is much simpler, faster, and easier to code lists this way | Makes the code segment much easier to read | . | Variables . You do not need as many variables, because you can just assign all corresponding values to a single variable | To change a value you don&#39;t have to edit/add/remove an entire variable | . | . Python Quiz . Now everyone should take this short python quiz and screenshot your score. | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Simplify Foods List . Now simplify this foods list using what you have learned | . food1 = &quot;pizza&quot; food2 = &quot;hot dog&quot; food3 = &quot;sushi&quot; food4 = &quot;strawberry&quot; food5 = &quot;sandwich&quot; print(food1, food2, food3, food4, food5) food = [food1, food2, food3, food4, food5] print(food) . Hacks . On a single markdown file: Insert a screenshot of your score on the python quiz | Insert a screenshot of your simplifying of the food list | Why are using lists better for a program, rather than writing out each line of code? | Make your own list the &quot;long and slow way&quot; then manage the complexity of the list | . | . Rubric . In order to earn a .20/.20 you must On a markdown post: | make an attempt at the python quiz | Successfully simplify the food list | Answer the question in detail | Provide evidence of your own list that you coded | . | . name1 = &quot;Alexa&quot; name2 = &quot;Ava&quot; name3 = &quot;Lydia&quot; name4 = &quot;Sri&quot; print(name1, name1, name3, name4) # managing complexity names = [name1, name2, name3, name4] print(names) .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/jupyter/python/2022/11/26/LessonPlanNB.html",
            "relUrl": "/jupyter/python/2022/11/26/LessonPlanNB.html",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Lesson 3.3 & 3.4",
            "content": "Lesson 3.3 . Luka . Lesson 3.3.1 . What is the goal? . Express an algorithm that uses sequencing without using programming language. | . What is an algorithms? . An algorithm is a finite set of instruction that accomplish a task, it can be expressed by natural language, diagrams, and various other ways. | . What are the three parts of an algorithm? . Sequencing, selection, and iteration. . | Every algorithm can be created by a mixture of sequencing, selection, and iteration . | . What is a sequence? . A sequence is the order of how to do something to achieve a result, similarly to how you follow the instructions from a teacher. | . What is a selection? . A selection allows an algorithm to make a decision based on if a condition is met, an example of this is when your car is out of fuel, you go to the gas station to fill your car, but if your car is full you wouldn&#39;t go to the gas station. | . What is a iteration? . An iteration is a loop and doing something again until a condition is met, like you put away your computer when you are finished with your work. | . Hacks . You will describe the different parts of an algorithm, sequencing, selection, and iteration in the image below. | . sequencing: | Selection: | Iteration: | . Saavan . Mathematical Expressions . How do we represent a step-by-step algorithmic process using sequential code statements? . First off what is a sequential code statement? Sequential statements are used in processes to specify how signals are assigned. The process is executed in order as a whole. After all the sequential statements in the process are executed the signals are assigned their new values. They execute in the order in which they appear in the process. | . | Sequencing - First step to do- Second step to do - third step to do Followed in the order that the code comes in. | You can put numerical values within variables. You can also put variable values inside other variables Ex. grade - 82 | Ex. highScore - currentScore | . | Can also store results of operations inside of a variable Ex. name - firstName + lastName | . | Can store results of a procedure call Average - calcAverage (10,20,30) | . | Order of operations very important Ex. grade1 - 10 | Grade 2 - grade 1 | . | . | Example Problem - calculate and display average of 25, 32, 42 Num1 - 25 | Num2 -32 | Num3 - 42 | Average - (num1 + num2 + num3)/3 | DISPLAY (Average) | . | . Antony . Goal: Evaluate expression using arithmetic operator. . Arithmetic operator are language that use addition, subtraction, multiplication, division, and modulus operator. . The order of arithmetic operation is the same with mathematic operation(Subtraction first). . Examples of arithmetic operators: . -Addition: a+b -Subtraction: a-b -Multiplication: a*b -Division: a/b -Modulus: a MOD b (a and b can be string or number) . Examples of arithmetic operator in code: . 10 + 5 * 8 / 4 . 20.0 . (10+5) * 8 / 4 . 30.0 . num1 = 10 num2 = 5 num3 = 7 result = num1 + num2 + num3 print(result) . 22 . Modulus operator divides the given numerator by the denominator to find a result,which is finding the remainder for the division(remainder has to an integer). . Operator with MOD have the same sequence with multiplication and division. In python and most programming languages, the syntax of MOD is % . Examples with use of MOD: . num1 = 12 num2 = 25 num3 = 14 result = num1 / 4 * num3 + 9 % 2 - num3 print(result) . 29.0 . num1 = 12 num2 = 25 num3 = 14 result = num2 % num1 * (num3+6) - 10 print(result) . 10 . Hack . -Evaluate the arithmetic expression or this code: . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . 3.0 . HACK for 3.3! CROSS WORD PUZZLE! . example of how to do it in your blog: . 7 across - Baloney . Lesson 3.4 . Matty . Goal: Evaluate expression that manipulate strings . String concatenation joins two or more strings end-to-end to make a new string . A substring is part of an existing string . Strings: . Ordered sequences of characters | some procedures may exist that can be used with strings | each language has its own procedures, methods, and functions. | . Fun fact: Space bar is also a character. . Examples of strings in pseudocode: . len (str) . returns the number of character is str | len(&quot;hello&quot;) returns 5 | . | concat (str1, str2) . returns a single string consisting of str1 followed by str 2 | concat(&quot;hello&quot;,&quot;world&quot;) return &#39;hello world&#39; | . | substring (str1, str2, length) . returns a substring of consecutive character from str1, starting the character at position &#39;start&#39; and containing &#39;length&#39; character | substring (&quot;hello&quot;,&quot;world&quot;, 4,5) returns &#39;lo wor&#39; | . | . . This is an example of a len substring in python: . len(&quot;HelloWorld&quot;) . 10 . This is an example of a concat string in python: . string1 = &quot;Hello&quot; string2 = &quot;World&quot; print(string1 + string2) . HelloWorld . or: . string1 = &quot;Hello&quot; print(string1, &quot;World&quot;) . Hello World . This is an example of a substring string in python: . string = &quot;HelloWorld&quot; print(string[2:6]) . lloW . &quot;Challenge&quot; problem: . (The first to answer the output.) . string1 = &quot;degree&quot; string2 = &quot; passenger&quot; FinalString = string1 + string2 print(FinalString[2:9]) print(len(FinalString)) print(len(FinalString[2:9])) . gree pa 16 7 . There are many more functions that deal with strings, but these three are the ones that college board want you to learn. if you want to learn more about them, a google search will do the trick. . HACK! . Link to the funnest activity ever!!!! . . HACK! REVIEW . Hack #1 . Hack #2 . Hack #3 . Make a new blog post and finish all of the hacks on there and submit it to the review ticket. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week%2014/2022/11/20/group2lesson.html",
            "relUrl": "/week%2014/2022/11/20/group2lesson.html",
            "date": " • Nov 20, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Lesson 3.3 & 3.4",
            "content": "Lesson 3.3 . Luka . Lesson 3.3.1 . What is the goal? . Express an algorithm that uses sequencing without using programming language. | . What is an algorithms? . An algorithm is a finite set of instruction that accomplish a task, it can be expressed by natural language, diagrams, and various other ways. | . What are the three parts of an algorithm? . Sequencing, selection, and iteration. . | Every algorithm can be created by a mixture of sequencing, selection, and iteration . | . What is a sequence? . A sequence is the order of how to do something to achieve a result, similarly to how you follow the instructions from a teacher. | . What is a selection? . A selection allows an algorithm to make a decision based on if a condition is met, an example of this is when your car is out of fuel, you go to the gas station to fill your car, but if your car is full you wouldn&#39;t go to the gas station. | . What is a iteration? . An iteration is a loop and doing something again until a condition is met, like you put away your computer when you are finished with your work. | . Hacks . You will describe the different parts of an algorithm, sequencing, selection, and iteration in the image below. | . sequencing: | Selection: | Iteration: | . Saavan . Mathematical Expressions . How do we represent a step-by-step algorithmic process using sequential code statements? . First off what is a sequential code statement? Sequential statements are used in processes to specify how signals are assigned. The process is executed in order as a whole. After all the sequential statements in the process are executed the signals are assigned their new values. They execute in the order in which they appear in the process. | . | Sequencing - First step to do- Second step to do - third step to do Followed in the order that the code comes in. | You can put numerical values within variables. You can also put variable values inside other variables Ex. grade - 82 | Ex. highScore - currentScore | . | Can also store results of operations inside of a variable Ex. name - firstName + lastName | . | Can store results of a procedure call Average - calcAverage (10,20,30) | . | Order of operations very important Ex. grade1 - 10 | Grade 2 - grade 1 | . | . | Example Problem - calculate and display average of 25, 32, 42 Num1 - 25 | Num2 -32 | Num3 - 42 | Average - (num1 + num2 + num3)/3 | DISPLAY (Average) | . | . Antony . Goal: Evaluate expression using arithmetic operator. . Arithmetic operator are language that use addition, subtraction, multiplication, division, and modulus operator. . The order of arithmetic operation is the same with mathematic operation(Subtraction first). . Examples of arithmetic operators: . -Addition: a+b -Subtraction: a-b -Multiplication: a*b -Division: a/b -Modulus: a MOD b (a and b can be string or number) . Examples of arithmetic operator in code: . 10 + 5 * 8 / 4 . 20.0 . (10+5) * 8 / 4 . 30.0 . num1 = 10 num2 = 5 num3 = 7 result = num1 + num2 + num3 print(result) . 22 . Modulus operator divides the given numerator by the denominator to find a result,which is finding the remainder for the division(remainder has to an integer). . Operator with MOD have the same sequence with multiplication and division. In python and most programming languages, the syntax of MOD is % . Examples with use of MOD: . num1 = 12 num2 = 25 num3 = 14 result = num1 / 4 * num3 + 9 % 2 - num3 print(result) . 29.0 . num1 = 12 num2 = 25 num3 = 14 result = num2 % num1 * (num3+6) - 10 print(result) . 10 . Hack . -Evaluate the arithmetic expression or this code: . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . 3.0 . HACK for 3.3! CROSS WORD PUZZLE! . example of how to do it in your blog: . 7 across - Baloney . Lesson 3.4 . Matty . Goal: Evaluate expression that manipulate strings . String concatenation joins two or more strings end-to-end to make a new string . A substring is part of an existing string . Strings: . Ordered sequences of characters | some procedures may exist that can be used with strings | each language has its own procedures, methods, and functions. | . Fun fact: Space bar is also a character. . Examples of strings in pseudocode: . len (str) . returns the number of character is str | len(&quot;hello&quot;) returns 5 | . | concat (str1, str2) . returns a single string consisting of str1 followed by str 2 | concat(&quot;hello&quot;,&quot;world&quot;) return &#39;hello world&#39; | . | substring (str1, str2, length) . returns a substring of consecutive character from str1, starting the character at position &#39;start&#39; and containing &#39;length&#39; character | substring (&quot;hello&quot;,&quot;world&quot;, 4,5) returns &#39;lo wor&#39; | . | . . This is an example of a len substring in python: . len(&quot;HelloWorld&quot;) . 10 . This is an example of a concat string in python: . string1 = &quot;Hello&quot; string2 = &quot;World&quot; print(string1 + string2) . HelloWorld . or: . string1 = &quot;Hello&quot; print(string1, &quot;World&quot;) . Hello World . This is an example of a substring string in python: . string = &quot;HelloWorld&quot; print(string[2:6]) . lloW . &quot;Challenge&quot; problem: . (The first to answer the output.) . string1 = &quot;degree&quot; string2 = &quot; passenger&quot; FinalString = string1 + string2 print(FinalString[2:9]) print(len(FinalString)) print(len(FinalString[2:9])) . gree pa 16 7 . There are many more functions that deal with strings, but these three are the ones that college board want you to learn. if you want to learn more about them, a google search will do the trick. . HACK! . Link to the funnest activity ever!!!! . . HACK! REVIEW . Hack #1 . Hack #2 . Hack #3 . Make a new blog post and finish all of the hacks on there and submit it to the review ticket. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/wk2/2022/11/20/Lesson-presentation.html",
            "relUrl": "/wk2/2022/11/20/Lesson-presentation.html",
            "date": " • Nov 20, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Trimester 2 Tool Check",
            "content": "This is my make server running .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/tools/tri2",
            "relUrl": "/tools/tri2",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Collegebaord Final Reflection/Night at the Museum",
            "content": "Taking the Final . There were many questions where I had to stop and think for a while. However, this final didn’t feel as challenging or overwhelming as the previous practice quizes. . Strategies/improvements . I noticed that many of the questions that were on the final were similar to the ones we had taken earlier after the videos. They felt much easier this time. . I understand the topics much better now | broke up the code into pieces (wasn’t overwhelmed by the whole chunk) | took pieces step by step to understand what the code does | used process of elimination (was able to limit down the options until I felt confident in an answer) | when I was stuck, I’d discuss with my teammates who were taking the test as well (combinded knowlege and backgrounds helped to conclude an answer) | . ### Corrections I got a 48/50 on the final, which would be a 5 on the AP test. These were the problems I got incorrect. . #11 | My mistake was that I thought that the code compares each element to every other element in the list. Originally, I thought since the list is checking for duplicates, it would need to check for dupliactes in all the elements. | However, it acutually only compares it to the elements that follow, since it iterates through j + 1. It doesn’t require checking the previous ones since it checks for duplicates as it goes. . | #36 | This question was very hard for me to understand, even after seeing the correct answer. I asked a couple people for help, and their explanations aided in my current understanding. | At first, I thought that i &lt;- i + 1 needed to be first in order to make it even before multiplying it by 2 everytime. I misunderstood the parts of the code, and mixed up appending it to the list and iterating through it. | The APPEND(evenlist, 2 * i) needs to be first. It appends an empty list, and then multiplies i (with a current value of 1) by 2 in order to make it even. It then iterates through by adding one to i. | . Night at the Museum . The Night at the Museum process was a little chaotic for my group. Just before we had to leave to head to the school, our code was changed and made a major error. Our AWS wouldn’t deploy, so we couldn’t fetch data from our APIs. However, it was still a successful night with many intresting projects | it was so intresting to go around and see all the projects that other students created. They were very creative and all the projects were so differet. It was also cool to see the APCSA projects and how they were more advanced and detailed. | . some of other groups’ projects: .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/final/collegeboard",
            "relUrl": "/final/collegeboard",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "My Quiz",
            "content": "def question_with_response(promt): print(&quot;Question: &quot; + promt) msg = input() return msg correct = 0 ec_abort = 0 # I created the variable &quot;ec_abort&quot; (stands for extra credit abort) print(&quot;Hey queen, make sure to think out of the box when taking this quiz.&quot;) print(&quot;You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number.&quot;) question_with_response(&quot;Are you ready?&quot;) if ec_abort == 0: rsp = question_with_response(&quot;How old am I?&quot;) if rsp == &quot;16&quot;: print(rsp + &quot; is correct:)&quot;) correct += 1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # The new variable allows me to code so that if the user of my quiz types &quot;Give me 100%&quot;, it skips to the end with a 5/5 if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite color?&quot;) if rsp == &quot;Blue&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If they get the question correct, then the variable &quot;correct&quot; goes up by 1 if ec_abort == 0: rsp = question_with_response(&quot;How many siblings to I have?&quot;) if rsp == &quot;3&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If their answer is incorrect, the amount correct stays the same and it prints &quot;is no bueno:(&quot; if ec_abort == 0: rsp = question_with_response(&quot;What pet do I have?&quot;) if rsp == &quot;A dog&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite subject?&quot;) if rsp == &quot;Math&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 1: print(&quot;You scored 5/5&quot;) if ec_abort == 0: print (&quot;Slayyy you scored &quot; + str(correct) + &quot;/5&quot;) # If they don&#39;t use the &quot;Give me 100%&quot; option, ec_abort is still 0, allowing this step that gives the perentage correct to show . Hey queen, make sure to think out of the box when taking this quiz. You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number. Question: Are you ready? Question: How old am I? 16 is correct:) Question: What is my favorite color? Blue is correct:) Question: How many siblings to I have? Give me 100% BOOM 100% YOU ARE DONE You scored 5/5 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/myquiz",
            "relUrl": "/notebooks/myquiz",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Video Planning Script/Learnings on Others' Videos",
            "content": "My Job = Frontend Developer . Instructions for my role: . Describe Frontend designs and coding techniques. | Create and implement an effective frontend between humans and technology | Show frontend design artifacts (wire frames) | Describe any consideration you have made for customer requirements. | Indicate accommodations you have made for English Language Learners or those with Disabilities | Show any screens that are currently developed. | Describe Code and Styles Frontend development | HTML, Markdown, JavaScript | Cards, Tables, Blogging | Comments. Be sure to illustrate developers comments in code and how this will facilitate current and future understanding of the key portions of system. | . Screens: . Show group fastpage (explain how this is our frontend) | Show wire frame and briefly explain project | Describe cusomer requirements (what will the merch commisioner need to do? &lt; on group fastpage) | Show code for fastpage (html, markdown, javascript) | Show a table and blogs | try and use more captions and less talking | use side by side screens? | show creating of table? | . Updated Outline: . show wire frame and add captions about customer requirements and our stock API for project | Show VS code with frontend code (pause on certain parts and add arrows and captions) | mention how customer will need to input their specific amount of quanity but for now just will work same as joke API except will minus one when you click the button | show html table (with screenshot of table in Fastpages) | highlight endpoint where connects to backend (link to subdomain) | edit in picture of “failed to fetch” | show attempt to run locally while backend debugs and edit in image of “failed to fetch” with local IP address | show progress and how API shows up | add screen recording of attemting to click quantity (doesn’t work) | show use of blogs? | . Other Videos: . Group from APCSA (Period 2 Rebecca Su) . talked about weekly sprints (development, testing, deployment) | use issues on github to keep track of/assign work | very detailed uml and wire frames | have a post tracking all their progress for their project (list APIS, wesites, etc) | have a currency converter &lt; very intresting and accounting for all groups | . Group from APCSP (Drew Reed) . very descriptive uml on project (good to reference) | showed use of debugging | used CSS to create buttons on timer | very organized and end project will be very cool | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/video/plan",
            "relUrl": "/video/plan",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "College Board Notes 4.1",
            "content": "Internet . packet = a small amount of data sent over a network (each packet includes source and destination of information) | computer system = group of computing devices and programs working together for a joint purpose | computer network = group of interconnected computing devices capable of sending or receiving data -packet comtains data and meta data containung info used for routing info | . Packet Switching . message (file) is broken uo into packets and sent in any order. The packets are reassembled by the recipient’s device | routing = process of finding a path from sender to reciever | path between 2 comuting devices on a computer network = sequence of directly connected computing devices that begins at the sender and ends at the receiver | Bandwidth = maximum amount of data that can be sent in a fixed amount of time on a computer network (typically measured in bits per second) | . Layers to Internet . Network Access Layer | Network Access/Internet Layer Data Transmission (IP address) | Internet Layer (internet is scalable) | Transport Layer | . The Saclibility of the Internet . Autonomous Systems (AS) | Local Area Network (LAN) | The Internet . | World Wide Web is NOT the internet (linked data pages) | . . This is my diagram showing computer systems and networks . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/fourpointonenotes",
            "relUrl": "/collegeboard/fourpointonenotes",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Our API",
            "content": "import requests url = &quot;https://dnaber-languagetool.p.rapidapi.com/v2/languages&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;7798c19b40msh9672054d4a4cb3cp176d9cjsn9d6a5cf1b9bf&quot;, &quot;X-RapidAPI-Host&quot;: &quot;dnaber-languagetool.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) print(&quot;Languages Supported&quot;) languagelist = response.json() for language in languagelist: print(language[&quot;name&quot;], &quot; = &quot;, language[&quot;code&quot;]) . [{&#34;name&#34;:&#34;Arabic&#34;,&#34;code&#34;:&#34;ar&#34;,&#34;longCode&#34;:&#34;ar&#34;},{&#34;name&#34;:&#34;Asturian&#34;,&#34;code&#34;:&#34;ast&#34;,&#34;longCode&#34;:&#34;ast-ES&#34;},{&#34;name&#34;:&#34;Belarusian&#34;,&#34;code&#34;:&#34;be&#34;,&#34;longCode&#34;:&#34;be-BY&#34;},{&#34;name&#34;:&#34;Breton&#34;,&#34;code&#34;:&#34;br&#34;,&#34;longCode&#34;:&#34;br-FR&#34;},{&#34;name&#34;:&#34;Catalan&#34;,&#34;code&#34;:&#34;ca&#34;,&#34;longCode&#34;:&#34;ca-ES&#34;},{&#34;name&#34;:&#34;Catalan (Valencian)&#34;,&#34;code&#34;:&#34;ca&#34;,&#34;longCode&#34;:&#34;ca-ES-valencia&#34;},{&#34;name&#34;:&#34;Chinese&#34;,&#34;code&#34;:&#34;zh&#34;,&#34;longCode&#34;:&#34;zh-CN&#34;},{&#34;name&#34;:&#34;Danish&#34;,&#34;code&#34;:&#34;da&#34;,&#34;longCode&#34;:&#34;da-DK&#34;},{&#34;name&#34;:&#34;Dutch&#34;,&#34;code&#34;:&#34;nl&#34;,&#34;longCode&#34;:&#34;nl&#34;},{&#34;name&#34;:&#34;Dutch&#34;,&#34;code&#34;:&#34;nl&#34;,&#34;longCode&#34;:&#34;nl&#34;},{&#34;name&#34;:&#34;Dutch (Belgium)&#34;,&#34;code&#34;:&#34;nl&#34;,&#34;longCode&#34;:&#34;nl-BE&#34;},{&#34;name&#34;:&#34;English&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en&#34;},{&#34;name&#34;:&#34;English&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en&#34;},{&#34;name&#34;:&#34;English (Australian)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-AU&#34;},{&#34;name&#34;:&#34;English (Australian)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-AU&#34;},{&#34;name&#34;:&#34;English (Canadian)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-CA&#34;},{&#34;name&#34;:&#34;English (Canadian)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-CA&#34;},{&#34;name&#34;:&#34;English (GB)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-GB&#34;},{&#34;name&#34;:&#34;English (GB)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-GB&#34;},{&#34;name&#34;:&#34;English (New Zealand)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-NZ&#34;},{&#34;name&#34;:&#34;English (New Zealand)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-NZ&#34;},{&#34;name&#34;:&#34;English (South African)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-ZA&#34;},{&#34;name&#34;:&#34;English (South African)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-ZA&#34;},{&#34;name&#34;:&#34;English (US)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-US&#34;},{&#34;name&#34;:&#34;English (US)&#34;,&#34;code&#34;:&#34;en&#34;,&#34;longCode&#34;:&#34;en-US&#34;},{&#34;name&#34;:&#34;Esperanto&#34;,&#34;code&#34;:&#34;eo&#34;,&#34;longCode&#34;:&#34;eo&#34;},{&#34;name&#34;:&#34;French&#34;,&#34;code&#34;:&#34;fr&#34;,&#34;longCode&#34;:&#34;fr&#34;},{&#34;name&#34;:&#34;French&#34;,&#34;code&#34;:&#34;fr&#34;,&#34;longCode&#34;:&#34;fr&#34;},{&#34;name&#34;:&#34;Galician&#34;,&#34;code&#34;:&#34;gl&#34;,&#34;longCode&#34;:&#34;gl-ES&#34;},{&#34;name&#34;:&#34;German&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de&#34;},{&#34;name&#34;:&#34;German&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de&#34;},{&#34;name&#34;:&#34;German (Austria)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-AT&#34;},{&#34;name&#34;:&#34;German (Austria)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-AT&#34;},{&#34;name&#34;:&#34;German (Germany)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-DE&#34;},{&#34;name&#34;:&#34;German (Germany)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-DE&#34;},{&#34;name&#34;:&#34;German (Swiss)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-CH&#34;},{&#34;name&#34;:&#34;German (Swiss)&#34;,&#34;code&#34;:&#34;de&#34;,&#34;longCode&#34;:&#34;de-CH&#34;},{&#34;name&#34;:&#34;Greek&#34;,&#34;code&#34;:&#34;el&#34;,&#34;longCode&#34;:&#34;el-GR&#34;},{&#34;name&#34;:&#34;Irish&#34;,&#34;code&#34;:&#34;ga&#34;,&#34;longCode&#34;:&#34;ga-IE&#34;},{&#34;name&#34;:&#34;Italian&#34;,&#34;code&#34;:&#34;it&#34;,&#34;longCode&#34;:&#34;it&#34;},{&#34;name&#34;:&#34;Japanese&#34;,&#34;code&#34;:&#34;ja&#34;,&#34;longCode&#34;:&#34;ja-JP&#34;},{&#34;name&#34;:&#34;Khmer&#34;,&#34;code&#34;:&#34;km&#34;,&#34;longCode&#34;:&#34;km-KH&#34;},{&#34;name&#34;:&#34;Norwegian (Bokmål)&#34;,&#34;code&#34;:&#34;nb&#34;,&#34;longCode&#34;:&#34;nb&#34;},{&#34;name&#34;:&#34;Norwegian (Bokmål)&#34;,&#34;code&#34;:&#34;no&#34;,&#34;longCode&#34;:&#34;no&#34;},{&#34;name&#34;:&#34;Persian&#34;,&#34;code&#34;:&#34;fa&#34;,&#34;longCode&#34;:&#34;fa&#34;},{&#34;name&#34;:&#34;Polish&#34;,&#34;code&#34;:&#34;pl&#34;,&#34;longCode&#34;:&#34;pl-PL&#34;},{&#34;name&#34;:&#34;Portuguese&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt&#34;},{&#34;name&#34;:&#34;Portuguese (Angola preAO)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-AO&#34;},{&#34;name&#34;:&#34;Portuguese (Angola preAO)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-AO&#34;},{&#34;name&#34;:&#34;Portuguese (Brazil)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-BR&#34;},{&#34;name&#34;:&#34;Portuguese (Brazil)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-BR&#34;},{&#34;name&#34;:&#34;Portuguese (Moçambique preAO)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-MZ&#34;},{&#34;name&#34;:&#34;Portuguese (Moçambique preAO)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-MZ&#34;},{&#34;name&#34;:&#34;Portuguese (Portugal)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-PT&#34;},{&#34;name&#34;:&#34;Portuguese (Portugal)&#34;,&#34;code&#34;:&#34;pt&#34;,&#34;longCode&#34;:&#34;pt-PT&#34;},{&#34;name&#34;:&#34;Romanian&#34;,&#34;code&#34;:&#34;ro&#34;,&#34;longCode&#34;:&#34;ro-RO&#34;},{&#34;name&#34;:&#34;Russian&#34;,&#34;code&#34;:&#34;ru&#34;,&#34;longCode&#34;:&#34;ru-RU&#34;},{&#34;name&#34;:&#34;Simple German&#34;,&#34;code&#34;:&#34;de-DE-x-simple-language&#34;,&#34;longCode&#34;:&#34;de-DE-x-simple-language&#34;},{&#34;name&#34;:&#34;Slovak&#34;,&#34;code&#34;:&#34;sk&#34;,&#34;longCode&#34;:&#34;sk-SK&#34;},{&#34;name&#34;:&#34;Slovenian&#34;,&#34;code&#34;:&#34;sl&#34;,&#34;longCode&#34;:&#34;sl-SI&#34;},{&#34;name&#34;:&#34;Spanish&#34;,&#34;code&#34;:&#34;es&#34;,&#34;longCode&#34;:&#34;es&#34;},{&#34;name&#34;:&#34;Spanish&#34;,&#34;code&#34;:&#34;es&#34;,&#34;longCode&#34;:&#34;es&#34;},{&#34;name&#34;:&#34;Spanish (voseo)&#34;,&#34;code&#34;:&#34;es&#34;,&#34;longCode&#34;:&#34;es-AR&#34;},{&#34;name&#34;:&#34;Swedish&#34;,&#34;code&#34;:&#34;sv&#34;,&#34;longCode&#34;:&#34;sv&#34;},{&#34;name&#34;:&#34;Tagalog&#34;,&#34;code&#34;:&#34;tl&#34;,&#34;longCode&#34;:&#34;tl-PH&#34;},{&#34;name&#34;:&#34;Tamil&#34;,&#34;code&#34;:&#34;ta&#34;,&#34;longCode&#34;:&#34;ta-IN&#34;},{&#34;name&#34;:&#34;Ukrainian&#34;,&#34;code&#34;:&#34;uk&#34;,&#34;longCode&#34;:&#34;uk-UA&#34;}] Languages Supported Arabic = ar Asturian = ast Belarusian = be Breton = br Catalan = ca Catalan (Valencian) = ca Chinese = zh Danish = da Dutch = nl Dutch = nl Dutch (Belgium) = nl English = en English = en English (Australian) = en English (Australian) = en English (Canadian) = en English (Canadian) = en English (GB) = en English (GB) = en English (New Zealand) = en English (New Zealand) = en English (South African) = en English (South African) = en English (US) = en English (US) = en Esperanto = eo French = fr French = fr Galician = gl German = de German = de German (Austria) = de German (Austria) = de German (Germany) = de German (Germany) = de German (Swiss) = de German (Swiss) = de Greek = el Irish = ga Italian = it Japanese = ja Khmer = km Norwegian (Bokmål) = nb Norwegian (Bokmål) = no Persian = fa Polish = pl Portuguese = pt Portuguese (Angola preAO) = pt Portuguese (Angola preAO) = pt Portuguese (Brazil) = pt Portuguese (Brazil) = pt Portuguese (Moçambique preAO) = pt Portuguese (Moçambique preAO) = pt Portuguese (Portugal) = pt Portuguese (Portugal) = pt Romanian = ro Russian = ru Simple German = de-DE-x-simple-language Slovak = sk Slovenian = sl Spanish = es Spanish = es Spanish (voseo) = es Swedish = sv Tagalog = tl Tamil = ta Ukrainian = uk . This is the proccess of gramatically checking the text. It displays the errors in the text and how to fix it. . import requests import json url = &quot;https://dnaber-languagetool.p.rapidapi.com/v2/check&quot; payload = &quot;language=en-US&amp;text=&quot; #checking in English bc of use of code&#39;en&#39; headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;X-RapidAPI-Key&quot;: &quot;7b146afe20msh92e84c02ae27c6ap1185b5jsnb7a574f24cbe&quot;, &quot;X-RapidAPI-Host&quot;: &quot;dnaber-languagetool.p.rapidapi.com&quot; } text = input(&quot;Please enter the text you would like checked&quot;) payload += text #this appends the string defined above to add the text that needs to be checked response = requests.request(&quot;POST&quot;, url, data=payload, headers=headers) # print(response.text) #print(json.dumps(response.json(), indent=4)) print(json.dumps(response.json()[&quot;matches&quot;], indent=4)) #the json.dumps formats the data to look better . [ { &#34;message&#34;: &#34;Possible spelling mistake found.&#34;, &#34;shortMessage&#34;: &#34;Spelling mistake&#34;, &#34;replacements&#34;: [ { &#34;value&#34;: &#34;Hello&#34; }, { &#34;value&#34;: &#34;Hellos&#34; } ], &#34;offset&#34;: 0, &#34;length&#34;: 6, &#34;context&#34;: { &#34;text&#34;: &#34;Helloe Im Alexa&#34;, &#34;offset&#34;: 0, &#34;length&#34;: 6 }, &#34;sentence&#34;: &#34;Helloe Im Alexa&#34;, &#34;type&#34;: { &#34;typeName&#34;: &#34;Other&#34; }, &#34;rule&#34;: { &#34;id&#34;: &#34;MORFOLOGIK_RULE_EN_US&#34;, &#34;description&#34;: &#34;Possible spelling mistake&#34;, &#34;issueType&#34;: &#34;misspelling&#34;, &#34;category&#34;: { &#34;id&#34;: &#34;TYPOS&#34;, &#34;name&#34;: &#34;Possible Typo&#34; }, &#34;isPremium&#34;: false }, &#34;ignoreForIncompleteSentence&#34;: false, &#34;contextForSureMatch&#34;: 0 }, { &#34;message&#34;: &#34;Possible spelling mistake found.&#34;, &#34;shortMessage&#34;: &#34;Spelling mistake&#34;, &#34;replacements&#34;: [ { &#34;value&#34;: &#34;I&#39;m&#34; } ], &#34;offset&#34;: 7, &#34;length&#34;: 2, &#34;context&#34;: { &#34;text&#34;: &#34;Helloe Im Alexa&#34;, &#34;offset&#34;: 7, &#34;length&#34;: 2 }, &#34;sentence&#34;: &#34;Helloe Im Alexa&#34;, &#34;type&#34;: { &#34;typeName&#34;: &#34;Other&#34; }, &#34;rule&#34;: { &#34;id&#34;: &#34;EN_CONTRACTION_SPELLING&#34;, &#34;description&#34;: &#34;Spelling of English contractions&#34;, &#34;issueType&#34;: &#34;misspelling&#34;, &#34;category&#34;: { &#34;id&#34;: &#34;TYPOS&#34;, &#34;name&#34;: &#34;Possible Typo&#34; }, &#34;isPremium&#34;: false }, &#34;ignoreForIncompleteSentence&#34;: false, &#34;contextForSureMatch&#34;: 0 } ] .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/API/SpellCheck",
            "relUrl": "/API/SpellCheck",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "College Board Notes",
            "content": "College Board Notes 1.4 . Types of Errors . Logic Error (mistake in algorith/program and behaves incorrectly or unexpectedly) | Syntax Error (mistake in program where rules of programming lang are not followed) | Run-time Error ( mistake in program that occurs during execution of program) | Overflow error (occurs when a computer attempts to handle a number that is outside of the defined range of value) | . Effective Ways to Find/Correct Errors . test cases | hand tracing | visualizations | debggers | adding extra output statment(s) | . Test, test, test! . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/notes",
            "relUrl": "/collegeboard/notes",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;7798c19b40msh9672054d4a4cb3cp176d9cjsn9d6a5cf1b9bf&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;7798c19b40msh9672054d4a4cb3cp176d9cjsn9d6a5cf1b9bf&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1500,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29499,&#34;totalExchanges&#34;:173,&#34;totalMarketCap&#34;:&#34;983612677451&#34;,&#34;total24hVolume&#34;:&#34;62240853493&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;384354342963&#34;,&#34;price&#34;:&#34;20048.365017211556&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.09&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20051.438940241358&#34;,&#34;20112.942136659854&#34;,&#34;20157.819968805998&#34;,&#34;20254.029991435713&#34;,&#34;20303.466331336567&#34;,&#34;20352.46379557382&#34;,&#34;20340.736960702463&#34;,&#34;20383.68761580728&#34;,&#34;20327.56610010769&#34;,&#34;20249.0598171069&#34;,&#34;20216.33733971908&#34;,&#34;20183.62088115384&#34;,&#34;20159.744112050765&#34;,&#34;20135.103620334423&#34;,&#34;20152.838726388378&#34;,&#34;20223.999055486038&#34;,&#34;20188.386841136497&#34;,&#34;20099.650776087008&#34;,&#34;20022.525302913724&#34;,&#34;20060.360700925474&#34;,&#34;20058.49372151537&#34;,&#34;20101.79019444109&#34;,&#34;20068.60680042962&#34;,&#34;20037.990245449524&#34;,&#34;20040.006424632564&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;34448619621&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166806840532&#34;,&#34;price&#34;:&#34;1363.7268444859621&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.20&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1349.1166752669458&#34;,&#34;1351.4752396724552&#34;,&#34;1352.7565855474788&#34;,&#34;1364.7069535474543&#34;,&#34;1375.2332279379189&#34;,&#34;1375.0120085043593&#34;,&#34;1372.8560956800545&#34;,&#34;1376.1109732749908&#34;,&#34;1374.2091487475132&#34;,&#34;1367.8770624662602&#34;,&#34;1366.413446523702&#34;,&#34;1362.598875204337&#34;,&#34;1360.3636987191837&#34;,&#34;1358.3640048395087&#34;,&#34;1360.4342504890021&#34;,&#34;1369.213281754299&#34;,&#34;1368.3676032576047&#34;,&#34;1364.1360571475047&#34;,&#34;1363.3432991494524&#34;,&#34;1364.0707758574745&#34;,&#34;1363.3606085887561&#34;,&#34;1364.148825121332&#34;,&#34;1361.3954792114398&#34;,&#34;1359.0031784082305&#34;,&#34;1360.6275497370877&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;11436403892&#34;,&#34;btcPrice&#34;:&#34;0.0680218483310335&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68212126851&#34;,&#34;price&#34;:&#34;0.9999934382419505&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.26&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0004730164696796&#34;,&#34;0.9996925245670222&#34;,&#34;1.0003305556540378&#34;,&#34;0.9991437132975184&#34;,&#34;0.9997206896584828&#34;,&#34;1.0003229307902617&#34;,&#34;1.0002174675069595&#34;,&#34;0.999925766541416&#34;,&#34;1.000708618241012&#34;,&#34;1.0010737689896891&#34;,&#34;1.0002632048681543&#34;,&#34;1.00097822584521&#34;,&#34;1.0002453605323327&#34;,&#34;1.0005499753502725&#34;,&#34;0.9999702733020642&#34;,&#34;0.9994598707479958&#34;,&#34;1.0012863570809547&#34;,&#34;1.0016448157620703&#34;,&#34;0.9996482331493484&#34;,&#34;1.0004215336032052&#34;,&#34;0.9999570213425627&#34;,&#34;0.9999224272643209&#34;,&#34;1.0007392056569566&#34;,&#34;1.000325844124763&#34;,&#34;1.0001333206640304&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;40191076559&#34;,&#34;btcPrice&#34;:&#34;0.000049879051852032&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46264937814&#34;,&#34;price&#34;:&#34;1.0001439253592908&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.15&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0003790781178878&#34;,&#34;0.9997290863175305&#34;,&#34;1.0003038765412497&#34;,&#34;0.9991408722230394&#34;,&#34;0.9997209463954263&#34;,&#34;1.0001156279108188&#34;,&#34;1.0002132589197983&#34;,&#34;0.999979672700525&#34;,&#34;1.0007058659518255&#34;,&#34;1.0009680461396826&#34;,&#34;1.0002125205262982&#34;,&#34;1.0008248585454766&#34;,&#34;1.0001965553835719&#34;,&#34;1.0005780931027144&#34;,&#34;1.0000088554796078&#34;,&#34;0.9994586243665149&#34;,&#34;1.0011869248897938&#34;,&#34;1.0015496148117664&#34;,&#34;0.9997673802296243&#34;,&#34;1.0003598578573154&#34;,&#34;1.0000778482427792&#34;,&#34;0.9998861638814902&#34;,&#34;1.0006873238669673&#34;,&#34;1.0002882569057026&#34;,&#34;1.0001093290939425&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3357548862&#34;,&#34;btcPrice&#34;:&#34;0.000049886558056014&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;41778239691&#34;,&#34;price&#34;:&#34;288.372850606221&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.62&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.0339632140167&#34;,&#34;293.22632610181876&#34;,&#34;293.9558805163323&#34;,&#34;295.03284994285843&#34;,&#34;297.1816835216467&#34;,&#34;296.57165154567053&#34;,&#34;296.508723433339&#34;,&#34;296.27500319415884&#34;,&#34;295.95929231412583&#34;,&#34;295.2368476142224&#34;,&#34;294.87128482644766&#34;,&#34;295.0512570831633&#34;,&#34;294.5306048069131&#34;,&#34;294.30050189031186&#34;,&#34;294.22403335151813&#34;,&#34;294.80827509690437&#34;,&#34;294.33033971155965&#34;,&#34;293.96591310440675&#34;,&#34;293.66576108995565&#34;,&#34;293.99310192770326&#34;,&#34;293.69072498915045&#34;,&#34;293.4540279331547&#34;,&#34;293.23188737664185&#34;,&#34;293.09086576852025&#34;,&#34;290.12424881390194&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;864595768&#34;,&#34;btcPrice&#34;:&#34;0.01438385875150679&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24922289815&#34;,&#34;price&#34;:&#34;0.4998596422677392&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.07&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4936121327589804&#34;,&#34;0.49360848838582033&#34;,&#34;0.49055029363897007&#34;,&#34;0.49224624716168&#34;,&#34;0.49591130268111816&#34;,&#34;0.4951932790046478&#34;,&#34;0.49595231887605623&#34;,&#34;0.5006001796445517&#34;,&#34;0.5025322706608095&#34;,&#34;0.4988268286009171&#34;,&#34;0.49511942477701776&#34;,&#34;0.4937997408415523&#34;,&#34;0.4938461715574201&#34;,&#34;0.4949672333116952&#34;,&#34;0.49671660295169745&#34;,&#34;0.4983157134968618&#34;,&#34;0.4984385599250301&#34;,&#34;0.4958643382230643&#34;,&#34;0.4954888154508337&#34;,&#34;0.4956388106133542&#34;,&#34;0.49687913330335365&#34;,&#34;0.49710524663432437&#34;,&#34;0.4967817423491458&#34;,&#34;0.4960523063301114&#34;,&#34;0.5002588730645078&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;1897470292&#34;,&#34;btcPrice&#34;:&#34;0.000024932688617681&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21378094996&#34;,&#34;price&#34;:&#34;0.9998341667790431&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.28&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.000400357879546&#34;,&#34;0.9997126067360349&#34;,&#34;1.0002864262312419&#34;,&#34;0.9990306013607333&#34;,&#34;0.9996281277025894&#34;,&#34;1.0001801913869788&#34;,&#34;1.000112080834013&#34;,&#34;0.9998221448047259&#34;,&#34;1.0006914671738822&#34;,&#34;1.0010002833226768&#34;,&#34;1.0001548975570813&#34;,&#34;1.0008893072028962&#34;,&#34;1.0001675248577555&#34;,&#34;1.0004436296308015&#34;,&#34;0.9998831620327592&#34;,&#34;0.9993790802417244&#34;,&#34;1.0011655146499898&#34;,&#34;1.0015608327721508&#34;,&#34;0.9996737479147666&#34;,&#34;1.0003874163381075&#34;,&#34;0.999855178764249&#34;,&#34;0.9997695857566036&#34;,&#34;1.0006363550917916&#34;,&#34;1.0003015517514349&#34;,&#34;1.0001110800082091&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6496557308&#34;,&#34;btcPrice&#34;:&#34;0.000049871107490346&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13375082160&#34;,&#34;price&#34;:&#34;0.4298943742278509&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.42939125650203785&#34;,&#34;0.43033129399842107&#34;,&#34;0.431078111896934&#34;,&#34;0.4318859878379686&#34;,&#34;0.4357131618197005&#34;,&#34;0.43568381169625015&#34;,&#34;0.4346962887724402&#34;,&#34;0.4350131875819571&#34;,&#34;0.43469738319003864&#34;,&#34;0.43326982424487304&#34;,&#34;0.43263774502568014&#34;,&#34;0.43191341474300415&#34;,&#34;0.4312921949359245&#34;,&#34;0.4311011590020075&#34;,&#34;0.4302280684331196&#34;,&#34;0.4319813231178509&#34;,&#34;0.43173383257478504&#34;,&#34;0.4303997167352433&#34;,&#34;0.429398559339474&#34;,&#34;0.4299648257425132&#34;,&#34;0.4297343398397519&#34;,&#34;0.42997828353732326&#34;,&#34;0.42937033740290426&#34;,&#34;0.42883620108710657&#34;,&#34;0.42920069115240905&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;747679271&#34;,&#34;btcPrice&#34;:&#34;0.000021442864485896&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11976043875&#34;,&#34;price&#34;:&#34;33.71428257698631&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.19&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.75977114711794&#34;,&#34;33.875549349957005&#34;,&#34;34.01919374746187&#34;,&#34;34.25583589027168&#34;,&#34;34.33192527709708&#34;,&#34;34.34811446907118&#34;,&#34;34.327771426896376&#34;,&#34;34.39163652190693&#34;,&#34;34.37437113302313&#34;,&#34;34.210536634835925&#34;,&#34;34.010295904098804&#34;,&#34;34.032297629030815&#34;,&#34;34.0205375439139&#34;,&#34;33.986450347226565&#34;,&#34;33.97284356925897&#34;,&#34;34.12322348136839&#34;,&#34;34.04818308388973&#34;,&#34;33.90841528770745&#34;,&#34;33.922236226998955&#34;,&#34;33.895084271212774&#34;,&#34;33.877508596833344&#34;,&#34;33.769632367031555&#34;,&#34;33.71898828195219&#34;,&#34;33.69001212339477&#34;,&#34;33.72267866886839&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;728230383&#34;,&#34;btcPrice&#34;:&#34;0.001681647483375454&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8490771840&#34;,&#34;price&#34;:&#34;0.06399881605101142&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.71&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06430001652573364&#34;,&#34;0.06437036408966565&#34;,&#34;0.06456880597204392&#34;,&#34;0.06502233408584714&#34;,&#34;0.06503812200415436&#34;,&#34;0.06503998592742274&#34;,&#34;0.06588520090979873&#34;,&#34;0.06601129659338578&#34;,&#34;0.06581176470778156&#34;,&#34;0.06553294673649296&#34;,&#34;0.06533678130300317&#34;,&#34;0.06510197364336227&#34;,&#34;0.06525813392333525&#34;,&#34;0.06507123735868817&#34;,&#34;0.06508747877233641&#34;,&#34;0.06537694106515178&#34;,&#34;0.06521416310707462&#34;,&#34;0.06486795280882116&#34;,&#34;0.06440018609785521&#34;,&#34;0.06431000551190193&#34;,&#34;0.06399099516985579&#34;,&#34;0.0639611688502269&#34;,&#34;0.06388198077385676&#34;,&#34;0.06396888900414123&#34;,&#34;0.06390412971383753&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;549013562&#34;,&#34;btcPrice&#34;:&#34;0.00000319222121086&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7359047093&#34;,&#34;price&#34;:&#34;0.8404891786387144&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.30&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8437744357312483&#34;,&#34;0.8509094697048541&#34;,&#34;0.8529940032792178&#34;,&#34;0.8540440777034858&#34;,&#34;0.8516241240942773&#34;,&#34;0.8496744646261335&#34;,&#34;0.8469999329838124&#34;,&#34;0.8481864165795252&#34;,&#34;0.8466077838956056&#34;,&#34;0.84420107235308&#34;,&#34;0.845768857513781&#34;,&#34;0.8474973485957346&#34;,&#34;0.8463925672110996&#34;,&#34;0.8432430183950218&#34;,&#34;0.8407816804410218&#34;,&#34;0.8419007497492077&#34;,&#34;0.8398864867524278&#34;,&#34;0.8393073071328305&#34;,&#34;0.8429567390022452&#34;,&#34;0.8430941255831178&#34;,&#34;0.8444119779861358&#34;,&#34;0.8446502533596543&#34;,&#34;0.8422100742264239&#34;,&#34;0.8398203812650741&#34;,&#34;0.8392859340943655&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;508406775&#34;,&#34;btcPrice&#34;:&#34;0.000041923078411489&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7337905156&#34;,&#34;price&#34;:&#34;6.3785000633196605&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.45&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.39825823489953&#34;,&#34;6.409513679699773&#34;,&#34;6.429741803717237&#34;,&#34;6.456004351045777&#34;,&#34;6.48959781266168&#34;,&#34;6.502842344430388&#34;,&#34;6.494975652303574&#34;,&#34;6.498153272584972&#34;,&#34;6.477193762524708&#34;,&#34;6.4749696116534&#34;,&#34;6.446783196251528&#34;,&#34;6.4451248697841494&#34;,&#34;6.445036089260377&#34;,&#34;6.436040246095806&#34;,&#34;6.435080457086081&#34;,&#34;6.463836456516857&#34;,&#34;6.450387542070514&#34;,&#34;6.421359237807177&#34;,&#34;6.391124134834344&#34;,&#34;6.389976567958392&#34;,&#34;6.385572049998837&#34;,&#34;6.392125200223458&#34;,&#34;6.382091060151221&#34;,&#34;6.386981587242469&#34;,&#34;6.371255606973179&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;218901130&#34;,&#34;btcPrice&#34;:&#34;0.000318155623056728&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6654002522&#34;,&#34;price&#34;:&#34;0.000011286461059515&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.56&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011388926295804&#34;,&#34;0.000011400691835227&#34;,&#34;0.000011433362145591&#34;,&#34;0.000011491345676996&#34;,&#34;0.000011523072429884&#34;,&#34;0.000011526229724601&#34;,&#34;0.000011561968127599&#34;,&#34;0.000011585318815413&#34;,&#34;0.000011497977586636&#34;,&#34;0.000011468707147471&#34;,&#34;0.000011434052857603&#34;,&#34;0.00001144032221974&#34;,&#34;0.000011461144205322&#34;,&#34;0.000011476554808705&#34;,&#34;0.000011469743005642&#34;,&#34;0.00001147197624755&#34;,&#34;0.000011424815330699&#34;,&#34;0.000011366708333454&#34;,&#34;0.0000113570498162&#34;,&#34;0.000011330129168691&#34;,&#34;0.000011283648128574&#34;,&#34;0.000011278387257469&#34;,&#34;0.000011289529854914&#34;,&#34;0.000011276233126799&#34;,&#34;0.000011273560500492&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;295884874&#34;,&#34;btcPrice&#34;:&#34;5.6296167e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6330102326&#34;,&#34;price&#34;:&#34;0.9999136316591463&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.12&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.0001442146345538&#34;,&#34;0.9995536933387662&#34;,&#34;0.9998892692241316&#34;,&#34;0.9989521525504824&#34;,&#34;0.9994530889305914&#34;,&#34;0.9997283495960755&#34;,&#34;0.9998553697654398&#34;,&#34;0.9995096259449162&#34;,&#34;1.00014999944705&#34;,&#34;1.000547118017383&#34;,&#34;1.0000224010848462&#34;,&#34;1.0003550198188038&#34;,&#34;1.0000223644977213&#34;,&#34;1.0001689023102156&#34;,&#34;0.9997500246036027&#34;,&#34;0.999188166117977&#34;,&#34;1.0005244452746045&#34;,&#34;1.0009465956605519&#34;,&#34;0.999923212227354&#34;,&#34;0.999943746062425&#34;,&#34;0.9998895246210896&#34;,&#34;0.9996584146724661&#34;,&#34;1.00032070114622&#34;,&#34;1.0001058587674057&#34;,&#34;0.9999037241650416&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;124698370&#34;,&#34;btcPrice&#34;:&#34;0.000049875071149229&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5777074397&#34;,&#34;price&#34;:&#34;0.06256558134968382&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.36&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06236865465429385&#34;,&#34;0.06246589991130288&#34;,&#34;0.06240843270681821&#34;,&#34;0.062249161574027316&#34;,&#34;0.06223099830897218&#34;,&#34;0.06264617941013605&#34;,&#34;0.06281452510294&#34;,&#34;0.06276275207762542&#34;,&#34;0.06268343841288901&#34;,&#34;0.06255691626086467&#34;,&#34;0.0624515709368335&#34;,&#34;0.062470443380712434&#34;,&#34;0.06256137344897823&#34;,&#34;0.06269756605100256&#34;,&#34;0.06269254530093321&#34;,&#34;0.06269809717602999&#34;,&#34;0.06270258509423554&#34;,&#34;0.06262935941097252&#34;,&#34;0.0625525372842027&#34;,&#34;0.0626080433578714&#34;,&#34;0.06263852382635865&#34;,&#34;0.06265458985596026&#34;,&#34;0.06258971581342093&#34;,&#34;0.06255323825419136&#34;,&#34;0.06256018276012307&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;339553441&#34;,&#34;btcPrice&#34;:&#34;0.000003120732353784&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5506331908&#34;,&#34;price&#34;:&#34;1363.1831262096398&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.91&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1349.13607829603&#34;,&#34;1351.4689477854226&#34;,&#34;1354.685548232379&#34;,&#34;1361.146588456366&#34;,&#34;1373.1112591782544&#34;,&#34;1375.4567308292258&#34;,&#34;1373.5021921077062&#34;,&#34;1374.5798088672896&#34;,&#34;1374.2047922199295&#34;,&#34;1370.3789875745763&#34;,&#34;1366.6984725193515&#34;,&#34;1364.4398969103008&#34;,&#34;1361.7692633130323&#34;,&#34;1360.874730475116&#34;,&#34;1360.5880536977058&#34;,&#34;1367.7933188873656&#34;,&#34;1371.0864182649937&#34;,&#34;1366.2849418001506&#34;,&#34;1363.6612621508384&#34;,&#34;1366.3897957603679&#34;,&#34;1362.6017418911797&#34;,&#34;1363.558194381478&#34;,&#34;1361.1032201925939&#34;,&#34;1358.1013179936974&#34;,&#34;1359.5832745179157&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;190296605&#34;,&#34;btcPrice&#34;:&#34;0.06801276462109211&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5412801667&#34;,&#34;price&#34;:&#34;6.970342314938424&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;3.30&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.7736642117361905&#34;,&#34;6.756076217414185&#34;,&#34;6.793449625987095&#34;,&#34;6.865859893412923&#34;,&#34;6.937483195481218&#34;,&#34;6.979515536920047&#34;,&#34;6.9478029429015224&#34;,&#34;6.9284625247560845&#34;,&#34;6.907914104712911&#34;,&#34;6.874769405900166&#34;,&#34;6.896114575710537&#34;,&#34;6.902438327868096&#34;,&#34;6.863039316865727&#34;,&#34;6.8298809342946445&#34;,&#34;6.841694456601706&#34;,&#34;6.90374298301861&#34;,&#34;6.8980780970926565&#34;,&#34;6.846666245892528&#34;,&#34;6.840143513460894&#34;,&#34;6.886346571294433&#34;,&#34;6.894919048207694&#34;,&#34;6.8980327967208135&#34;,&#34;6.897799219282073&#34;,&#34;6.917336871562214&#34;,&#34;6.9384106402636725&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;240553805&#34;,&#34;btcPrice&#34;:&#34;0.000347676347121293&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5075125889&#34;,&#34;price&#34;:&#34;17.140177883740314&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.60&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.254732588660875&#34;,&#34;17.31200366632601&#34;,&#34;17.356953304800275&#34;,&#34;17.445230081280297&#34;,&#34;17.540093125466566&#34;,&#34;17.549902978316823&#34;,&#34;17.521869854955458&#34;,&#34;17.57089756434244&#34;,&#34;17.511675802061724&#34;,&#34;17.428511702438602&#34;,&#34;17.401335012223097&#34;,&#34;17.367848226413336&#34;,&#34;17.336368659218273&#34;,&#34;17.319601875912156&#34;,&#34;17.320429202377582&#34;,&#34;17.375834229410586&#34;,&#34;17.37115155021162&#34;,&#34;17.337499378166246&#34;,&#34;17.29492516682681&#34;,&#34;17.27482970087828&#34;,&#34;17.236186499512122&#34;,&#34;17.23084707590994&#34;,&#34;17.187481717207028&#34;,&#34;17.155821443785648&#34;,&#34;17.14078782290297&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;253512052&#34;,&#34;btcPrice&#34;:&#34;0.000854941431334947&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4906795698&#34;,&#34;price&#34;:&#34;20047.65670389833&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.00&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20051.22405616085&#34;,&#34;20110.602103151356&#34;,&#34;20155.552573913872&#34;,&#34;20251.49133520362&#34;,&#34;20298.639411610195&#34;,&#34;20350.38567650615&#34;,&#34;20339.07972321146&#34;,&#34;20380.795072455694&#34;,&#34;20324.41856067999&#34;,&#34;20246.294276116678&#34;,&#34;20211.982370889044&#34;,&#34;20181.299321117534&#34;,&#34;20155.621076440202&#34;,&#34;20130.24398537466&#34;,&#34;20151.81371000324&#34;,&#34;20220.458796392188&#34;,&#34;20191.06461094672&#34;,&#34;20102.3711890372&#34;,&#34;20023.818445349818&#34;,&#34;20063.904548084807&#34;,&#34;20060.09333245677&#34;,&#34;20106.126030789226&#34;,&#34;20068.970588505534&#34;,&#34;20037.981397876472&#34;,&#34;20038.946703723883&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;40636617&#34;,&#34;btcPrice&#34;:&#34;0.9999646697716937&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4081058736&#34;,&#34;price&#34;:&#34;13.109745393055944&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.04&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.874689417804111&#34;,&#34;12.977240987750184&#34;,&#34;12.999694810987828&#34;,&#34;13.05809448077896&#34;,&#34;13.134456340172274&#34;,&#34;13.166373400713976&#34;,&#34;13.174046618107784&#34;,&#34;13.156595139367123&#34;,&#34;13.136832518684233&#34;,&#34;13.059151743839621&#34;,&#34;13.024245747988846&#34;,&#34;13.012560239822703&#34;,&#34;12.998975121153673&#34;,&#34;12.998577583467394&#34;,&#34;12.961451954944232&#34;,&#34;13.060564440903033&#34;,&#34;13.110658052250319&#34;,&#34;13.099438593619361&#34;,&#34;13.13330326447949&#34;,&#34;13.33452783192435&#34;,&#34;13.373831271270106&#34;,&#34;13.343650016008963&#34;,&#34;13.181674409038528&#34;,&#34;13.131683725387289&#34;,&#34;13.11536231838439&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;309996311&#34;,&#34;btcPrice&#34;:&#34;0.000653905960999872&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3936402224&#34;,&#34;price&#34;:&#34;15.643761032184168&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.08&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.560986349984056&#34;,&#34;15.561097044869294&#34;,&#34;15.520784658634735&#34;,&#34;15.569346159010081&#34;,&#34;15.638549620210085&#34;,&#34;15.735124066059186&#34;,&#34;15.725775504001712&#34;,&#34;15.757115892473582&#34;,&#34;15.718908551335334&#34;,&#34;15.673810075767081&#34;,&#34;15.65842199459123&#34;,&#34;15.651646315234636&#34;,&#34;15.638815307350377&#34;,&#34;15.638325526594082&#34;,&#34;15.630250194419004&#34;,&#34;15.770101867167902&#34;,&#34;15.772787444807776&#34;,&#34;15.726419071810144&#34;,&#34;15.730397527991796&#34;,&#34;15.706278363014619&#34;,&#34;15.644427965881071&#34;,&#34;15.661521309252834&#34;,&#34;15.65810007258811&#34;,&#34;15.657230878915703&#34;,&#34;15.653006930210385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;16331845&#34;,&#34;btcPrice&#34;:&#34;0.000780301087832049&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3816060260&#34;,&#34;price&#34;:&#34;53.84948369214034&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.88&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.290318948555985&#34;,&#34;54.34626044318356&#34;,&#34;54.51609336019526&#34;,&#34;54.71164008880007&#34;,&#34;54.84017873250239&#34;,&#34;54.85783258935826&#34;,&#34;54.84912409601398&#34;,&#34;54.79423800415394&#34;,&#34;54.77093043110981&#34;,&#34;54.48254700568355&#34;,&#34;54.35863553823271&#34;,&#34;54.35097944334183&#34;,&#34;54.422181211169935&#34;,&#34;54.4489516734391&#34;,&#34;54.48573164038176&#34;,&#34;54.566006895097175&#34;,&#34;54.60169376918578&#34;,&#34;54.434757779526166&#34;,&#34;54.23335179752326&#34;,&#34;54.413459080815954&#34;,&#34;54.21240080510803&#34;,&#34;54.29942643192169&#34;,&#34;54.14247458562991&#34;,&#34;54.048141904913244&#34;,&#34;53.830450120278314&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;414799436&#34;,&#34;btcPrice&#34;:&#34;0.002685978814028499&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3291898159&#34;,&#34;price&#34;:&#34;24.66056515734731&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.08&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.68367396586351&#34;,&#34;24.727036895780905&#34;,&#34;24.763295856196095&#34;,&#34;24.910218336026045&#34;,&#34;25.00389208839861&#34;,&#34;25.02149477638343&#34;,&#34;25.038245964336557&#34;,&#34;25.10263308087383&#34;,&#34;25.055084523451587&#34;,&#34;24.953428269092957&#34;,&#34;24.910919655194686&#34;,&#34;24.875936324284226&#34;,&#34;24.84671933295274&#34;,&#34;24.828862066050032&#34;,&#34;24.846952016930494&#34;,&#34;24.962693812346263&#34;,&#34;24.917387870404692&#34;,&#34;24.806139246634455&#34;,&#34;24.74429478499735&#34;,&#34;24.780282567891753&#34;,&#34;24.77215711531799&#34;,&#34;24.782999234672975&#34;,&#34;24.733584769696286&#34;,&#34;24.691015340268255&#34;,&#34;24.666234967252606&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;50721623&#34;,&#34;btcPrice&#34;:&#34;0.001230053679498362&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3275220951&#34;,&#34;price&#34;:&#34;28.15861108739772&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.09&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.570158653943103&#34;,&#34;27.588406181551&#34;,&#34;27.632000320786197&#34;,&#34;27.72407252402464&#34;,&#34;28.315134280524177&#34;,&#34;28.701663622553088&#34;,&#34;28.455510043787736&#34;,&#34;28.462425971003423&#34;,&#34;28.431530396764664&#34;,&#34;28.27063736534509&#34;,&#34;28.144183615836692&#34;,&#34;28.154520421670963&#34;,&#34;28.240843430286514&#34;,&#34;28.318006504862765&#34;,&#34;28.299833108837987&#34;,&#34;28.329928166122407&#34;,&#34;28.27078454554885&#34;,&#34;28.13957915693539&#34;,&#34;28.037422192263545&#34;,&#34;28.02538763544355&#34;,&#34;27.990684342238957&#34;,&#34;27.99587068353575&#34;,&#34;27.980180249457508&#34;,&#34;27.96831699810348&#34;,&#34;28.017446779311992&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;640535452&#34;,&#34;btcPrice&#34;:&#34;0.001404534038722036&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2707667553&#34;,&#34;price&#34;:&#34;148.90777553169121&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.91&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.0468911817187&#34;,&#34;146.24477782260104&#34;,&#34;146.1611566569247&#34;,&#34;146.98453497183345&#34;,&#34;147.5235053627857&#34;,&#34;147.81325448931747&#34;,&#34;148.28163857932623&#34;,&#34;149.09225665366174&#34;,&#34;147.89654979841282&#34;,&#34;145.94227441308016&#34;,&#34;145.47852845356343&#34;,&#34;145.43911678899732&#34;,&#34;145.13011985927878&#34;,&#34;145.01926185302602&#34;,&#34;145.05380463743765&#34;,&#34;145.5189388138254&#34;,&#34;144.94121932498405&#34;,&#34;144.55169371872742&#34;,&#34;144.03637609256356&#34;,&#34;144.0602822952893&#34;,&#34;143.9422537624223&#34;,&#34;144.01800973377962&#34;,&#34;144.85743594518297&#34;,&#34;145.90656965474264&#34;,&#34;146.43871992411874&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;133434528&#34;,&#34;btcPrice&#34;:&#34;0.00742742739389739&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2467767343&#34;,&#34;price&#34;:&#34;0.3517782161281549&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.3515342629988674&#34;,&#34;0.3521676081477334&#34;,&#34;0.35309919565030656&#34;,&#34;0.3541903724348078&#34;,&#34;0.3566526799226524&#34;,&#34;0.3568785361406288&#34;,&#34;0.356277927477052&#34;,&#34;0.35771179232442063&#34;,&#34;0.3576900736402804&#34;,&#34;0.35714880263121757&#34;,&#34;0.3558025051327707&#34;,&#34;0.3549060979115252&#34;,&#34;0.3544949322189096&#34;,&#34;0.35419673898063&#34;,&#34;0.3545814398327581&#34;,&#34;0.3560563698021784&#34;,&#34;0.35476940248868055&#34;,&#34;0.35303138884975377&#34;,&#34;0.3526138360299577&#34;,&#34;0.353297325772352&#34;,&#34;0.3530050986834627&#34;,&#34;0.3519348960977679&#34;,&#34;0.3512839084444219&#34;,&#34;0.35035540536790366&#34;,&#34;0.35085105792254034&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;144267788&#34;,&#34;btcPrice&#34;:&#34;0.000017546479018421&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2437405709&#34;,&#34;price&#34;:&#34;0.12063066323232836&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.44&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11886242818438897&#34;,&#34;0.11904460107249429&#34;,&#34;0.11897292310970312&#34;,&#34;0.11903996874083529&#34;,&#34;0.11937706226353863&#34;,&#34;0.11928353420436945&#34;,&#34;0.1193565730892674&#34;,&#34;0.11973240195034526&#34;,&#34;0.11981307931058192&#34;,&#34;0.11920048145769879&#34;,&#34;0.11897308489799317&#34;,&#34;0.11911213921537671&#34;,&#34;0.11882743355055038&#34;,&#34;0.11868474386838856&#34;,&#34;0.11878227754760867&#34;,&#34;0.11974550069912294&#34;,&#34;0.11958643330478903&#34;,&#34;0.11927337184798883&#34;,&#34;0.11957351041625688&#34;,&#34;0.11944049884817015&#34;,&#34;0.12009378998253879&#34;,&#34;0.12024109052539109&#34;,&#34;0.12017728479638659&#34;,&#34;0.12012660542021919&#34;,&#34;0.12022267745313032&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;220566302&#34;,&#34;btcPrice&#34;:&#34;0.000006016982588294&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2276566125&#34;,&#34;price&#34;:&#34;118.99631691356878&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.64&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.31973609743602&#34;,&#34;122.22980221659442&#34;,&#34;122.20905014823225&#34;,&#34;122.74951121547188&#34;,&#34;123.19407940957747&#34;,&#34;122.98427770012786&#34;,&#34;122.7489561074102&#34;,&#34;122.622367281349&#34;,&#34;122.2248259758892&#34;,&#34;121.53652687792291&#34;,&#34;121.05542080331115&#34;,&#34;121.08144019937376&#34;,&#34;121.3486844528348&#34;,&#34;121.35241663771652&#34;,&#34;121.4308975310673&#34;,&#34;121.83807088869149&#34;,&#34;121.79108869683151&#34;,&#34;121.38727041457742&#34;,&#34;120.77014246462569&#34;,&#34;120.9730955171752&#34;,&#34;120.81712651964756&#34;,&#34;120.67586343768751&#34;,&#34;120.35934093743896&#34;,&#34;119.33573062080143&#34;,&#34;118.92020484427697&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;236289638&#34;,&#34;btcPrice&#34;:&#34;0.005935462408600913&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2254967512&#34;,&#34;price&#34;:&#34;20043.97749206499&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.40&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20050.866782919587&#34;,&#34;20079.593668466954&#34;,&#34;20158.93074005341&#34;,&#34;20211.814480937664&#34;,&#34;20307.580914788625&#34;,&#34;20353.1967711348&#34;,&#34;20335.218938308455&#34;,&#34;20375.58916773032&#34;,&#34;20340.90091666203&#34;,&#34;20284.80368318787&#34;,&#34;20235.020272755173&#34;,&#34;20214.37272239842&#34;,&#34;20157.58477689183&#34;,&#34;20148.427911440165&#34;,&#34;20139.404745478332&#34;,&#34;20195.51476083255&#34;,&#34;20218.207717425983&#34;,&#34;20128.86850120113&#34;,&#34;20006.9744546404&#34;,&#34;20060.410623139804&#34;,&#34;20033.996371801375&#34;,&#34;20098.47310976815&#34;,&#34;20097.464012404307&#34;,&#34;20046.809041658624&#34;,&#34;20049.799901903058&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;24085498&#34;,&#34;btcPrice&#34;:&#34;1.0000463598965021&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2206818970&#34;,&#34;price&#34;:&#34;0.10972685957484773&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.20&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;0.10964137644253408&#34;,&#34;0.11000036549663396&#34;,&#34;0.11025327160010467&#34;,&#34;0.11070373939431584&#34;,&#34;0.11104511865941227&#34;,&#34;0.11109857702436873&#34;,&#34;0.1110924929009018&#34;,&#34;0.11126352122246669&#34;,&#34;0.11094331934275127&#34;,&#34;0.11059613120859749&#34;,&#34;0.11052423450494585&#34;,&#34;0.11037764443683885&#34;,&#34;0.11018324144957391&#34;,&#34;0.11015957429341776&#34;,&#34;0.11025941309951554&#34;,&#34;0.1107306596648452&#34;,&#34;0.11056541424952443&#34;,&#34;0.11033981054182589&#34;,&#34;0.11014982408569168&#34;,&#34;0.11018846762437533&#34;,&#34;0.11026378704001755&#34;,&#34;0.11036637137706824&#34;,&#34;0.11006396812568181&#34;,&#34;0.10976547166697294&#34;,&#34;0.10969235793422591&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;18387033&#34;,&#34;btcPrice&#34;:&#34;0.000005473107631502&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2206118169&#34;,&#34;price&#34;:&#34;3.6294130789874477&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.42&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;3.6761672965431966&#34;,&#34;3.690346882494526&#34;,&#34;3.694321108085478&#34;,&#34;3.7048560012992415&#34;,&#34;3.73751823983082&#34;,&#34;3.728316938499929&#34;,&#34;3.726590894963946&#34;,&#34;3.7324865567596524&#34;,&#34;3.7152125117728954&#34;,&#34;3.684688319254966&#34;,&#34;3.6728907302323908&#34;,&#34;3.6707256113983564&#34;,&#34;3.682858101631704&#34;,&#34;3.6816966205355786&#34;,&#34;3.6732422481738896&#34;,&#34;3.68742500998647&#34;,&#34;3.67949841043138&#34;,&#34;3.658086252545483&#34;,&#34;3.6466882303359083&#34;,&#34;3.653534815527586&#34;,&#34;3.6524651001872352&#34;,&#34;3.6566637162352977&#34;,&#34;3.6505578611908183&#34;,&#34;3.641624197517031&#34;,&#34;3.6360026668443743&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;202730034&#34;,&#34;btcPrice&#34;:&#34;0.000181032871053155&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1912395175&#34;,&#34;price&#34;:&#34;0.000290161158067028&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.78&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000297478449646947&#34;,&#34;0.000299529084347598&#34;,&#34;0.00030173904471774&#34;,&#34;0.000299746687090643&#34;,&#34;0.000298962325969473&#34;,&#34;0.000302229563415801&#34;,&#34;0.0003030758001857&#34;,&#34;0.000301535490436218&#34;,&#34;0.000300445667829273&#34;,&#34;0.000299094184910521&#34;,&#34;0.000295609729343043&#34;,&#34;0.00029451177987895&#34;,&#34;0.000296163406502654&#34;,&#34;0.000295896753590268&#34;,&#34;0.000296293813138895&#34;,&#34;0.00029712340206075&#34;,&#34;0.000296241802461865&#34;,&#34;0.000294833413425782&#34;,&#34;0.000295805632133273&#34;,&#34;0.000295448279840089&#34;,&#34;0.000294342506473691&#34;,&#34;0.000292052607134611&#34;,&#34;0.000290629002509443&#34;,&#34;0.000292037309457244&#34;,&#34;0.000292007407136324&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;118053677&#34;,&#34;btcPrice&#34;:&#34;1.4473058417e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1807723577&#34;,&#34;price&#34;:&#34;1.8077235769379718&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.13&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8196832340882974&#34;,&#34;1.8253360632832465&#34;,&#34;1.8285082236543482&#34;,&#34;1.8347555694945936&#34;,&#34;1.8381094917557752&#34;,&#34;1.833948476565528&#34;,&#34;1.8341444284523087&#34;,&#34;1.8382997009905768&#34;,&#34;1.8395788091068113&#34;,&#34;1.8309599664678795&#34;,&#34;1.8205198309645931&#34;,&#34;1.8134695201238413&#34;,&#34;1.8119386729956268&#34;,&#34;1.8082288357010967&#34;,&#34;1.8068009632735749&#34;,&#34;1.8188388540688198&#34;,&#34;1.8203819894312625&#34;,&#34;1.814524337055796&#34;,&#34;1.808721193963964&#34;,&#34;1.8196357521223283&#34;,&#34;1.815149328780377&#34;,&#34;1.8112776438372116&#34;,&#34;1.8108458436676627&#34;,&#34;1.8027262559586126&#34;,&#34;1.805119314397385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;12084190&#34;,&#34;btcPrice&#34;:&#34;0.00009016812968968&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1767953502&#34;,&#34;price&#34;:&#34;1.706189443694046&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.26&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6890181082125528&#34;,&#34;1.6914682243282655&#34;,&#34;1.6953510291771732&#34;,&#34;1.7032242512223692&#34;,&#34;1.7136242682184002&#34;,&#34;1.7136009177534397&#34;,&#34;1.7149865876802517&#34;,&#34;1.7184074490109524&#34;,&#34;1.710995334162153&#34;,&#34;1.7048864523565708&#34;,&#34;1.699721441021863&#34;,&#34;1.7003688832097956&#34;,&#34;1.6968447607894448&#34;,&#34;1.6929234664355564&#34;,&#34;1.692450465901943&#34;,&#34;1.7010313056523052&#34;,&#34;1.6985550988885165&#34;,&#34;1.6893705490937398&#34;,&#34;1.6866645696902811&#34;,&#34;1.7019443099317626&#34;,&#34;1.7014230772153076&#34;,&#34;1.7069133070811424&#34;,&#34;1.7033611748224882&#34;,&#34;1.6994360137640887&#34;,&#34;1.704400633762173&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;69926340&#34;,&#34;btcPrice&#34;:&#34;0.000085103670161097&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1725996262&#34;,&#34;price&#34;:&#34;17.259962623670035&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.03&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.076100017021975&#34;,&#34;17.06662658749615&#34;,&#34;17.23481897642682&#34;,&#34;17.392304714899172&#34;,&#34;17.34806076924321&#34;,&#34;17.37896364967073&#34;,&#34;17.3987048654455&#34;,&#34;17.64170122029659&#34;,&#34;17.57215127384117&#34;,&#34;17.43018850760622&#34;,&#34;17.342435916635672&#34;,&#34;17.445574853391744&#34;,&#34;17.32297480082281&#34;,&#34;17.37509972478323&#34;,&#34;17.34525419003646&#34;,&#34;17.409372532584655&#34;,&#34;17.389133405821546&#34;,&#34;17.35036829752898&#34;,&#34;17.427069919455597&#34;,&#34;17.552044170794996&#34;,&#34;17.412493725255267&#34;,&#34;17.349458429441366&#34;,&#34;17.146992959728287&#34;,&#34;17.252120262541386&#34;,&#34;17.264212303383914&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;19832838&#34;,&#34;btcPrice&#34;:&#34;0.000860915853391649&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1632153006&#34;,&#34;price&#34;:&#34;5.553293070555647&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.38&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.56243119343507&#34;,&#34;5.567298776850595&#34;,&#34;5.576308807839807&#34;,&#34;5.601722240721692&#34;,&#34;5.625170729423998&#34;,&#34;5.620904303320557&#34;,&#34;5.636315942124946&#34;,&#34;5.635348964222284&#34;,&#34;5.621159554675177&#34;,&#34;5.60335716785942&#34;,&#34;5.5905571062639625&#34;,&#34;5.592369569284194&#34;,&#34;5.578504466675582&#34;,&#34;5.569698214994045&#34;,&#34;5.57106966286358&#34;,&#34;5.5871830930712845&#34;,&#34;5.58594625512426&#34;,&#34;5.567567471367906&#34;,&#34;5.557070809165411&#34;,&#34;5.564056973722409&#34;,&#34;5.560812558868851&#34;,&#34;5.555371588027569&#34;,&#34;5.5431943077677825&#34;,&#34;5.540294464973471&#34;,&#34;5.542380071855275&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;137601011&#34;,&#34;btcPrice&#34;:&#34;0.000276994810588701&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1579574894&#34;,&#34;price&#34;:&#34;6.014970665776294&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.15&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.0162195206336015&#34;,&#34;6.027382655786574&#34;,&#34;6.024819723237437&#34;,&#34;6.039340191092633&#34;,&#34;6.06724228192398&#34;,&#34;6.084822176339837&#34;,&#34;6.12213244622854&#34;,&#34;6.122207846967171&#34;,&#34;6.115223803839146&#34;,&#34;6.090144995430115&#34;,&#34;6.059958922242473&#34;,&#34;6.054607074054347&#34;,&#34;6.044824998176658&#34;,&#34;6.039684832886364&#34;,&#34;6.031722431559297&#34;,&#34;6.051848135596568&#34;,&#34;6.052505386943968&#34;,&#34;6.039004021283348&#34;,&#34;6.03094716124407&#34;,&#34;6.0282463753416&#34;,&#34;6.032921444329065&#34;,&#34;6.04632010848593&#34;,&#34;6.041115706175561&#34;,&#34;6.045998924171826&#34;,&#34;6.0229305076806545&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;38865516&#34;,&#34;btcPrice&#34;:&#34;0.000300023002405056&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1572728539&#34;,&#34;price&#34;:&#34;0.023557685371196242&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.75&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.0237501279975899&#34;,&#34;0.023800623235562788&#34;,&#34;0.02386182467215722&#34;,&#34;0.023973179564354224&#34;,&#34;0.024039808529594694&#34;,&#34;0.024056225110206598&#34;,&#34;0.02401908035553596&#34;,&#34;0.02404102526204194&#34;,&#34;0.02399624253894211&#34;,&#34;0.023865905918825207&#34;,&#34;0.023792587646072907&#34;,&#34;0.023839365677651318&#34;,&#34;0.02381560283772684&#34;,&#34;0.02375080527252874&#34;,&#34;0.023755408145521056&#34;,&#34;0.02387716977416547&#34;,&#34;0.02387351543491939&#34;,&#34;0.023763817483126306&#34;,&#34;0.023691552163897643&#34;,&#34;0.023726104965078293&#34;,&#34;0.02368589760998112&#34;,&#34;0.023671062742535463&#34;,&#34;0.023601726034422614&#34;,&#34;0.0235570377718252&#34;,&#34;0.0235469112210421&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;71397619&#34;,&#34;btcPrice&#34;:&#34;0.00000117504272049&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1553521920&#34;,&#34;price&#34;:&#34;4.671050346324434&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.16&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.660082859245468&#34;,&#34;4.665507699491085&#34;,&#34;4.669686398275825&#34;,&#34;4.704354056302064&#34;,&#34;4.729879002222916&#34;,&#34;4.714593691596935&#34;,&#34;4.7230722097715105&#34;,&#34;4.727203946438871&#34;,&#34;4.714055794424472&#34;,&#34;4.703283518317288&#34;,&#34;4.699762821774249&#34;,&#34;4.700438661119112&#34;,&#34;4.691700450917038&#34;,&#34;4.677135351952703&#34;,&#34;4.694429858732558&#34;,&#34;4.721898404666295&#34;,&#34;4.72192706714792&#34;,&#34;4.711492514608389&#34;,&#34;4.722961417487937&#34;,&#34;4.727350513894986&#34;,&#34;4.726777756847048&#34;,&#34;4.730691546772397&#34;,&#34;4.723894121828546&#34;,&#34;4.720900237522959&#34;,&#34;4.694323412913096&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;69066093&#34;,&#34;btcPrice&#34;:&#34;0.000232989091245811&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1535034674&#34;,&#34;price&#34;:&#34;0.6998105202178926&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.42&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.7016494769558138&#34;,&#34;0.7013306881258784&#34;,&#34;0.7024614313806439&#34;,&#34;0.7044272163104102&#34;,&#34;0.706472351768559&#34;,&#34;0.7093918654850726&#34;,&#34;0.7108366867405783&#34;,&#34;0.7107953770862832&#34;,&#34;0.7099623704106002&#34;,&#34;0.7073510016314243&#34;,&#34;0.7053811315549995&#34;,&#34;0.7072193110953995&#34;,&#34;0.7050915198697436&#34;,&#34;0.7044747588216688&#34;,&#34;0.7041160697442599&#34;,&#34;0.7066206655413716&#34;,&#34;0.7058549946852882&#34;,&#34;0.7032486369948753&#34;,&#34;0.7012876549332069&#34;,&#34;0.7009747852786251&#34;,&#34;0.700473849406315&#34;,&#34;0.7005982029037023&#34;,&#34;0.7002369574369308&#34;,&#34;0.7006334207984222&#34;,&#34;0.7000127772948245&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;113001150&#34;,&#34;btcPrice&#34;:&#34;0.000034906114270022&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1529701789&#34;,&#34;price&#34;:&#34;0.7648508946257417&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.82&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7860619259860426&#34;,&#34;0.7859435779761835&#34;,&#34;0.7861918029620322&#34;,&#34;0.7917396985406836&#34;,&#34;0.7933727507309073&#34;,&#34;0.7916402869669651&#34;,&#34;0.7935301886412963&#34;,&#34;0.7934006370508817&#34;,&#34;0.7896677909111062&#34;,&#34;0.786328322377868&#34;,&#34;0.7828512102910562&#34;,&#34;0.7827849158908187&#34;,&#34;0.7815399732777862&#34;,&#34;0.7772118263855671&#34;,&#34;0.7746419330272937&#34;,&#34;0.7799681155884691&#34;,&#34;0.777981466209664&#34;,&#34;0.7739045575146072&#34;,&#34;0.7718550460057184&#34;,&#34;0.7715939215456447&#34;,&#34;0.7695383673672498&#34;,&#34;0.7673191324882311&#34;,&#34;0.7657534786224457&#34;,&#34;0.764881660541454&#34;,&#34;0.7646092366582135&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;39160980&#34;,&#34;btcPrice&#34;:&#34;0.000038150287765068&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1412205915&#34;,&#34;price&#34;:&#34;0.05800578172077061&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.49&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.05770823380663813&#34;,&#34;0.05774903033415054&#34;,&#34;0.057915572884848006&#34;,&#34;0.05810678934296818&#34;,&#34;0.05824109880306974&#34;,&#34;0.05837365821928798&#34;,&#34;0.058391844857850296&#34;,&#34;0.058420669824922486&#34;,&#34;0.058284382479036986&#34;,&#34;0.05817173526970868&#34;,&#34;0.05807921716077961&#34;,&#34;0.058157030241846555&#34;,&#34;0.05809696154952601&#34;,&#34;0.05804430834562561&#34;,&#34;0.058079013279903904&#34;,&#34;0.058270287529447726&#34;,&#34;0.05828744692577993&#34;,&#34;0.05819030965298005&#34;,&#34;0.05799510351002881&#34;,&#34;0.05801850162696806&#34;,&#34;0.05804288093820356&#34;,&#34;0.05809254408384736&#34;,&#34;0.05803413483043568&#34;,&#34;0.057982852173679544&#34;,&#34;0.05799862984287226&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;47303997&#34;,&#34;btcPrice&#34;:&#34;0.000002893292379253&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1359852507&#34;,&#34;price&#34;:&#34;1.0013157341865748&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;0.9998387203956588&#34;,&#34;0.9991795416493741&#34;,&#34;0.9995865702781206&#34;,&#34;0.9984005488287919&#34;,&#34;0.9990889387633427&#34;,&#34;0.9992832524161939&#34;,&#34;0.9995431951063479&#34;,&#34;0.9992818968259785&#34;,&#34;0.9999311001849419&#34;,&#34;1.0002320414176233&#34;,&#34;0.9996418223412398&#34;,&#34;1.0001187705349235&#34;,&#34;0.9995079927133396&#34;,&#34;0.999782374902935&#34;,&#34;0.999308877507305&#34;,&#34;0.9988846870195152&#34;,&#34;1.0005152287641716&#34;,&#34;1.0008340522704022&#34;,&#34;0.9994436410988572&#34;,&#34;0.9996849217788387&#34;,&#34;0.9995211220531371&#34;,&#34;0.999211197536607&#34;,&#34;0.9999983085146361&#34;,&#34;0.999769500498533&#34;,&#34;1.0011860473290413&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;6816224&#34;,&#34;btcPrice&#34;:&#34;0.0000499450071528&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1353673348&#34;,&#34;price&#34;:&#34;138.4515366225178&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.55&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;136.7723467133241&#34;,&#34;137.81098287130007&#34;,&#34;138.04298230548113&#34;,&#34;138.87720276266452&#34;,&#34;139.1125352948242&#34;,&#34;139.0565202511056&#34;,&#34;139.15754518214834&#34;,&#34;138.81990972517082&#34;,&#34;137.89167052928534&#34;,&#34;137.45970305588784&#34;,&#34;137.8392892605069&#34;,&#34;139.3980081209242&#34;,&#34;138.9594762558207&#34;,&#34;139.35956951767986&#34;,&#34;139.76224675334996&#34;,&#34;140.73346306408735&#34;,&#34;139.70014562219615&#34;,&#34;139.58102151134608&#34;,&#34;139.19177605867037&#34;,&#34;139.65458123164169&#34;,&#34;139.17824474960636&#34;,&#34;139.1901615972891&#34;,&#34;138.83319330338816&#34;,&#34;138.1218448902609&#34;,&#34;138.15277303739376&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;91114375&#34;,&#34;btcPrice&#34;:&#34;0.006905876688879963&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1315560385&#34;,&#34;price&#34;:&#34;55.68031129283641&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.67&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;54.447577507868715&#34;,&#34;54.128375568181134&#34;,&#34;54.23440566519872&#34;,&#34;54.73707935361438&#34;,&#34;55.29878160930527&#34;,&#34;55.12497748150301&#34;,&#34;55.42130584548864&#34;,&#34;55.15246246213931&#34;,&#34;55.040118775249475&#34;,&#34;54.79984173940808&#34;,&#34;54.611754004068196&#34;,&#34;54.73084890510059&#34;,&#34;55.07467359664748&#34;,&#34;55.12258904806393&#34;,&#34;55.12232719822051&#34;,&#34;55.10748540691841&#34;,&#34;55.01733359597467&#34;,&#34;54.876885804473424&#34;,&#34;54.85576050348866&#34;,&#34;55.096674446643746&#34;,&#34;55.35611005385607&#34;,&#34;54.96784781952569&#34;,&#34;54.84449264613283&#34;,&#34;54.95034295425699&#34;,&#34;55.112649002423744&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;56551571&#34;,&#34;btcPrice&#34;:&#34;0.002777299358079064&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1298765552&#34;,&#34;price&#34;:&#34;1.4300647644749105&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.35&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.4215338154290353&#34;,&#34;1.425785384185857&#34;,&#34;1.4279580637852494&#34;,&#34;1.4343164461157478&#34;,&#34;1.44533506798751&#34;,&#34;1.4458980149471825&#34;,&#34;1.442887292689709&#34;,&#34;1.4491458802390045&#34;,&#34;1.4448918253453362&#34;,&#34;1.4395360524680738&#34;,&#34;1.4357054965075182&#34;,&#34;1.436366388066666&#34;,&#34;1.4339651090330499&#34;,&#34;1.4334495267586773&#34;,&#34;1.4333504141935083&#34;,&#34;1.4389840361204465&#34;,&#34;1.4379456439736016&#34;,&#34;1.4315401694215406&#34;,&#34;1.4240153029007887&#34;,&#34;1.4240927210678032&#34;,&#34;1.4220389629012662&#34;,&#34;1.4290008245398644&#34;,&#34;1.4312652127406216&#34;,&#34;1.4310909189590104&#34;,&#34;1.4306725904273427&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;39973056&#34;,&#34;btcPrice&#34;:&#34;0.000071330742594082&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1281111260&#34;,&#34;price&#34;:&#34;0.21564361283618286&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.44&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.2154110356391449&#34;,&#34;0.21556395298813918&#34;,&#34;0.21654088100155322&#34;,&#34;0.21734996911672455&#34;,&#34;0.21877239367594722&#34;,&#34;0.21947482492922862&#34;,&#34;0.21980181027276333&#34;,&#34;0.21907182102411207&#34;,&#34;0.21837999474902092&#34;,&#34;0.2179201134075193&#34;,&#34;0.21682795818287987&#34;,&#34;0.21600225868090728&#34;,&#34;0.21587704160172458&#34;,&#34;0.2158448062065273&#34;,&#34;0.21568131629647883&#34;,&#34;0.21628666481515962&#34;,&#34;0.21575577092565493&#34;,&#34;0.21492437995400548&#34;,&#34;0.21514404501911413&#34;,&#34;0.2171108493305216&#34;,&#34;0.21771656940310347&#34;,&#34;0.21679986568652215&#34;,&#34;0.21607273994568685&#34;,&#34;0.21599406892348155&#34;,&#34;0.216016823604864&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;230327611&#34;,&#34;btcPrice&#34;:&#34;0.000010756169525597&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1273362601&#34;,&#34;price&#34;:&#34;0.8492083368987202&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.45&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8587964523939258&#34;,&#34;0.8597445619216338&#34;,&#34;0.8611496857436736&#34;,&#34;0.865552155362601&#34;,&#34;0.8666655073914699&#34;,&#34;0.8666063461880543&#34;,&#34;0.8661421792463039&#34;,&#34;0.8670202524108236&#34;,&#34;0.8645275388953965&#34;,&#34;0.8601521201043011&#34;,&#34;0.8593695662980281&#34;,&#34;0.8662535514126233&#34;,&#34;0.8588847882234059&#34;,&#34;0.8544149170251873&#34;,&#34;0.8528484459196816&#34;,&#34;0.8567742977148085&#34;,&#34;0.8559971556239261&#34;,&#34;0.8526369746427614&#34;,&#34;0.8503963749700182&#34;,&#34;0.8514893353210455&#34;,&#34;0.8513642787546029&#34;,&#34;0.8508505323793061&#34;,&#34;0.8483933250963328&#34;,&#34;0.8475209589259349&#34;,&#34;0.8482538011775931&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;76483572&#34;,&#34;btcPrice&#34;:&#34;0.000042357984612195&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1216992139&#34;,&#34;price&#34;:&#34;1.5130652728504481&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.27&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.514949369280686&#34;,&#34;1.5184328905530695&#34;,&#34;1.5246699575717297&#34;,&#34;1.5386072083468705&#34;,&#34;1.5536094881641007&#34;,&#34;1.5570507422780526&#34;,&#34;1.5627604927137266&#34;,&#34;1.5612721472754483&#34;,&#34;1.5639154910163686&#34;,&#34;1.549373162283526&#34;,&#34;1.5394363442551757&#34;,&#34;1.5413748243293799&#34;,&#34;1.5406687905041778&#34;,&#34;1.5536997118197664&#34;,&#34;1.5585509390347834&#34;,&#34;1.5605461378658754&#34;,&#34;1.556322526404288&#34;,&#34;1.5432139594119398&#34;,&#34;1.527711427666444&#34;,&#34;1.5295360489082588&#34;,&#34;1.5251991365229256&#34;,&#34;1.523882390305484&#34;,&#34;1.5152199119209957&#34;,&#34;1.5079084095454254&#34;,&#34;1.5059207760888258&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;8936326&#34;,&#34;btcPrice&#34;:&#34;0.000075470756420859&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1158011402&#34;,&#34;price&#34;:&#34;1.1714655273717414&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.17&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.1695001042910693&#34;,&#34;1.1712804054845907&#34;,&#34;1.1741562139239061&#34;,&#34;1.1794010183679478&#34;,&#34;1.1847650307406867&#34;,&#34;1.1855240685834143&#34;,&#34;1.1866371525249342&#34;,&#34;1.1885970359357818&#34;,&#34;1.1869956333747422&#34;,&#34;1.1822077005037634&#34;,&#34;1.1770242148628085&#34;,&#34;1.17614591514241&#34;,&#34;1.1773458464363997&#34;,&#34;1.1770861707666584&#34;,&#34;1.1811474861902838&#34;,&#34;1.1833592012519114&#34;,&#34;1.1818251357201783&#34;,&#34;1.1782503602022067&#34;,&#34;1.176960097898779&#34;,&#34;1.1767921922729265&#34;,&#34;1.1759604894059537&#34;,&#34;1.1750064515228658&#34;,&#34;1.1729163746108195&#34;,&#34;1.170358956437112&#34;,&#34;1.1692075076471242&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;216574047&#34;,&#34;btcPrice&#34;:&#34;0.000058431973199113&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success BTC 20048.365017211556 Icon Url: https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg Rank Url: https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc ETH 1363.7268444859621 Icon Url: https://cdn.coinranking.com/rk4RKHOuW/eth.svg Rank Url: https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth USDT 0.9999934382419505 Icon Url: https://cdn.coinranking.com/mgHqwlCLj/usdt.svg Rank Url: https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt USDC 1.0001439253592908 Icon Url: https://cdn.coinranking.com/jkDf8sQbY/usdc.svg Rank Url: https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc BNB 288.372850606221 Icon Url: https://cdn.coinranking.com/B1N19L_dZ/bnb.svg Rank Url: https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb XRP 0.4998596422677392 Icon Url: https://cdn.coinranking.com/B1oPuTyfX/xrp.svg Rank Url: https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp BUSD 0.9998341667790431 Icon Url: https://cdn.coinranking.com/6SJHRfClq/busd.svg Rank Url: https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd ADA 0.4298943742278509 Icon Url: https://cdn.coinranking.com/ryY28nXhW/ada.svg Rank Url: https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada SOL 33.71428257698631 Icon Url: https://cdn.coinranking.com/yvUG4Qex5/solana.svg Rank Url: https://coinranking.com/coin/zNZHO_Sjf+solana-sol DOGE 0.06399881605101142 Icon Url: https://cdn.coinranking.com/H1arXIuOZ/doge.svg Rank Url: https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge MATIC 0.8404891786387144 Icon Url: https://cdn.coinranking.com/WulYRq14o/polygon.png Rank Url: https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic DOT 6.3785000633196605 Icon Url: https://cdn.coinranking.com/RsljYqnbu/polkadot.svg Rank Url: https://coinranking.com/coin/25W7FG7om+polkadot-dot SHIB 0.000011286461059515 Icon Url: https://cdn.coinranking.com/D69LfI-tm/shib.png Rank Url: https://coinranking.com/coin/xz24e0BjL+shibainu-shib DAI 0.9999136316591463 Icon Url: https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg Rank Url: https://coinranking.com/coin/MoTuySvg7+dai-dai TRX 0.06256558134968382 Icon Url: https://cdn.coinranking.com/behejNqQs/trx.svg Rank Url: https://coinranking.com/coin/qUhEFk1I61atv+tron-trx WETH 1363.1831262096398 Icon Url: https://cdn.coinranking.com/KIviQyZlt/weth.svg Rank Url: https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth UNI 6.970342314938424 Icon Url: https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48 Rank Url: https://coinranking.com/coin/_H5FVG9iW+uniswap-uni AVAX 17.140177883740314 Icon Url: https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png Rank Url: https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax WBTC 20047.65670389833 Icon Url: https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg Rank Url: https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc ATOM 13.109745393055944 Icon Url: https://cdn.coinranking.com/HJzHboruM/atom.svg Rank Url: https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom OKB 15.643761032184168 Icon Url: https://cdn.coinranking.com/xcZdYtX6E/okx.png Rank Url: https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb LTC 53.84948369214034 Icon Url: https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg Rank Url: https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc FTT 24.66056515734731 Icon Url: https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg Rank Url: https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt ETC 28.15861108739772 Icon Url: https://cdn.coinranking.com/rJfyor__W/etc.svg Rank Url: https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc XMR 148.90777553169121 Icon Url: https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg Rank Url: https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr ALGO 0.3517782161281549 Icon Url: https://cdn.coinranking.com/lzbmCkUGB/algo.svg Rank Url: https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo XLM 0.12063066323232836 Icon Url: https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg Rank Url: https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm BCH 118.99631691356878 Icon Url: https://cdn.coinranking.com/By8ziihX7/bch.svg Rank Url: https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch BTCB 20043.97749206499 Icon Url: https://cdn.coinranking.com/Swr_SeZio/4023.png Rank Url: https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb CRO 0.10972685957484773 Icon Url: https://cdn.coinranking.com/2o91jm73M/cro.svg Rank Url: https://coinranking.com/coin/65PHZTpmE55b+cronos-cro NEAR 3.6294130789874477 Icon Url: https://cdn.coinranking.com/Cth83dCnl/near.png Rank Url: https://coinranking.com/coin/DCrsaMv68+nearprotocol-near LUNC 0.000290161158067028 Icon Url: https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg Rank Url: https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc WEMIX 1.8077235769379718 Icon Url: https://cdn.coinranking.com/1N84MQsoO/7548.png Rank Url: https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix FLOW 1.706189443694046 Icon Url: https://cdn.coinranking.com/xh8X8QBss/flow.png Rank Url: https://coinranking.com/coin/QQ0NCmjVq+flow-flow ENS 17.259962623670035 Icon Url: https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png Rank Url: https://coinranking.com/coin/SbWqqTui-+energyswap-ens FIL 5.553293070555647 Icon Url: https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48 Rank Url: https://coinranking.com/coin/ymQub4fuB+filecoin-fil ICP 6.014970665776294 Icon Url: https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png Rank Url: https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp VET 0.023557685371196242 Icon Url: https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg Rank Url: https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet CAKE 4.671050346324434 Icon Url: https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png Rank Url: https://coinranking.com/coin/ncYFcP709+pancakeswap-cake MANA 0.6998105202178926 Icon Url: https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg Rank Url: https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana IMX 0.7648508946257417 Icon Url: https://cdn.coinranking.com/naRGT2Y_X/10603.png Rank Url: https://coinranking.com/coin/Z96jIvLU7+immutablex-imx HBAR 0.05800578172077061 Icon Url: https://cdn.coinranking.com/dSCnSLilQ/hedera.svg Rank Url: https://coinranking.com/coin/jad286TjB+hedera-hbar FRAX 1.0013157341865748 Icon Url: https://cdn.coinranking.com/BpVNCX-NM/frax.png Rank Url: https://coinranking.com/coin/KfWtaeV1W+frax-frax QNT 138.4515366225178 Icon Url: https://cdn.coinranking.com/a-i9Dl392/quant.png Rank Url: https://coinranking.com/coin/bauj_21eYVwso+quant-qnt EGLD 55.68031129283641 Icon Url: https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg Rank Url: https://coinranking.com/coin/omwkOTglq+elrond-egld XTZ 1.4300647644749105 Icon Url: https://cdn.coinranking.com/HkLUdilQ7/xtz.svg Rank Url: https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz CHZ 0.21564361283618286 Icon Url: https://cdn.coinranking.com/gTsOlSnwR/4066.png Rank Url: https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz SAND 0.8492083368987202 Icon Url: https://cdn.coinranking.com/kd_vwOcnI/sandbox.png Rank Url: https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand LDO 1.5130652728504481 Icon Url: https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png Rank Url: https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo EOS 1.1714655273717414 Icon Url: https://cdn.coinranking.com/PqOYrWSje/eos2.svg Rank Url: https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "College Board Notes",
            "content": "Computing Innovations (categories) . Applications (games, social media, business, productivity) | Physical Devices (computers, smartphones, tablets, Smart “things”, wearables) | Systems (E-commerce, cloud services, E-mail) not local machine | . essential questions: Why does the computing innovation exist? What problems does it solve? . Inputs Types . tactile | audio | visual | text What types of inputs do your devices accept? . | Most programs are written in an event driven enviornment | input usually affects the output (mouse clicks, mouse clicks, screen taps/swipes, physical button clicks, keyboard entries, audio trigger) | outputs produced by device (visual, audio, tactle, text) | . Action triggers an event . action may be initiated by user/another program or device | program “jumps” to code segment accoording to event | code segment is executed | output is triggered by code segment | . What is a program? . program = collection of statements | statement = a single command | group of statements is called a code statement | code segments are executed accoording to the rules of the programming lang | a pragram is often reffered to as software | . Developing a Program . developed with a specific purpose in mind | developers follow specific steps and stick to their plan | sometimes is more exploratory than anything | . How is a program developed? . determine requirements of program | understand the constraints | understand the user concerns/intrests | brianstorm | storyboard program | plan user experience | lay out user interface | organize into modules | develop testing strategy | make prototype | test, test test (at all levels) | reflect after testing | . Comments . allows programmers to write text within program (without affecting program) | comments are for programmers to read | helpful in collabortation | provide credit to those who deserve it in your program | use comments to give credit for specific parts | if you use someone else’s code, give credit | . Program Documentation . describe overall program | list program specifications | describe funtions/procedures/methods within code | describe specific code segments | describe the development of program | how other programs may interact with program | list of contributers/authors of program | . . Dificulties: . I need to take my time when reading the questions and make sure I nderstand the parameters | I need to study the different types of inputs, outputs and functions | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/notes",
            "relUrl": "/collegeboard/notes",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter c is the 3 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? order = [] while True: #use a while loop to promt customer item = input(&quot;Please select an item from the menu&quot;) if item == &quot;&quot;: #allows program to stop promting customer if they click enter break else: order.append(item) #if they don&#39;t click enter and stop the program, it adds the new item onto the order print(order) for v in order: total = total + menu[v] #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 [&#39;fries&#39;, &#39;burger&#39;] 5.98 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Scrum Process",
            "content": "My Group’s Scrum Process . . First, my group will meet and discuss the directions given to us. We will then assign the work to our roles. During the sprint, we will continue to meet daily to discuss our progress. We will also continue to use our scrum board on Github to track our progress and what we need to get done. | . Our Scrum Board .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/AgileMethodology/scrumprocess",
            "relUrl": "/AgileMethodology/scrumprocess",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Group Using Collaboration",
            "content": "Think-Pair-Share Collaboration . My group came together and used this method of collaboration in order to: . get insight and knowledge from our different backgrounds/understandings | double check our work for requirements/errors | give feedback and improve our projects | to help when needed! | . Our Shared Google Doc .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/collaboration/1",
            "relUrl": "/collaboration/1",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Tool Checks",
            "content": "Versions of Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Packages of Conda Check . conda list . # packages in environment at /home/alexac54767/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/alexac54767/.local/share/jupyter/kernels/bash javascript /home/alexac54767/.local/share/jupyter/kernels/javascript python3 /home/alexac54767/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . python3 /home/alexac54767/.local/share/jupyter/kernels/python3 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/toolchecks",
            "relUrl": "/notebooks/toolchecks",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Collaboration Video Notes",
            "content": "Goals: . Explain how computing innovations are improved through collaboration. Demonstrate effective interpersonal skills during collaboration. Explain how computing innovations are improved through collaboration. Explain hoe computing innovations are developed by groups of people. . Collaboration Importance . Collaboration is essential in everyday life | Facebook (very successful tech company) says “Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it.” | To create the new and improved Super Mario Brothers, 2 partners listened to each other and used eachother’s ideas to create an even better version | interpersonal skills learned through collaboration: communication, consensus building, conflict resolution, negotiation | . How to Collborate in APCSP . Pair programming (2 programmers): “the driver” writes program code while “the observer/pointer/navigator” reviews each line of program code as it is typed in | Think-Pair-Share: students think through a problem alone, pair with a partner to share ideas, then share results with the class | Leave comments in your code: communicate to your partner(s), communicate to yourself, acknowleedge code segments/media from other sources, differentiate what you and partner(s) did, clarify the functionality of your code | . Online tools . repl.it (can work together) | GitHub (collaboration and repository) | Shared document or folder | ask friends and family to test drive your program and give you feedback | . Quiz Results . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notes/1",
            "relUrl": "/notes/1",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "My Java Script Quiz",
            "content": "Planning Stage . This stage really helped me to stay organized. Also, I can measure my progress since I started this project. . Questions . Which Carlson twin is better? (put image of Ava and Alexa as buttons) | What is the Carlson twins’ favorite hobby? (put image of us in cheer and 3 other hobbies as buttons) | What is the Carlson twins’ favorite Spider-Man? (put images of the 3 spidermans as buttons) | How swaggy are the Carlson twins? (put an image of twins looking cool and use sliders?) Outline . | 6 total screens | opening screen | 4 questions each on a screen | closing screen w score Need to: . | figure out a way to click the wrong answer (more screens?) | how to add images (and as buttons) | be creative (a way to click on pic to show answer?) | . . My finished quiz! . What Worked . Creating this quiz with code.org made it much easier. I slowly got the hang of it, as I understood and learned how each function, variable, and control worked. App Lab made it very easy to add images, as well as buttons and texts. Then, i followed the very similar format for each “onevent”. . Challenges/What Didn’t Work . This project involved a lot of trial and error. I would try see some examples or try and understand what a function would do, and then I’d change it a bit and see what would happen. This happened many times, leading to new thinds but also errors. It took me a lot of time and trials to figure out how to incorporate an if/else statement. The order and location in which the functions are is essential. That is another thing I learned through trial and error. However, there were occasions where I could not figure out how to make it work. In that case, I would strategize a new way of doing. For example, at the end of my quiz where the messages with your end score come up, I had to use “while” statements and define the score as a number. At first, I used inequalities, but they only worked for some situations. I decided to make it simpler, and only use “===”, rather than “&lt;= or &gt;=”. ADAPT AND OVERCOME . Performance Task Skills . Program Purpose and Funcion . This program’s purpose is to test people’s knowledge on the Carlson Twins. Another goal is to tech those who don’t know us well, and achieve a feeling of a closer relationship. | Javascript is used in this program to navigate through different screens, texts, and buttons (outputs) as a user enters data (clicking buttons, type in answers, sliding bars). | . Data Abstraction . In this project, we were given a tool, Code.org, to help simplify the process of using Javascript to make a quiz. It did not involve any lists or other data collection types. This quiz is simple, therefore not needing a data list or dictionary. | . Managing Complexity . In order to be more efficient, the next time I make a quiz using this program, I will attempt to define a function. Then, I will use that function and create a list with the inputs. Hopefully that would be more efficient and speed up the process of coding. | . Procedural Abstraction . As i said in managing complexity, I did not define any new funtions (that weren’t already options provided by code.org). However, I did learn some of the basics of Javascript through exploration and the creation of this quiz. | . Algorithim Implementation . I used sequencing and selection in this quiz. All of the events are in a specific order, going in order of the cells. It is not iteration since I am not using any lists or dictionaries. Selection is used in this quiz with the score calculations, and the incorrect page. Everytime the user gets the correct answer, +1 is added to the variable “score”. These aren’t neccesarily in order, making it selection. | . Testing . Every step of creating this quiz involved testing. Whenever I added a new button, image, or even changed the inequality on the score, I tested it. Also, if there were many options (like getting 2/3 vs 3/3 correct), I would test every possible outcome. Through this process of trial and error, I was able to achieve a successful quiz. | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/javascript/quiz",
            "relUrl": "/javascript/quiz",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "Using JavaScript",
            "content": "function logIt(output) { console.log(output); } logIt(msg); . evalmachine.&lt;anonymous&gt;:4 logIt(msg); ^ ReferenceError: msg is not defined at evalmachine.&lt;anonymous&gt;:4:7 at ContextifyScript.Script.runInThisContext (vm.js:25:33) at Object.runInThisContext (vm.js:97:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . // define a function to hold data for a Person function Person(name, ghID, classof, gpa, status) { this.name = name; this.ghID = ghID; this.classof = classof; this.gpa = gpa; this.status = status; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classof: this.classof, gpa: this.gpa, status: this.status, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, &quot;1901&quot;, &quot; &quot;, &quot;VERY Cool&quot;); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classof: &#39;1901&#39;, gpa: &#39; &#39;, status: &#39;VERY Cool&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classof&#34;:&#34;1901&#34;,&#34;gpa&#34;:&#34; &#34;,&#34;status&#34;:&#34;VERY Cool&#34;,&#34;role&#34;:&#34;Teacher&#34;} . // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2023, 4.0, &quot;cool&quot;), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2024, 3.5, &quot;not cool&quot;), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023, 3.8, &quot;cool&quot;), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2036, 4.2, &quot;very cool&quot;), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2024, 4.135, &quot;kinda cool&quot;), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2023, 3.95, &quot;not cool&quot;) ]; // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classof: &#39;1901&#39;, gpa: &#39; &#39;, status: &#39;VERY Cool&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classof: 2023, gpa: 4, status: &#39;cool&#39;, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classof: 2024, gpa: 3.5, status: &#39;not cool&#39;, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classof: 2023, gpa: 3.8, status: &#39;cool&#39;, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classof: 2036, gpa: 4.2, status: &#39;very cool&#39;, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classof: 2024, gpa: 4.135, status: &#39;kinda cool&#39;, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classof: 2023, gpa: 3.95, status: &#39;not cool&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classof&#34;:&#34;1901&#34;,&#34;gpa&#34;:&#34; &#34;,&#34;status&#34;:&#34;VERY Cool&#34;,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classof: &#39;1901&#39;, gpa: &#39; &#39;, status: &#39;VERY Cool&#39;, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:#3386FF;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GPA&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Status&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classof + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.gpa + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.status + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass ofGPAStatusRole . Mr M | jm1021 | 1901 | | VERY Cool | Teacher | Anthony | tonyhieu | 2023 | 4 | cool | Student | Bria | B-G101 | 2024 | 3.5 | not cool | Student | Allie | xiaoa0 | 2023 | 3.8 | cool | Student | Tigran | Tigran7 | 2036 | 4.2 | very cool | Student | Rebecca | Rebecca-123 | 2024 | 4.135 | kinda cool | Student | Vidhi | unknown | 2023 | 3.95 | not cool | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "Changed Theme on Fastpages",
            "content": "Changed my Theme to Cayman . . This is what it looked like when I changed the theme of my Fastpage in GitHub. It looked very nice with the new blue/green colors and fonts. . . However, some aspects in the Fastpage were limited. For example, the fonts became different sizes. The images from the posts on the home page were different sizes. Also, you are not able to acess the other pages (ex: My Work, About Me, Tags, etc.) . . Also, the presentation of the posts look different. The tags don’t have the little symbol to the left of them like in the minima theme. Also, everything is spaced to the left. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/themes/1",
            "relUrl": "/themes/1",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Making a List with Dictonaries . I defined some keys and values on information about me and my partner | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Alexa&quot;, &quot;MiddleName&quot;: &quot;Rose&quot;, &quot;LastName&quot;: &quot;Carlson&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alexarosecarlson.com&quot;, &quot;Owns_Cars&quot;: [&quot;Tesla-Model-3&quot;, &quot;Mercedes-GL450&quot;, &quot;Ford-Expedition&quot;], &quot;Phone&quot;: &quot;8582695083&quot;, &quot;Pets&quot;: [&quot;Dog&quot;], &quot;Favorite_Colors&quot;: [&quot;Blue&quot;, &quot;Purple&quot;], &quot;Phone_Provider&quot;: &quot;Verizon&quot; }) print(InfoDb) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Ava&quot;, &quot;MiddleName&quot;: &quot;Brynn&quot;, &quot;LastName&quot;: &quot;Carlson&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;avabrynncheer@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Tesla-Model-3&quot;, &quot;Mercedes-GL450&quot;, &quot;Ford-Expedition&quot;], &quot;Phone&quot;: &quot;8582695084&quot;, &quot;Pets&quot;: [&quot;Dog&quot;], &quot;Favorite_Colors&quot;: [&quot;Pink&quot;, &quot;Blue&quot;], &quot;Phone_Provider&quot;: &quot;Verizon&quot; }) print() print() # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Alexa&#39;, &#39;MiddleName&#39;: &#39;Rose&#39;, &#39;LastName&#39;: &#39;Carlson&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;alexarosecarlson.com&#39;, &#39;Owns_Cars&#39;: [&#39;Tesla-Model-3&#39;, &#39;Mercedes-GL450&#39;, &#39;Ford-Expedition&#39;], &#39;Phone&#39;: &#39;8582695083&#39;, &#39;Pets&#39;: [&#39;Dog&#39;], &#39;Favorite_Colors&#39;: [&#39;Blue&#39;, &#39;Purple&#39;], &#39;Phone_Provider&#39;: &#39;Verizon&#39;}] [{&#39;FirstName&#39;: &#39;Alexa&#39;, &#39;MiddleName&#39;: &#39;Rose&#39;, &#39;LastName&#39;: &#39;Carlson&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;alexarosecarlson.com&#39;, &#39;Owns_Cars&#39;: [&#39;Tesla-Model-3&#39;, &#39;Mercedes-GL450&#39;, &#39;Ford-Expedition&#39;], &#39;Phone&#39;: &#39;8582695083&#39;, &#39;Pets&#39;: [&#39;Dog&#39;], &#39;Favorite_Colors&#39;: [&#39;Blue&#39;, &#39;Purple&#39;], &#39;Phone_Provider&#39;: &#39;Verizon&#39;}, {&#39;FirstName&#39;: &#39;Ava&#39;, &#39;MiddleName&#39;: &#39;Brynn&#39;, &#39;LastName&#39;: &#39;Carlson&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;avabrynncheer@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Tesla-Model-3&#39;, &#39;Mercedes-GL450&#39;, &#39;Ford-Expedition&#39;], &#39;Phone&#39;: &#39;8582695084&#39;, &#39;Pets&#39;: [&#39;Dog&#39;], &#39;Favorite_Colors&#39;: [&#39;Pink&#39;, &#39;Blue&#39;], &#39;Phone_Provider&#39;: &#39;Verizon&#39;}] . Making a Loop . this loop prints the records I defined and listed in the last cell | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;MiddleName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Phone:&quot;, d_rec[&quot;Phone&quot;]) print(&quot; t&quot;, &quot;Pets: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Pets&quot;])) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Favorite Colors: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite_Colors&quot;])) print(&quot; t&quot;, &quot;Phone Provider:&quot;, d_rec[&quot;Phone_Provider&quot;]) print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon . Reversed Loop . this is the last loop, but reversed | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;MiddleName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Phone:&quot;, d_rec[&quot;Phone&quot;]) print(&quot; t&quot;, &quot;Pets: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Pets&quot;])) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Favorite Colors: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite_Colors&quot;])) print(&quot; t&quot;, &quot;Phone Provider:&quot;, d_rec[&quot;Phone_Provider&quot;]) print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output reversed n&quot;) for record in reversed(InfoDb): # this reverses the data in the InfoDB list print_data(record) for_loop() . For loop output reversed Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon . While Loop . this kind of loop defines a variable and uses that to print the next record | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon . While Loop Reversed . this is the while loop reversed | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output reversed n&quot;) i = len(InfoDb) while i &gt; 0: # i has to be greater than 0 now that its is reversed (starting at 2 and can&#39;t go below 0) record = InfoDb[i-1] # lists begin at 0, however, length begins at 1 (must -1 to have same record) print_data(record) i -= 1 # the - allows to go in reverse order return while_loop() . While loop output reversed Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon . Recursion Algorithm . A recursion algorithm calls for itself in it&#39;s definition | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon . Reversed Recursion Algorithm . this is the recursion algorithm reversed | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &gt;= 0: # must be greater than or equal to 0 since the first record in length is 0 in the list record = InfoDb[i] print_data(record) recursive_loop(i - 1) # -1 makes it reversed return print(&quot;Recursive loop output reversed n&quot;) recursive_loop(len(InfoDb)-1) # once again the length is one more than the record in the list so there is -1 . Recursive loop output reversed Ava Brynn Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695084 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Pink, Blue Phone Provider: Verizon Alexa Rose Carlson Residence: San Diego Birth Day: May 16 Phone: 8582695083 Pets: Dog Cars: Tesla-Model-3, Mercedes-GL450, Ford-Expedition Favorite Colors: Blue, Purple Phone Provider: Verizon . Nested Loop . In this nested loop, there is a for loop inside of another for loop. It will run through the inner loop before the outer loop moves onto the next input. In this case, it will multiply the inner loop number by the outer loop number. | . from re import A for i in range(1, 11): for a in range(1, 11): # this is the nested loop that will iterate from 1-10 print(i * a, end=&#39; &#39;) # print the multiplication products print() . 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/week2/python_lists",
            "relUrl": "/week2/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "My Quiz",
            "content": "def question_with_response(promt): print(&quot;Question: &quot; + promt) msg = input() return msg correct = 0 ec_abort = 0 # I created the variable &quot;ec_abort&quot; (stands for extra credit abort) print(&quot;Hey queen, make sure to think out of the box when taking this quiz.&quot;) print(&quot;You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number.&quot;) question_with_response(&quot;Are you ready?&quot;) if ec_abort == 0: rsp = question_with_response(&quot;How old am I?&quot;) if rsp == &quot;16&quot;: print(rsp + &quot; is correct:)&quot;) correct += 1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # The new variable allows me to code so that if the user of my quiz types &quot;Give me 100%&quot;, it skips to the end with a 5/5 if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite color?&quot;) if rsp == &quot;Blue&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If they get the question correct, then the variable &quot;correct&quot; goes up by 1 if ec_abort == 0: rsp = question_with_response(&quot;How many siblings to I have?&quot;) if rsp == &quot;3&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) # If their answer is incorrect, the amount correct stays the same and it prints &quot;is no bueno:(&quot; if ec_abort == 0: rsp = question_with_response(&quot;What pet do I have?&quot;) if rsp == &quot;A dog&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 0: rsp = question_with_response(&quot;What is my favorite subject?&quot;) if rsp == &quot;Math&quot;: print(rsp + &quot; is correct:)&quot;) correct +=1 elif rsp == &quot;Give me 100%&quot;: print(rsp + &quot; BOOM 100% YOU ARE DONE&quot;) ec_abort = 1 else: print(rsp + &quot; is no bueno:(&quot;) if ec_abort == 1: print(&quot;You scored 5/5&quot;) if ec_abort == 0: print (&quot;Slayyy you scored &quot; + str(correct) + &quot;/5&quot;) # If they don&#39;t use the &quot;Give me 100%&quot; option, ec_abort is still 0, allowing this step that gives the perentage correct to show . Hey queen, make sure to think out of the box when taking this quiz. You will be asked 5 questions about me. Make sure the first letter of your answer is capitalized and that if it is numerical, use the number. Question: Are you ready? Question: How old am I? 16 is correct:) Question: What is my favorite color? Blue is correct:) Question: How many siblings to I have? Give me 100% BOOM 100% YOU ARE DONE You scored 5/5 .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/myquiz",
            "relUrl": "/notebooks/myquiz",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "Resource Videos",
            "content": "Github help: . GitHub Concepts. . GitHub Set-up Instructions. . Jupyter Notebooks Help: . Jupyter Basics. .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/markdown/videos",
            "relUrl": "/markdown/videos",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post75": {
            "title": "My First Jupyter Notebook",
            "content": "print (&quot;Hello, World!&quot;) . Hello, World! .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/notebooks/myjupyternotebook",
            "relUrl": "/notebooks/myjupyternotebook",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post76": {
            "title": "My First Markdown",
            "content": "My First Markdown #coolright? . I’m starting to figure this out! :joy: . Here are some things I love . My dog, Mocha | my family (twin sister included) | Allstar Cheerleading | Marvel Movies (btw Spiderman is the best) | my friends &lt;3 |",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/markdown/1",
            "relUrl": "/markdown/1",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post77": {
            "title": "Binary Math",
            "content": "| Overview | Spell Check API | Binary Math | . Binary Math with Conversions . Shift Left(x2) Plus Binary Octal Hexadecimal Decimal Minus Shift Right(/2) . &lt;&lt; | +1 | 00000000 | 0 | 0 | 0 | -1 | &gt;&gt; | . 2^2=+4 | 2^1=+2 | 2^0=+1 | . Turn on | Turn on | Turn on | . | | | .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post78": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://alexac54767.github.io/Alexa-Fastpage/2020/02/20/test.html",
            "relUrl": "/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Frontend",
          "content": "| Overview | Java Script Table | . Code in this Sub Menu . This is a link to my use of Javascript. I built a table using html, javascript, and collecting data through Json. | .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "API",
          "content": "| Overview | Spell Check API | Binary Math | . APIs in this Sub Menu . HTML, CSS, and JavaScript are the front-end of the API. Python and API resource definitions are used for RESTful API definitions. Abstraction of Frontend and Backend code, the exchange of standard data format (JSON), and guidelines for exchange (REST) is a technique that saves a lot of time between developers. Learning APIs is a highly recommended step for every developer trying to break into the world of tech. . Covid19: RapidAPI example. This is introducing APIs by accessing something that already exists. RapidAPI shows how many practice RESTful definitions. Almost any data source imagined can be accessed here. | Jokes: An introduction to Python RESTful API libraries. A Python List is used to make a Data Model, but persistence in this technique is limited, each time server is refreshed data is lost. This example is great for learning, but data is considered volatile. | Users: Another RESTful API library example. However, this backend establishes data persistence through the use of a database. This data if properly managed in deployment and migrated when changed can last forever. | . Web API Overview . . A Web API is an application programming interface typically for a web browser. Non-changing or Static Endpoints are used in interacting with the server-side Web APIs. RESTful Web APIs use HTTP methods to access resources via URL parameters, and use JSON for transmitting text between client and server. Server. In these examples, we will be using Python to define REST APIs. Python tools are very popular for building RESTful APIs | REST: Representational State Transfer. A set of guidelines on how to architect a network-connected software system. | Client-server: One guideline is a client and server must be decoupled from each other, allowing each to develop independently. | Layered system: The client may access the resources on the server indirectly through other layers such as a proxy or using authentication. This will be clarified by application and security requirements. | . Client. JavaScript is the frontend language used to consume data from the Python defined REST APIs. Fetch will be used to make HTTP requests, as well as handle HTTP response. There are four basic HTTP methods, they align with Create, Read, Update, Delete (CRUD). | GET =&gt; Retrieve/Read data | POST =&gt; Create data | PUT =&gt; Update data | DELETE =&gt; Delete data | . REST endpoints will have similarity from application to application. In planning APIs, for a Users system you can anticipate key methods. The Users RESTful APIs would likely contain these endpoints. | GET: /users =&gt; Get a list of users | GET: /users(id) =&gt; Get a single user | POST: /users =&gt; Create a new user | PUT: /users(id) =&gt; Update a user | DELETE: /users(id) =&gt; Delete a user | . Once a RESTful API receives and processes an HTTP request, it will return an HTTP response. Included in this response is an HTTP status code. Common status codes are shown. | 200 =&gt; OK, this response will then have the promise of JSON data | 400 =&gt; Bad Request | 404 =&gt; Not Found | 500 =&gt; Internal Server Error (aka bug) | . . . .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "My Work",
          "content": "Alexa’s APCSP Work . This is all of my APCSP work so far. Enjoy! . Trimester Week Project . 1 | 0 | My First Jupyter Notebook. | . 1 | 0 | My First Markdown Post. | . 1 | 1 | My Quiz. | . 1 | 1 | Tool Check. | . 1 | 2 | Changed Theme. | . 1 | 2 | Lists, Dictionaries, Iteration. | . 1 | 3 | My Javascript Quiz | . 1 | 3 | My Bog About My Quiz | . 1 | 4 | Collaboration Notes | . 1 | 4 | Python Web Server Project (video) | . 1 | 4 | My Group’s Collaboration | . 1 | 5 | Our Scrum Process | . 1 | 5 | Submenu with JS Table | . 1 | 5 | Final Project Planning | . 1 | 6 | Project Wire Frame/UML | . 1 | 6 | College Board Video Notes | . 1 | 7 | API Page with Sumbmenu | . 1 | 7 | Error Testing and Challenge | . 1 | 7 | My Group’s API | . 1 | 7 | College Board 1.4 Notes | . 1 | 7 | Our Project’s College Board Criteria | . 1 | 8 | College Board Videos and Notes 4.1 | . 1 | 8 | Identifying and Correcting Errors Challenge | . 1 | 8 | Spell Check API | . 1 | 8/9 | Our Group’s Deployed Flask Site | . 1 | 9 | Project Week One Video Planning | . 1 | 9 | Our Stock API | . 1 | 9 | Project Week One Video | . 1 | 9 | Blog About our API | . 1 | 10 | Our Group’s Plan for our Final Project | . 1 | 11 | My Group’s Final Project | . 1 | 12 | Collegeboard Final and NATM | . 2 | 13 | Binary Math | . 2 | 14-16 | Student Lessons | . 2 | 17 | Scoring Previous CollegeBoard Submissions | . 2 | 17 | Customized Mort’s Family Reunion Page | . 2 | 18 | Object Oriented Programming (backend) hack | . 2 | 18 | Project Planning (frontend to backend) | . 2 | 19 | Project Database Video | . 2 | 19 | Project API Video | . 2 | 20 | CollegeBoard MCQ #2 Reflection | . 2 | 20 | Team Baddies Project Approval Presentation | . 2 | 20 | My Role in the Group Project | . 2 | 20 | 5.1 and 5.2 Lecture Notes | . 2 | 21 | 5.3 and 5.4 Lecture Notes | . 2 | 22 | 5.5 and 5.6 Lecture Notes | . 2 | 22 | N@TM Blog | . 2 | 22 | CPT Write-Up | . 2 | 23 | MCQ3 Reflection | . 3 | 25 | 2.2 Data Compressions/Images | . 3 | 25 | 2.3 Extracting Information from Data/Pandas | . 3 | 25 | Collegeboard 2.2/2.3 Quizes Reflection | . 3 | 26 | Unit 2.4 a Notebook (my own database with CRUD) | . 3 | 26 | Unit 2.4 b Notebook | . 3 | 26 | Debugging example for 2.4 database | .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/my_work",
          "relUrl": "/my_work",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Extra Resources",
          "content": "For When You’re Stuck . Watch these videos. .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/resources",
          "relUrl": "/resources",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "About Me",
          "content": "This website is made by Alexa Carlson, a girl who’s learning how to code in APCSP :) . This is my family . . and of course my super kool twin ! . . Here are some of my besties . . . . My dog . . I do allstar cheerleading . . I love Marvel (especially Spider-Man) . . I love to travel (fyi Spain is the best) . .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  

  
  

  
      ,"page20": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alexac54767.github.io/Alexa-Fastpage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}